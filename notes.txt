[0m[1mmodule.ebs_csi_irsa_role.data.aws_region.current: Reading...[0m[0m
[0m[1mmodule.ebs_csi_irsa_role.data.aws_partition.current: Reading...[0m[0m
[0m[1mmodule.ebs_csi_irsa_role.data.aws_caller_identity.current: Reading...[0m[0m
[0m[1mdata.aws_caller_identity.current: Reading...[0m[0m
[0m[1mmodule.ebs_csi_irsa_role.data.aws_partition.current: Read complete after 0s [id=aws][0m
[0m[1mmodule.ebs_csi_irsa_role.data.aws_region.current: Read complete after 0s [id=us-east-1][0m
[0m[1mmodule.ebs_csi_irsa_role.data.aws_iam_policy_document.ebs_csi[0]: Reading...[0m[0m
[0m[1mmodule.ebs_csi_irsa_role.data.aws_iam_policy_document.ebs_csi[0]: Read complete after 0s [id=212299854][0m
[0m[1mdata.aws_caller_identity.current: Read complete after 0s [id=654654499596][0m
[0m[1mmodule.ebs_csi_irsa_role.data.aws_caller_identity.current: Read complete after 0s [id=654654499596][0m

Terraform used the selected providers to generate the following execution
plan. Resource actions are indicated with the following symbols:
  [32m+[0m create[0m
 [36m<=[0m read (data resources)[0m

Terraform will perform the following actions:

[1m  # data.tls_certificate.eks[0m will be read during apply
  # (config refers to values not yet known)
[0m [36m<=[0m[0m data "tls_certificate" "eks" {
      [32m+[0m[0m certificates = (known after apply)
      [32m+[0m[0m id           = (known after apply)
      [32m+[0m[0m url          = (known after apply)
    }

[1m  # aws_iam_policy.inline_policy[0m will be created
[0m  [32m+[0m[0m resource "aws_iam_policy" "inline_policy" {
      [32m+[0m[0m arn              = (known after apply)
      [32m+[0m[0m attachment_count = (known after apply)
      [32m+[0m[0m id               = (known after apply)
      [32m+[0m[0m name             = "eks-cluster-policy-kms"
      [32m+[0m[0m name_prefix      = (known after apply)
      [32m+[0m[0m path             = "/"
      [32m+[0m[0m policy           = (known after apply)
      [32m+[0m[0m policy_id        = (known after apply)
      [32m+[0m[0m tags_all         = (known after apply)
    }

[1m  # aws_iam_policy.inline_policy_ebs[0m will be created
[0m  [32m+[0m[0m resource "aws_iam_policy" "inline_policy_ebs" {
      [32m+[0m[0m arn              = (known after apply)
      [32m+[0m[0m attachment_count = (known after apply)
      [32m+[0m[0m id               = (known after apply)
      [32m+[0m[0m name             = "eks-cluster-node-policy-kms"
      [32m+[0m[0m name_prefix      = (known after apply)
      [32m+[0m[0m path             = "/"
      [32m+[0m[0m policy           = (known after apply)
      [32m+[0m[0m policy_id        = (known after apply)
      [32m+[0m[0m tags_all         = (known after apply)
    }

[1m  # aws_iam_policy_attachment.inline_kms_policy_attachment[0m will be created
[0m  [32m+[0m[0m resource "aws_iam_policy_attachment" "inline_kms_policy_attachment" {
      [32m+[0m[0m id         = (known after apply)
      [32m+[0m[0m name       = "eks-cluster-policy-kms-attachment"
      [32m+[0m[0m policy_arn = (known after apply)
      [32m+[0m[0m roles      = [
          [32m+[0m[0m "eks-cluster-role",
        ]
    }

[1m  # aws_iam_policy_attachment.node_group_policy[0m will be created
[0m  [32m+[0m[0m resource "aws_iam_policy_attachment" "node_group_policy" {
      [32m+[0m[0m id         = (known after apply)
      [32m+[0m[0m name       = "eks-cluster-node-policy-kms-attachment"
      [32m+[0m[0m policy_arn = (known after apply)
      [32m+[0m[0m roles      = [
          [32m+[0m[0m "eks-node-group-role",
        ]
    }

[1m  # aws_iam_role.eks_cluster[0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role" "eks_cluster" {
      [32m+[0m[0m arn                   = (known after apply)
      [32m+[0m[0m assume_role_policy    = jsonencode(
            {
              [32m+[0m[0m Statement = [
                  [32m+[0m[0m {
                      [32m+[0m[0m Action    = "sts:AssumeRole"
                      [32m+[0m[0m Effect    = "Allow"
                      [32m+[0m[0m Principal = {
                          [32m+[0m[0m Service = "eks.amazonaws.com"
                        }
                      [32m+[0m[0m Sid       = "EKSClusterAssumeRole"
                    },
                ]
              [32m+[0m[0m Version   = "2012-10-17"
            }
        )
      [32m+[0m[0m create_date           = (known after apply)
      [32m+[0m[0m force_detach_policies = false
      [32m+[0m[0m id                    = (known after apply)
      [32m+[0m[0m managed_policy_arns   = (known after apply)
      [32m+[0m[0m max_session_duration  = 3600
      [32m+[0m[0m name                  = "eks-cluster-role"
      [32m+[0m[0m name_prefix           = (known after apply)
      [32m+[0m[0m path                  = "/"
      [32m+[0m[0m tags_all              = (known after apply)
      [32m+[0m[0m unique_id             = (known after apply)
    }

[1m  # aws_iam_role.eks_node_group[0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role" "eks_node_group" {
      [32m+[0m[0m arn                   = (known after apply)
      [32m+[0m[0m assume_role_policy    = jsonencode(
            {
              [32m+[0m[0m Statement = [
                  [32m+[0m[0m {
                      [32m+[0m[0m Action    = "sts:AssumeRole"
                      [32m+[0m[0m Effect    = "Allow"
                      [32m+[0m[0m Principal = {
                          [32m+[0m[0m Service = "ec2.amazonaws.com"
                        }
                    },
                ]
              [32m+[0m[0m Version   = "2012-10-17"
            }
        )
      [32m+[0m[0m create_date           = (known after apply)
      [32m+[0m[0m force_detach_policies = false
      [32m+[0m[0m id                    = (known after apply)
      [32m+[0m[0m managed_policy_arns   = (known after apply)
      [32m+[0m[0m max_session_duration  = 3600
      [32m+[0m[0m name                  = "eks-node-group-role"
      [32m+[0m[0m name_prefix           = (known after apply)
      [32m+[0m[0m path                  = "/"
      [32m+[0m[0m tags_all              = (known after apply)
      [32m+[0m[0m unique_id             = (known after apply)
    }

[1m  # aws_iam_role_policy_attachment.eks_cluster_policy[0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role_policy_attachment" "eks_cluster_policy" {
      [32m+[0m[0m id         = (known after apply)
      [32m+[0m[0m policy_arn = "arn:aws:iam::aws:policy/AmazonEKSClusterPolicy"
      [32m+[0m[0m role       = "eks-cluster-role"
    }

[1m  # aws_iam_role_policy_attachment.eks_cluster_policy2[0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role_policy_attachment" "eks_cluster_policy2" {
      [32m+[0m[0m id         = (known after apply)
      [32m+[0m[0m policy_arn = "arn:aws:iam::aws:policy/AmazonEKSVPCResourceController"
      [32m+[0m[0m role       = "eks-cluster-role"
    }

[1m  # aws_iam_role_policy_attachment.eks_cni_policy[0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role_policy_attachment" "eks_cni_policy" {
      [32m+[0m[0m id         = (known after apply)
      [32m+[0m[0m policy_arn = "arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy"
      [32m+[0m[0m role       = "eks-node-group-role"
    }

[1m  # aws_iam_role_policy_attachment.eks_container_registry_policy[0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role_policy_attachment" "eks_container_registry_policy" {
      [32m+[0m[0m id         = (known after apply)
      [32m+[0m[0m policy_arn = "arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly"
      [32m+[0m[0m role       = "eks-node-group-role"
    }

[1m  # aws_iam_role_policy_attachment.eks_worker_node_policy[0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role_policy_attachment" "eks_worker_node_policy" {
      [32m+[0m[0m id         = (known after apply)
      [32m+[0m[0m policy_arn = "arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy"
      [32m+[0m[0m role       = "eks-node-group-role"
    }

[1m  # aws_internet_gateway.eks_igw[0m will be created
[0m  [32m+[0m[0m resource "aws_internet_gateway" "eks_igw" {
      [32m+[0m[0m arn      = (known after apply)
      [32m+[0m[0m id       = (known after apply)
      [32m+[0m[0m owner_id = (known after apply)
      [32m+[0m[0m tags_all = (known after apply)
      [32m+[0m[0m vpc_id   = (known after apply)
    }

[1m  # aws_kms_key.ebs[0m will be created
[0m  [32m+[0m[0m resource "aws_kms_key" "ebs" {
      [32m+[0m[0m arn                                = (known after apply)
      [32m+[0m[0m bypass_policy_lockout_safety_check = false
      [32m+[0m[0m customer_master_key_spec           = "SYMMETRIC_DEFAULT"
      [32m+[0m[0m deletion_window_in_days            = 7
      [32m+[0m[0m description                        = "KMS key for EBS encryption"
      [32m+[0m[0m enable_key_rotation                = true
      [32m+[0m[0m id                                 = (known after apply)
      [32m+[0m[0m is_enabled                         = true
      [32m+[0m[0m key_id                             = (known after apply)
      [32m+[0m[0m key_usage                          = "ENCRYPT_DECRYPT"
      [32m+[0m[0m multi_region                       = (known after apply)
      [32m+[0m[0m policy                             = jsonencode(
            {
              [32m+[0m[0m Id        = "key-default-1"
              [32m+[0m[0m Statement = [
                  [32m+[0m[0m {
                      [32m+[0m[0m Action    = "kms:*"
                      [32m+[0m[0m Effect    = "Allow"
                      [32m+[0m[0m Principal = {
                          [32m+[0m[0m AWS = "arn:aws:iam::654654499596:root"
                        }
                      [32m+[0m[0m Resource  = "*"
                      [32m+[0m[0m Sid       = "Enable IAM User Permissions"
                    },
                  [32m+[0m[0m {
                      [32m+[0m[0m Action    = [
                          [32m+[0m[0m "kms:Encrypt",
                          [32m+[0m[0m "kms:Decrypt",
                          [32m+[0m[0m "kms:ReEncrypt*",
                          [32m+[0m[0m "kms:GenerateDataKey*",
                          [32m+[0m[0m "kms:DescribeKey",
                        ]
                      [32m+[0m[0m Effect    = "Allow"
                      [32m+[0m[0m Principal = {
                          [32m+[0m[0m AWS = [
                              [32m+[0m[0m "arn:aws:iam::654654499596:role/eks-node-group-role",
                              [32m+[0m[0m "arn:aws:iam::654654499596:role/aws-service-role/autoscaling.amazonaws.com/AWSServiceRoleForAutoScaling",
                            ]
                        }
                      [32m+[0m[0m Resource  = "*"
                      [32m+[0m[0m Sid       = "Allow use of the key"
                    },
                  [32m+[0m[0m {
                      [32m+[0m[0m Action    = [
                          [32m+[0m[0m "kms:CreateGrant",
                          [32m+[0m[0m "kms:ListGrants",
                          [32m+[0m[0m "kms:RevokeGrant",
                        ]
                      [32m+[0m[0m Condition = {
                          [32m+[0m[0m Bool = {
                              [32m+[0m[0m "kms:GrantIsForAWSResource" = "true"
                            }
                        }
                      [32m+[0m[0m Effect    = "Allow"
                      [32m+[0m[0m Principal = {
                          [32m+[0m[0m AWS = [
                              [32m+[0m[0m "arn:aws:iam::654654499596:role/eks-node-group-role",
                              [32m+[0m[0m "arn:aws:iam::654654499596:role/aws-service-role/autoscaling.amazonaws.com/AWSServiceRoleForAutoScaling",
                            ]
                        }
                      [32m+[0m[0m Resource  = "*"
                      [32m+[0m[0m Sid       = "Allow attachment of persistent resources"
                    },
                ]
              [32m+[0m[0m Version   = "2012-10-17"
            }
        )
      [32m+[0m[0m rotation_period_in_days            = (known after apply)
      [32m+[0m[0m tags_all                           = (known after apply)
    }

[1m  # aws_kms_key.eks_secrets[0m will be created
[0m  [32m+[0m[0m resource "aws_kms_key" "eks_secrets" {
      [32m+[0m[0m arn                                = (known after apply)
      [32m+[0m[0m bypass_policy_lockout_safety_check = false
      [32m+[0m[0m customer_master_key_spec           = "SYMMETRIC_DEFAULT"
      [32m+[0m[0m deletion_window_in_days            = 7
      [32m+[0m[0m description                        = "KMS key for EKS secrets encryption"
      [32m+[0m[0m enable_key_rotation                = true
      [32m+[0m[0m id                                 = (known after apply)
      [32m+[0m[0m is_enabled                         = true
      [32m+[0m[0m key_id                             = (known after apply)
      [32m+[0m[0m key_usage                          = "ENCRYPT_DECRYPT"
      [32m+[0m[0m multi_region                       = (known after apply)
      [32m+[0m[0m policy                             = (known after apply)
      [32m+[0m[0m rotation_period_in_days            = (known after apply)
      [32m+[0m[0m tags_all                           = (known after apply)
    }

[1m  # aws_route_table.eks_public_route_table[0m will be created
[0m  [32m+[0m[0m resource "aws_route_table" "eks_public_route_table" {
      [32m+[0m[0m arn              = (known after apply)
      [32m+[0m[0m id               = (known after apply)
      [32m+[0m[0m owner_id         = (known after apply)
      [32m+[0m[0m propagating_vgws = (known after apply)
      [32m+[0m[0m route            = [
          [32m+[0m[0m {
              [32m+[0m[0m carrier_gateway_id         = ""
              [32m+[0m[0m cidr_block                 = "0.0.0.0/0"
              [32m+[0m[0m core_network_arn           = ""
              [32m+[0m[0m destination_prefix_list_id = ""
              [32m+[0m[0m egress_only_gateway_id     = ""
              [32m+[0m[0m gateway_id                 = (known after apply)
              [32m+[0m[0m ipv6_cidr_block            = ""
              [32m+[0m[0m local_gateway_id           = ""
              [32m+[0m[0m nat_gateway_id             = ""
              [32m+[0m[0m network_interface_id       = ""
              [32m+[0m[0m transit_gateway_id         = ""
              [32m+[0m[0m vpc_endpoint_id            = ""
              [32m+[0m[0m vpc_peering_connection_id  = ""
            },
        ]
      [32m+[0m[0m tags_all         = (known after apply)
      [32m+[0m[0m vpc_id           = (known after apply)
    }

[1m  # aws_route_table_association.jenkins_public_subnet1_association[0m will be created
[0m  [32m+[0m[0m resource "aws_route_table_association" "jenkins_public_subnet1_association" {
      [32m+[0m[0m id             = (known after apply)
      [32m+[0m[0m route_table_id = (known after apply)
      [32m+[0m[0m subnet_id      = (known after apply)
    }

[1m  # aws_route_table_association.jenkins_public_subnet2_association[0m will be created
[0m  [32m+[0m[0m resource "aws_route_table_association" "jenkins_public_subnet2_association" {
      [32m+[0m[0m id             = (known after apply)
      [32m+[0m[0m route_table_id = (known after apply)
      [32m+[0m[0m subnet_id      = (known after apply)
    }

[1m  # aws_route_table_association.jenkins_public_subnet3_association[0m will be created
[0m  [32m+[0m[0m resource "aws_route_table_association" "jenkins_public_subnet3_association" {
      [32m+[0m[0m id             = (known after apply)
      [32m+[0m[0m route_table_id = (known after apply)
      [32m+[0m[0m subnet_id      = (known after apply)
    }

[1m  # aws_subnet.eks_private_subnet1[0m will be created
[0m  [32m+[0m[0m resource "aws_subnet" "eks_private_subnet1" {
      [32m+[0m[0m arn                                            = (known after apply)
      [32m+[0m[0m assign_ipv6_address_on_creation                = false
      [32m+[0m[0m availability_zone                              = "us-east-1a"
      [32m+[0m[0m availability_zone_id                           = (known after apply)
      [32m+[0m[0m cidr_block                                     = "10.0.4.0/24"
      [32m+[0m[0m enable_dns64                                   = false
      [32m+[0m[0m enable_resource_name_dns_a_record_on_launch    = false
      [32m+[0m[0m enable_resource_name_dns_aaaa_record_on_launch = false
      [32m+[0m[0m id                                             = (known after apply)
      [32m+[0m[0m ipv6_cidr_block_association_id                 = (known after apply)
      [32m+[0m[0m ipv6_native                                    = false
      [32m+[0m[0m map_public_ip_on_launch                        = false
      [32m+[0m[0m owner_id                                       = (known after apply)
      [32m+[0m[0m private_dns_hostname_type_on_launch            = (known after apply)
      [32m+[0m[0m tags                                           = {
          [32m+[0m[0m "Name" = "eks-private-subnet"
        }
      [32m+[0m[0m tags_all                                       = {
          [32m+[0m[0m "Name" = "eks-private-subnet"
        }
      [32m+[0m[0m vpc_id                                         = (known after apply)
    }

[1m  # aws_subnet.eks_private_subnet2[0m will be created
[0m  [32m+[0m[0m resource "aws_subnet" "eks_private_subnet2" {
      [32m+[0m[0m arn                                            = (known after apply)
      [32m+[0m[0m assign_ipv6_address_on_creation                = false
      [32m+[0m[0m availability_zone                              = "us-east-1b"
      [32m+[0m[0m availability_zone_id                           = (known after apply)
      [32m+[0m[0m cidr_block                                     = "10.0.5.0/24"
      [32m+[0m[0m enable_dns64                                   = false
      [32m+[0m[0m enable_resource_name_dns_a_record_on_launch    = false
      [32m+[0m[0m enable_resource_name_dns_aaaa_record_on_launch = false
      [32m+[0m[0m id                                             = (known after apply)
      [32m+[0m[0m ipv6_cidr_block_association_id                 = (known after apply)
      [32m+[0m[0m ipv6_native                                    = false
      [32m+[0m[0m map_public_ip_on_launch                        = false
      [32m+[0m[0m owner_id                                       = (known after apply)
      [32m+[0m[0m private_dns_hostname_type_on_launch            = (known after apply)
      [32m+[0m[0m tags                                           = {
          [32m+[0m[0m "Name" = "eks-private-subnet"
        }
      [32m+[0m[0m tags_all                                       = {
          [32m+[0m[0m "Name" = "eks-private-subnet"
        }
      [32m+[0m[0m vpc_id                                         = (known after apply)
    }

[1m  # aws_subnet.eks_private_subnet3[0m will be created
[0m  [32m+[0m[0m resource "aws_subnet" "eks_private_subnet3" {
      [32m+[0m[0m arn                                            = (known after apply)
      [32m+[0m[0m assign_ipv6_address_on_creation                = false
      [32m+[0m[0m availability_zone                              = "us-east-1c"
      [32m+[0m[0m availability_zone_id                           = (known after apply)
      [32m+[0m[0m cidr_block                                     = "10.0.6.0/24"
      [32m+[0m[0m enable_dns64                                   = false
      [32m+[0m[0m enable_resource_name_dns_a_record_on_launch    = false
      [32m+[0m[0m enable_resource_name_dns_aaaa_record_on_launch = false
      [32m+[0m[0m id                                             = (known after apply)
      [32m+[0m[0m ipv6_cidr_block_association_id                 = (known after apply)
      [32m+[0m[0m ipv6_native                                    = false
      [32m+[0m[0m map_public_ip_on_launch                        = false
      [32m+[0m[0m owner_id                                       = (known after apply)
      [32m+[0m[0m private_dns_hostname_type_on_launch            = (known after apply)
      [32m+[0m[0m tags                                           = {
          [32m+[0m[0m "Name" = "eks-private-subnet"
        }
      [32m+[0m[0m tags_all                                       = {
          [32m+[0m[0m "Name" = "eks-private-subnet"
        }
      [32m+[0m[0m vpc_id                                         = (known after apply)
    }

[1m  # aws_subnet.eks_public_subnet1[0m will be created
[0m  [32m+[0m[0m resource "aws_subnet" "eks_public_subnet1" {
      [32m+[0m[0m arn                                            = (known after apply)
      [32m+[0m[0m assign_ipv6_address_on_creation                = false
      [32m+[0m[0m availability_zone                              = "us-east-1a"
      [32m+[0m[0m availability_zone_id                           = (known after apply)
      [32m+[0m[0m cidr_block                                     = "10.0.1.0/24"
      [32m+[0m[0m enable_dns64                                   = false
      [32m+[0m[0m enable_resource_name_dns_a_record_on_launch    = false
      [32m+[0m[0m enable_resource_name_dns_aaaa_record_on_launch = false
      [32m+[0m[0m id                                             = (known after apply)
      [32m+[0m[0m ipv6_cidr_block_association_id                 = (known after apply)
      [32m+[0m[0m ipv6_native                                    = false
      [32m+[0m[0m map_public_ip_on_launch                        = true
      [32m+[0m[0m owner_id                                       = (known after apply)
      [32m+[0m[0m private_dns_hostname_type_on_launch            = (known after apply)
      [32m+[0m[0m tags                                           = {
          [32m+[0m[0m "Name" = "eks-public-subnet"
        }
      [32m+[0m[0m tags_all                                       = {
          [32m+[0m[0m "Name" = "eks-public-subnet"
        }
      [32m+[0m[0m vpc_id                                         = (known after apply)
    }

[1m  # aws_subnet.eks_public_subnet2[0m will be created
[0m  [32m+[0m[0m resource "aws_subnet" "eks_public_subnet2" {
      [32m+[0m[0m arn                                            = (known after apply)
      [32m+[0m[0m assign_ipv6_address_on_creation                = false
      [32m+[0m[0m availability_zone                              = "us-east-1b"
      [32m+[0m[0m availability_zone_id                           = (known after apply)
      [32m+[0m[0m cidr_block                                     = "10.0.2.0/24"
      [32m+[0m[0m enable_dns64                                   = false
      [32m+[0m[0m enable_resource_name_dns_a_record_on_launch    = false
      [32m+[0m[0m enable_resource_name_dns_aaaa_record_on_launch = false
      [32m+[0m[0m id                                             = (known after apply)
      [32m+[0m[0m ipv6_cidr_block_association_id                 = (known after apply)
      [32m+[0m[0m ipv6_native                                    = false
      [32m+[0m[0m map_public_ip_on_launch                        = true
      [32m+[0m[0m owner_id                                       = (known after apply)
      [32m+[0m[0m private_dns_hostname_type_on_launch            = (known after apply)
      [32m+[0m[0m tags                                           = {
          [32m+[0m[0m "Name" = "eks-public-subnet"
        }
      [32m+[0m[0m tags_all                                       = {
          [32m+[0m[0m "Name" = "eks-public-subnet"
        }
      [32m+[0m[0m vpc_id                                         = (known after apply)
    }

[1m  # aws_subnet.eks_public_subnet3[0m will be created
[0m  [32m+[0m[0m resource "aws_subnet" "eks_public_subnet3" {
      [32m+[0m[0m arn                                            = (known after apply)
      [32m+[0m[0m assign_ipv6_address_on_creation                = false
      [32m+[0m[0m availability_zone                              = "us-east-1c"
      [32m+[0m[0m availability_zone_id                           = (known after apply)
      [32m+[0m[0m cidr_block                                     = "10.0.3.0/24"
      [32m+[0m[0m enable_dns64                                   = false
      [32m+[0m[0m enable_resource_name_dns_a_record_on_launch    = false
      [32m+[0m[0m enable_resource_name_dns_aaaa_record_on_launch = false
      [32m+[0m[0m id                                             = (known after apply)
      [32m+[0m[0m ipv6_cidr_block_association_id                 = (known after apply)
      [32m+[0m[0m ipv6_native                                    = false
      [32m+[0m[0m map_public_ip_on_launch                        = true
      [32m+[0m[0m owner_id                                       = (known after apply)
      [32m+[0m[0m private_dns_hostname_type_on_launch            = (known after apply)
      [32m+[0m[0m tags                                           = {
          [32m+[0m[0m "Name" = "eks-public-subnet"
        }
      [32m+[0m[0m tags_all                                       = {
          [32m+[0m[0m "Name" = "eks-public-subnet"
        }
      [32m+[0m[0m vpc_id                                         = (known after apply)
    }

[1m  # aws_vpc.eks_vpc[0m will be created
[0m  [32m+[0m[0m resource "aws_vpc" "eks_vpc" {
      [32m+[0m[0m arn                                  = (known after apply)
      [32m+[0m[0m cidr_block                           = "10.0.0.0/16"
      [32m+[0m[0m default_network_acl_id               = (known after apply)
      [32m+[0m[0m default_route_table_id               = (known after apply)
      [32m+[0m[0m default_security_group_id            = (known after apply)
      [32m+[0m[0m dhcp_options_id                      = (known after apply)
      [32m+[0m[0m enable_dns_hostnames                 = (known after apply)
      [32m+[0m[0m enable_dns_support                   = true
      [32m+[0m[0m enable_network_address_usage_metrics = (known after apply)
      [32m+[0m[0m id                                   = (known after apply)
      [32m+[0m[0m instance_tenancy                     = "default"
      [32m+[0m[0m ipv6_association_id                  = (known after apply)
      [32m+[0m[0m ipv6_cidr_block                      = (known after apply)
      [32m+[0m[0m ipv6_cidr_block_network_border_group = (known after apply)
      [32m+[0m[0m main_route_table_id                  = (known after apply)
      [32m+[0m[0m owner_id                             = (known after apply)
      [32m+[0m[0m tags                                 = {
          [32m+[0m[0m "Name" = "eks-vpc"
        }
      [32m+[0m[0m tags_all                             = {
          [32m+[0m[0m "Name" = "eks-vpc"
        }
    }

[1m  # helm_release.cve_processor_chart[0m will be created
[0m  [32m+[0m[0m resource "helm_release" "cve_processor_chart" {
      [32m+[0m[0m atomic                     = false
      [32m+[0m[0m chart                      = "./charts/cve-processor"
      [32m+[0m[0m cleanup_on_fail            = false
      [32m+[0m[0m create_namespace           = false
      [32m+[0m[0m dependency_update          = false
      [32m+[0m[0m disable_crd_hooks          = false
      [32m+[0m[0m disable_openapi_validation = false
      [32m+[0m[0m disable_webhooks           = false
      [32m+[0m[0m force_update               = false
      [32m+[0m[0m id                         = (known after apply)
      [32m+[0m[0m lint                       = false
      [32m+[0m[0m manifest                   = (known after apply)
      [32m+[0m[0m max_history                = 0
      [32m+[0m[0m metadata                   = (known after apply)
      [32m+[0m[0m name                       = "cve-processor"
      [32m+[0m[0m namespace                  = "cve-processor"
      [32m+[0m[0m pass_credentials           = false
      [32m+[0m[0m recreate_pods              = false
      [32m+[0m[0m render_subchart_notes      = true
      [32m+[0m[0m replace                    = false
      [32m+[0m[0m reset_values               = false
      [32m+[0m[0m reuse_values               = false
      [32m+[0m[0m skip_crds                  = false
      [32m+[0m[0m status                     = "deployed"
      [32m+[0m[0m timeout                    = 300
      [32m+[0m[0m values                     = [
          [32m+[0m[0m <<-EOT
                # Default values for cve-processor.
                # This is a YAML-formatted file.
                # Declare variables to be passed into your templates.
                
                replicaCount: 1
                
                # image:
                #   repository: nginx
                #   pullPolicy: IfNotPresent
                #   # Overrides the image tag whose default is the chart appVersion.
                #   tag: ""
                
                # imagePullSecrets: []
                # nameOverride: ""
                # fullnameOverride: ""
                
                image:
                  repository: "vkneu7/cve-processor"
                  pullPolicy: "Always"
                  # Overrides the image tag whose default is the chart appVersion.
                  tag: "v0.7.3"
                container:
                  name: cve-processor
                service:
                  port: 8080
                livenessProbe:
                  httpGet:
                    path: /healthz
                    port: 8080
                  initialDelaySeconds: 600
                  periodSeconds: 3
                readinessProbe:
                  httpGet:
                    path: /readiness
                    port: 8080
                  initialDelaySeconds: 600
                  periodSeconds: 5
                
                env:
                  # - name: DB_HOST
                  #   value: postgresql # host.docker.internal for local postgres
                  # - name: DB_USER
                  #   value: web_app
                  # - name: DB_PASSWORD
                  #   valueFrom: 
                  #     secretKeyRef:
                  #       name: db-password-secret
                  #       key: DB_PASSWORD
                  # - name: DB
                  #   value: cve
                  # - name: DB_PORT
                  #   value: "5432"
                  # - name: DB_SCHEMA
                  #   value: cve
                  - name: KAFKA_USER
                    value: user1
                  - name: KAFKA_PASSWORD
                    value: "lSeoHL5U6M"
                  - name: GOARCH
                    value: amd64
                  - name: KAFKA_BROKER_0
                    value: kafka-controller-0.kafka-controller-headless.kafka.svc.cluster.local:9092
                  - name: KAFKA_BROKER_1
                    value: kafka-controller-1.kafka-controller-headless.kafka.svc.cluster.local:9092
                  - name: KAFKA_BROKER_2
                    value: kafka-controller-2.kafka-controller-headless.kafka.svc.cluster.local:9092
                
                initContainer:
                  enabled: true
                  image:
                    repository: vkneu7/flyway
                    tag: "v1.1.1"
                  env:
                    - name: DB_HOST
                      value: postgresql  # host.docker.internal for local postgres, here we are using postgresql service name
                    - name: DB_USER
                      value: web_app
                    - name: DB_PASSWORD
                      valueFrom: 
                        secretKeyRef:
                          name: db-password-secret
                          key: DB_PASSWORD
                    - name: DB_NAME
                      value: cve
                    - name: DB_PORT
                      value: "5432"    
                    - name: DB_SCHEMA
                      value: cve
                # serviceAccount:
                #   # Specifies whether a service account should be created
                #   create: true
                #   # Automatically mount a ServiceAccount's API credentials?
                #   automount: true
                #   # Annotations to add to the service account
                #   annotations: {}
                #   # The name of the service account to use.
                #   # If not set and create is true, a name is generated using the fullname template
                #   name: ""
                
                # podAnnotations: {}
                # podLabels: {}
                
                # podSecurityContext: {}
                #   # fsGroup: 2000
                
                # securityContext: {}
                #   # capabilities:
                #   #   drop:
                #   #   - ALL
                #   # readOnlyRootFilesystem: true
                #   # runAsNonRoot: true
                #   # runAsUser: 1000
                
                # service:
                #   type: ClusterIP
                #   port: 80
                
                # ingress:
                #   enabled: false
                #   className: ""
                #   annotations: {}
                #     # kubernetes.io/ingress.class: nginx
                #     # kubernetes.io/tls-acme: "true"
                #   hosts:
                #     - host: chart-example.local
                #       paths:
                #         - path: /
                #           pathType: ImplementationSpecific
                #   tls: []
                #   #  - secretName: chart-example-tls
                #   #    hosts:
                #   #      - chart-example.local
                
                # resources: {}
                #   # We usually recommend not to specify default resources and to leave this as a conscious
                #   # choice for the user. This also increases chances charts run on environments with little
                #   # resources, such as Minikube. If you do want to specify resources, uncomment the following
                #   # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
                #   # limits:
                #   #   cpu: 100m
                #   #   memory: 128Mi
                #   # requests:
                #   #   cpu: 100m
                #   #   memory: 128Mi
                
                # autoscaling:
                #   enabled: false
                #   minReplicas: 1
                #   maxReplicas: 100
                #   targetCPUUtilizationPercentage: 80
                #   # targetMemoryUtilizationPercentage: 80
                
                # # Additional volumes on the output Deployment definition.
                # volumes: []
                # # - name: foo
                # #   secret:
                # #     secretName: mysecret
                # #     optional: false
                
                # # Additional volumeMounts on the output Deployment definition.
                # volumeMounts: []
                # # - name: foo
                # #   mountPath: "/etc/foo"
                # #   readOnly: true
                
                # nodeSelector: {}
                
                # tolerations: []
                
                # affinity: {}
            EOT,
        ]
      [32m+[0m[0m verify                     = false
      [32m+[0m[0m version                    = "1.7.0"
      [32m+[0m[0m wait                       = false
      [32m+[0m[0m wait_for_jobs              = false
    }

[1m  # helm_release.kafka_chart[0m will be created
[0m  [32m+[0m[0m resource "helm_release" "kafka_chart" {
      [32m+[0m[0m atomic                     = false
      [32m+[0m[0m chart                      = "./charts/kafka"
      [32m+[0m[0m cleanup_on_fail            = false
      [32m+[0m[0m create_namespace           = false
      [32m+[0m[0m dependency_update          = false
      [32m+[0m[0m disable_crd_hooks          = false
      [32m+[0m[0m disable_openapi_validation = false
      [32m+[0m[0m disable_webhooks           = false
      [32m+[0m[0m force_update               = false
      [32m+[0m[0m id                         = (known after apply)
      [32m+[0m[0m lint                       = false
      [32m+[0m[0m manifest                   = (known after apply)
      [32m+[0m[0m max_history                = 0
      [32m+[0m[0m metadata                   = (known after apply)
      [32m+[0m[0m name                       = "kafka"
      [32m+[0m[0m namespace                  = "kafka"
      [32m+[0m[0m pass_credentials           = false
      [32m+[0m[0m recreate_pods              = false
      [32m+[0m[0m render_subchart_notes      = true
      [32m+[0m[0m replace                    = false
      [32m+[0m[0m reset_values               = false
      [32m+[0m[0m reuse_values               = false
      [32m+[0m[0m skip_crds                  = false
      [32m+[0m[0m status                     = "deployed"
      [32m+[0m[0m timeout                    = 300
      [32m+[0m[0m values                     = [
          [32m+[0m[0m <<-EOT
                # Copyright Broadcom, Inc. All Rights Reserved.
                # SPDX-License-Identifier: APACHE-2.0
                
                ## @section Global parameters
                ## Global Docker image parameters
                ## Please, note that this will override the image parameters, including dependencies, configured to use the global value
                ## Current available global Docker image parameters: imageRegistry, imagePullSecrets and storageClass
                ##
                
                ## @param global.imageRegistry Global Docker image registry
                ## @param global.imagePullSecrets Global Docker registry secret names as an array
                ## @param global.storageClass Global StorageClass for Persistent Volume(s)
                ##
                global:
                  imageRegistry: ""
                  ## E.g.
                  ## imagePullSecrets:
                  ##   - myRegistryKeySecretName
                  ##
                  imagePullSecrets: []
                  storageClass: ""
                  ## Compatibility adaptations for Kubernetes platforms
                  ##
                  compatibility:
                    ## Compatibility adaptations for Openshift
                    ##
                    openshift:
                      ## @param global.compatibility.openshift.adaptSecurityContext Adapt the securityContext sections of the deployment to make them compatible with Openshift restricted-v2 SCC: remove runAsUser, runAsGroup and fsGroup and let the platform use their allowed default IDs. Possible values: auto (apply if the detected running cluster is Openshift), force (perform the adaptation always), disabled (do not perform adaptation)
                      ##
                      adaptSecurityContext: auto
                ## @section Common parameters
                ##
                
                ## @param kubeVersion Override Kubernetes version
                ##
                kubeVersion: ""
                ## @param nameOverride String to partially override common.names.fullname
                ##
                nameOverride: ""
                ## @param fullnameOverride String to fully override common.names.fullname
                ##
                fullnameOverride: ""
                ## @param clusterDomain Default Kubernetes cluster domain
                ##
                clusterDomain: cluster.local
                ## @param commonLabels Labels to add to all deployed objects
                ##
                commonLabels: {}
                ## @param commonAnnotations Annotations to add to all deployed objects
                ##
                commonAnnotations: {}
                ## @param extraDeploy Array of extra objects to deploy with the release
                ##
                extraDeploy: []
                ## @param serviceBindings.enabled Create secret for service binding (Experimental)
                ## Ref: https://servicebinding.io/service-provider/
                ##
                serviceBindings:
                  enabled: false
                ## Enable diagnostic mode in the statefulset
                ##
                diagnosticMode:
                  ## @param diagnosticMode.enabled Enable diagnostic mode (all probes will be disabled and the command will be overridden)
                  ##
                  enabled: false
                  ## @param diagnosticMode.command Command to override all containers in the statefulset
                  ##
                  command:
                    - sleep
                  ## @param diagnosticMode.args Args to override all containers in the statefulset
                  ##
                  args:
                    - infinity
                ## @section Kafka parameters
                ##
                
                ## Bitnami Kafka image version
                ## ref: https://hub.docker.com/r/bitnami/kafka/tags/
                ## @param image.registry [default: REGISTRY_NAME] Kafka image registry
                ## @param image.repository [default: REPOSITORY_NAME/kafka] Kafka image repository
                ## @skip image.tag Kafka image tag (immutable tags are recommended)
                ## @param image.digest Kafka image digest in the way sha256:aa.... Please note this parameter, if set, will override the tag
                ## @param image.pullPolicy Kafka image pull policy
                ## @param image.pullSecrets Specify docker-registry secret names as an array
                ## @param image.debug Specify if debug values should be set
                ##
                image:
                  registry: docker.io
                  repository: bitnami/kafka
                  tag: 3.7.0-debian-12-r7
                  digest: ""
                  ## Specify a imagePullPolicy
                  ## Defaults to 'Always' if image tag is 'latest', else set to 'IfNotPresent'
                  ## ref: https://kubernetes.io/docs/concepts/containers/images/#pre-pulled-images
                  ##
                  pullPolicy: IfNotPresent
                  ## Optionally specify an array of imagePullSecrets.
                  ## Secrets must be manually created in the namespace.
                  ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
                  ## e.g:
                  ## pullSecrets:
                  ##   - myRegistryKeySecretName
                  ##
                  pullSecrets: []
                  ## Set to true if you would like to see extra information on logs
                  ##
                  debug: false
                ## @param extraInit Additional content for the kafka init script, rendered as a template.
                ##
                extraInit: ""
                ## @param config Configuration file for Kafka, rendered as a template. Auto-generated based on chart values when not specified.
                ## @param existingConfigmap ConfigMap with Kafka Configuration
                ## NOTE: This will override the configuration based on values, please act carefully
                ## If both are set, the existingConfigMap will be used.
                ##
                config: ""
                existingConfigmap: ""
                ## @param extraConfig Additional configuration to be appended at the end of the generated Kafka configuration file.
                ##
                extraConfig: ""
                ## @param extraConfigYaml Additional configuration in yaml format to be appended at the end of the generated Kafka configuration file.
                ##
                ## E.g.
                ## extraConfigYaml:
                ##   default.replication.factor: 3
                ##
                extraConfigYaml: {}
                ## @param secretConfig Additional configuration to be appended at the end of the generated Kafka configuration file.
                ## This value will be stored in a secret.
                ##
                secretConfig: ""
                ## @param existingSecretConfig Secret with additonal configuration that will be appended to the end of the generated Kafka configuration file
                ## The key for the configuration should be: server-secret.properties
                ## NOTE: This will override secretConfig value
                ##
                existingSecretConfig: ""
                ## @param log4j An optional log4j.properties file to overwrite the default of the Kafka brokers
                ## An optional log4j.properties file to overwrite the default of the Kafka brokers
                ## ref: https://github.com/apache/kafka/blob/trunk/config/log4j.properties
                ##
                log4j: ""
                ## @param existingLog4jConfigMap The name of an existing ConfigMap containing a log4j.properties file
                ## The name of an existing ConfigMap containing a log4j.properties file
                ## NOTE: this will override `log4j`
                ##
                existingLog4jConfigMap: ""
                ## @param heapOpts Kafka Java Heap size
                ##
                heapOpts: -Xmx1024m -Xms1024m
                ## @param brokerRackAssignment Set Broker Assignment for multi tenant environment Allowed values: `aws-az`
                ## ref: https://cwiki.apache.org/confluence/display/KAFKA/KIP-392%3A+Allow+consumers+to+fetch+from+closest+replica
                ##
                brokerRackAssignment: ""
                ## @param interBrokerProtocolVersion Override the setting 'inter.broker.protocol.version' during the ZK migration.
                ## Ref. https://docs.confluent.io/platform/current/installation/migrate-zk-kraft.html
                ##
                interBrokerProtocolVersion: ""
                ## Kafka listeners configuration
                ##
                listeners:
                  ## @param listeners.client.name Name for the Kafka client listener
                  ## @param listeners.client.containerPort Port for the Kafka client listener
                  ## @param listeners.client.protocol Security protocol for the Kafka client listener. Allowed values are 'PLAINTEXT', 'SASL_PLAINTEXT', 'SASL_SSL' and 'SSL'
                  ## @param listeners.client.sslClientAuth Optional. If SASL_SSL is enabled, configure mTLS TLS authentication type. If SSL protocol is enabled, overrides tls.authType for this listener. Allowed values are 'none', 'requested' and 'required'
                  client:
                    containerPort: 9092
                    protocol: SASL_PLAINTEXT
                    name: CLIENT
                    sslClientAuth: ""
                  ## @param listeners.controller.name Name for the Kafka controller listener
                  ## @param listeners.controller.containerPort Port for the Kafka controller listener
                  ## @param listeners.controller.protocol Security protocol for the Kafka controller listener. Allowed values are 'PLAINTEXT', 'SASL_PLAINTEXT', 'SASL_SSL' and 'SSL'
                  ## @param listeners.controller.sslClientAuth Optional. If SASL_SSL is enabled, configure mTLS TLS authentication type. If SSL protocol is enabled, overrides tls.authType for this listener. Allowed values are 'none', 'requested' and 'required'
                  ## Ref: https://cwiki.apache.org/confluence/display/KAFKA/KIP-684+-+Support+mutual+TLS+authentication+on+SASL_SSL+listeners
                  controller:
                    name: CONTROLLER
                    containerPort: 9093
                    protocol: SASL_PLAINTEXT
                    sslClientAuth: ""
                  ## @param listeners.interbroker.name Name for the Kafka inter-broker listener
                  ## @param listeners.interbroker.containerPort Port for the Kafka inter-broker listener
                  ## @param listeners.interbroker.protocol Security protocol for the Kafka inter-broker listener. Allowed values are 'PLAINTEXT', 'SASL_PLAINTEXT', 'SASL_SSL' and 'SSL'
                  ## @param listeners.interbroker.sslClientAuth Optional. If SASL_SSL is enabled, configure mTLS TLS authentication type. If SSL protocol is enabled, overrides tls.authType for this listener. Allowed values are 'none', 'requested' and 'required'
                  interbroker:
                    containerPort: 9094
                    protocol: SASL_PLAINTEXT
                    name: INTERNAL
                    sslClientAuth: ""
                  ## @param listeners.external.containerPort Port for the Kafka external listener
                  ## @param listeners.external.protocol Security protocol for the Kafka external listener. . Allowed values are 'PLAINTEXT', 'SASL_PLAINTEXT', 'SASL_SSL' and 'SSL'
                  ## @param listeners.external.name Name for the Kafka external listener
                  ## @param listeners.external.sslClientAuth Optional. If SASL_SSL is enabled, configure mTLS TLS authentication type. If SSL protocol is enabled, overrides tls.sslClientAuth for this listener. Allowed values are 'none', 'requested' and 'required'
                  external:
                    containerPort: 9095
                    protocol: SASL_PLAINTEXT
                    name: EXTERNAL
                    sslClientAuth: ""
                  ## @param listeners.extraListeners Array of listener objects to be appended to already existing listeners
                  ## E.g.
                  ## extraListeners:
                  ##  - name: CUSTOM
                  ##    containerPort: 9097
                  ##    protocol: SASL_PLAINTEXT
                  ##    sslClientAuth: ""
                  ##
                  extraListeners: []
                  ## NOTE: If set, below values will override configuration set using the above values (extraListeners.*, controller.*, interbroker.*, client.* and external.*)
                  ## @param listeners.overrideListeners Overrides the Kafka 'listeners' configuration setting.
                  ## @param listeners.advertisedListeners Overrides the Kafka 'advertised.listener' configuration setting.
                  ## @param listeners.securityProtocolMap Overrides the Kafka 'security.protocol.map' configuration setting.
                  overrideListeners: ""
                  advertisedListeners: ""
                  securityProtocolMap: ""
                ## @section Kafka SASL parameters
                ## Kafka SASL settings for authentication, required if SASL_PLAINTEXT or SASL_SSL listeners are configured
                ##
                sasl:
                  ## @param sasl.enabledMechanisms Comma-separated list of allowed SASL mechanisms when SASL listeners are configured. Allowed types: `PLAIN`, `SCRAM-SHA-256`, `SCRAM-SHA-512`, `OAUTHBEARER`
                  ## NOTE: At the moment, Kafka Raft mode does not support SCRAM, that is why only PLAIN is configured.
                  ##
                  enabledMechanisms: PLAIN,SCRAM-SHA-256,SCRAM-SHA-512
                  ## @param sasl.interBrokerMechanism SASL mechanism for inter broker communication.
                  ##
                  interBrokerMechanism: PLAIN
                  ## @param sasl.controllerMechanism SASL mechanism for controller communications.
                  ##
                  controllerMechanism: PLAIN
                  ## Settings for oauthbearer mechanism
                  ## @param sasl.oauthbearer.tokenEndpointUrl The URL for the OAuth/OIDC identity provider
                  ## @param sasl.oauthbearer.jwksEndpointUrl The OAuth/OIDC provider URL from which the provider's JWKS (JSON Web Key Set) can be retrieved
                  ## @param sasl.oauthbearer.expectedAudience The comma-delimited setting for the broker to use to verify that the JWT was issued for one of the expected audiences
                  ## @param sasl.oauthbearer.subClaimName The OAuth claim name for the subject.
                  ##
                  oauthbearer:
                    tokenEndpointUrl: ""
                    jwksEndpointUrl: ""
                    expectedAudience: ""
                    subClaimName: "sub"
                  ## Credentials for inter-broker communications.
                  ## @param sasl.interbroker.user Username for inter-broker communications when SASL is enabled
                  ## @param sasl.interbroker.password Password for inter-broker communications when SASL is enabled. If not set and SASL is enabled for the controller listener, a random password will be generated.
                  ## @param sasl.interbroker.clientId Client ID for inter-broker communications when SASL is enabled with mechanism OAUTHBEARER
                  ## @param sasl.interbroker.clientSecret Client Secret for inter-broker communications when SASL is enabled with mechanism OAUTHBEARER. If not set and SASL is enabled for the controller listener, a random secret will be generated.
                  ##
                  interbroker:
                    user: inter_broker_user
                    password: ""
                    clientId: inter_broker_client
                    clientSecret: ""
                  ## Credentials for controller communications.
                  ## @param sasl.controller.user Username for controller communications when SASL is enabled
                  ## @param sasl.controller.password Password for controller communications when SASL is enabled. If not set and SASL is enabled for the inter-broker listener, a random password will be generated.
                  ## @param sasl.controller.clientId Client ID for controller communications when SASL is enabled with mechanism OAUTHBEARER
                  ## @param sasl.controller.clientSecret Client Secret for controller communications when SASL is enabled with mechanism OAUTHBEARER. If not set and SASL is enabled for the inter-broker listener, a random secret will be generated.
                  ##
                  controller:
                    user: controller_user
                    password: ""
                    clientId: controller_broker_client
                    clientSecret: ""
                  ## Credentials for client communications.
                  ## @param sasl.client.users Comma-separated list of usernames for client communications when SASL is enabled
                  ## @param sasl.client.passwords Comma-separated list of passwords for client communications when SASL is enabled, must match the number of client.users
                  ##
                  client:
                    users:
                      - user1
                    passwords: "lSeoHL5U6M"
                  ## Credentials for Zookeeper communications.
                  ## @param sasl.zookeeper.user Username for zookeeper communications when SASL is enabled.
                  ## @param sasl.zookeeper.password Password for zookeeper communications when SASL is enabled.
                  ##
                  zookeeper:
                    user: ""
                    password: ""
                  ## @param sasl.existingSecret Name of the existing secret containing credentials for clientUsers, interBrokerUser, controllerUser and zookeeperUser
                  ## Create this secret running the command below where SECRET_NAME is the name of the secret you want to create:
                  ##       kubectl create secret generic SECRET_NAME --from-literal=client-passwords=CLIENT_PASSWORD1,CLIENT_PASSWORD2 --from-literal=inter-broker-password=INTER_BROKER_PASSWORD --from-literal=inter-broker-client-secret=INTER_BROKER_CLIENT_SECRET --from-literal=controller-password=CONTROLLER_PASSWORD --from-literal=controller-client-secret=CONTROLLER_CLIENT_SECRET --from-literal=zookeeper-password=ZOOKEEPER_PASSWORD
                  ## The client secrets are only required when using oauthbearer as sasl mechanism.
                  ## Client, interbroker and controller passwords are only required if the sasl mechanism includes something other than oauthbearer.
                  ##
                  existingSecret: ""
                ## @section Kafka TLS parameters
                ## Kafka TLS settings, required if SSL or SASL_SSL listeners are configured
                ##
                tls:
                  ## @param tls.type Format to use for TLS certificates. Allowed types: `JKS` and `PEM`
                  ##
                  type: JKS
                  ## @param tls.pemChainIncluded Flag to denote that the Certificate Authority (CA) certificates are bundled with the endpoint cert.
                  ## Certificates must be in proper order, where the top certificate is the leaf and the bottom certificate is the top-most intermediate CA.
                  ##
                  pemChainIncluded: false
                  ## @param tls.existingSecret Name of the existing secret containing the TLS certificates for the Kafka nodes.
                  ## When using 'jks' format for certificates, each secret should contain a truststore and a keystore.
                  ## Create these secrets following the steps below:
                  ## 1) Generate your truststore and keystore files. Helpful script: https://raw.githubusercontent.com/confluentinc/confluent-platform-security-tools/master/kafka-generate-ssl.sh
                  ## 2) Rename your truststore to `kafka.truststore.jks`.
                  ## 3) Rename your keystores to `kafka-<role>-X.keystore.jks` where X is the replica number of the .
                  ## 4) Run the command below one time per broker to create its associated secret (SECRET_NAME_X is the name of the secret you want to create):
                  ##      kubectl create secret generic SECRET_NAME_0 --from-file=kafka.truststore.jks=./kafka.truststore.jks \
                  ##        --from-file=kafka-controller-0.keystore.jks=./kafka-controller-0.keystore.jks --from-file=kafka-broker-0.keystore.jks=./kafka-broker-0.keystore.jks ...
                  ##
                  ## NOTE: Alternatively, a single keystore can be provided for all nodes under the key 'kafka.keystore.jks', this keystore will be used by all nodes unless overridden by the 'kafka-<role>-X.keystore.jks' file
                  ##
                  ## When using 'pem' format for certificates, each secret should contain a public CA certificate, a public certificate and one private key.
                  ## Create these secrets following the steps below:
                  ## 1) Create a certificate key and signing request per Kafka broker, and sign the signing request with your CA
                  ## 2) Rename your CA file to `kafka.ca.crt`.
                  ## 3) Rename your certificates to `kafka-X.tls.crt` where X is the ID of each Kafka broker.
                  ## 3) Rename your keys to `kafka-X.tls.key` where X is the ID of each Kafka broker.
                  ## 4) Run the command below one time per broker to create its associated secret (SECRET_NAME_X is the name of the secret you want to create):
                  ##      kubectl create secret generic SECRET_NAME_0 --from-file=kafka-ca.crt=./kafka-ca.crt --from-file=kafka-controller-0.crt=./kafka-controller-0.crt --from-file=kafka-controller-0.key=./kafka-controller-0.key \
                  ##        --from-file=kafka-broker-0.crt=./kafka-broker-0.crt --from-file=kafka-broker-0.key=./kafka-broker-0.key ...
                  ##
                  ## NOTE: Alternatively, a single key and certificate can be provided for all nodes under the keys 'kafka.crt' and 'kafka.key'. These certificates will be used by all nodes unless overridden by the 'kafka-<role>-X.key' and 'kafka-<role>-X.crt' files
                  ## NOTE: Alternatively, a single key and certificate can be provided for all nodes under the keys 'tls.crt' and 'tls.key'. These certificates will be used by all nodes unless overridden by the 'kafka-<role>-X.key' and 'kafka-<role>-X.crt' files
                  ##
                  existingSecret: ""
                  ## @param tls.autoGenerated Generate automatically self-signed TLS certificates for Kafka brokers. Currently only supported if `tls.type` is `PEM`
                  ## Note: ignored when using 'jks' format or `tls.existingSecret` is not empty
                  ##
                  autoGenerated: false
                  ## @param tls.customAltNames Optionally specify extra list of additional subject alternative names (SANs) for the automatically generated TLS certificates.
                  ##
                  customAltNames: []
                  ## @param tls.passwordsSecret Name of the secret containing the password to access the JKS files or PEM key when they are password-protected. (`key`: `password`)
                  ##
                  passwordsSecret: ""
                  ## @param tls.passwordsSecretKeystoreKey The secret key from the tls.passwordsSecret containing the password for the Keystore.
                  ##
                  passwordsSecretKeystoreKey: keystore-password
                  ## @param tls.passwordsSecretTruststoreKey The secret key from the tls.passwordsSecret containing the password for the Truststore.
                  ##
                  passwordsSecretTruststoreKey: truststore-password
                  ## @param tls.passwordsSecretPemPasswordKey The secret key from the tls.passwordsSecret containing the password for the PEM key inside 'tls.passwordsSecret'.
                  ##
                  passwordsSecretPemPasswordKey: ""
                  ## @param tls.keystorePassword Password to access the JKS keystore when it is password-protected. Ignored when 'tls.passwordsSecret' is provided.
                  ## When using tls.type=PEM, the generated keystore will use this password or randomly generate one.
                  ##
                  keystorePassword: ""
                  ## @param tls.truststorePassword Password to access the JKS truststore when it is password-protected. Ignored when 'tls.passwordsSecret' is provided.
                  ## When using tls.type=PEM, the generated keystore will use this password or randomly generate one.
                  ##
                  truststorePassword: ""
                  ## @param tls.keyPassword Password to access the PEM key when it is password-protected.
                  ## Note: ignored when using 'tls.passwordsSecret'
                  ##
                  keyPassword: ""
                  ## @param tls.jksKeystoreKey The secret key from the `tls.existingSecret` containing the keystore
                  ## Note: ignored when using 'pem' format for certificates.
                  ##
                  jksKeystoreKey: ""
                  ## @param tls.jksTruststoreSecret Name of the existing secret containing your truststore if truststore not existing or different from the one in the `tls.existingSecret`
                  ## Note: ignored when using 'pem' format for certificates.
                  ##
                  jksTruststoreSecret: ""
                  ## @param tls.jksTruststoreKey The secret key from the `tls.existingSecret` or `tls.jksTruststoreSecret` containing the truststore
                  ## Note: ignored when using 'pem' format for certificates.
                  ##
                  jksTruststoreKey: ""
                  ## @param tls.endpointIdentificationAlgorithm The endpoint identification algorithm to validate server hostname using server certificate
                  ## Disable server host name verification by setting it to an empty string.
                  ## ref: https://docs.confluent.io/current/kafka/authentication_ssl.html#optional-settings
                  ##
                  endpointIdentificationAlgorithm: https
                  ## @param tls.sslClientAuth Sets the default value for the ssl.client.auth Kafka setting.
                  ## ref: https://docs.confluent.io/current/kafka/authentication_ssl.html#optional-settings
                  ##
                  sslClientAuth: "required"
                  ## Zookeeper TLS connection configuration for Kafka
                  ##
                  zookeeper:
                    ## @param tls.zookeeper.enabled Enable TLS for Zookeeper client connections.
                    ##
                    enabled: false
                    ## @param tls.zookeeper.verifyHostname Hostname validation.
                    ##
                    verifyHostname: true
                    ## @param tls.zookeeper.existingSecret Name of the existing secret containing the TLS certificates for ZooKeeper client communications.
                    ##
                    existingSecret: ""
                    ## @param tls.zookeeper.existingSecretKeystoreKey The secret key from the  tls.zookeeper.existingSecret containing the Keystore.
                    ##
                    existingSecretKeystoreKey: zookeeper.keystore.jks
                    ## @param tls.zookeeper.existingSecretTruststoreKey The secret key from the tls.zookeeper.existingSecret containing the Truststore.
                    ##
                    existingSecretTruststoreKey: zookeeper.truststore.jks
                    ## @param tls.zookeeper.passwordsSecret Existing secret containing Keystore and Truststore passwords.
                    ##
                    passwordsSecret: ""
                    ## @param tls.zookeeper.passwordsSecretKeystoreKey The secret key from the tls.zookeeper.passwordsSecret containing the password for the Keystore.
                    ## If no keystore password is included in the passwords secret, set this value to an empty string.
                    ##
                    passwordsSecretKeystoreKey: keystore-password
                    ## @param tls.zookeeper.passwordsSecretTruststoreKey The secret key from the tls.zookeeper.passwordsSecret containing the password for the Truststore.
                    ## If no truststore password is included in the passwords secret, set this value to an empty string.
                    ##
                    passwordsSecretTruststoreKey: truststore-password
                    ## @param tls.zookeeper.keystorePassword Password to access the JKS keystore when it is password-protected. Ignored when 'tls.passwordsSecret' is provided.
                    ## When using tls.type=PEM, the generated keystore will use this password or randomly generate one.
                    ##
                    keystorePassword: ""
                    ## @param tls.zookeeper.truststorePassword Password to access the JKS truststore when it is password-protected. Ignored when 'tls.passwordsSecret' is provided.
                    ## When using tls.type=PEM, the generated keystore will use this password or randomly generate one.
                    ##
                    truststorePassword: ""
                ## @param extraEnvVars Extra environment variables to add to Kafka pods
                ## ref: https://github.com/bitnami/containers/tree/main/bitnami/kafka#configuration
                ## e.g:
                ## extraEnvVars:
                ##   - name: KAFKA_CFG_BACKGROUND_THREADS
                ##     value: "10"
                ##
                extraEnvVars: []
                ## @param extraEnvVarsCM ConfigMap with extra environment variables
                ##
                extraEnvVarsCM: ""
                ## @param extraEnvVarsSecret Secret with extra environment variables
                ##
                extraEnvVarsSecret: ""
                ## @param extraVolumes Optionally specify extra list of additional volumes for the Kafka pod(s)
                ## e.g:
                ## extraVolumes:
                ##   - name: kafka-jaas
                ##     secret:
                ##       secretName: kafka-jaas
                ##
                extraVolumes: []
                ## @param extraVolumeMounts Optionally specify extra list of additional volumeMounts for the Kafka container(s)
                ## extraVolumeMounts:
                ##   - name: kafka-jaas
                ##     mountPath: /bitnami/kafka/config/kafka_jaas.conf
                ##     subPath: kafka_jaas.conf
                ##
                extraVolumeMounts: []
                ## @param sidecars Add additional sidecar containers to the Kafka pod(s)
                ## e.g:
                ## sidecars:
                ##   - name: your-image-name
                ##     image: your-image
                ##     imagePullPolicy: Always
                ##     ports:
                ##       - name: portname
                ##         containerPort: 1234
                ##
                sidecars: []
                ## @param initContainers Add additional Add init containers to the Kafka pod(s)
                ## e.g:
                ## initContainers:
                ##   - name: your-image-name
                ##     image: your-image
                ##     imagePullPolicy: Always
                ##     ports:
                ##       - name: portname
                ##         containerPort: 1234
                ##
                initContainers: []
                ## DNS-Pod services
                ## Ref: https://kubernetes.io/docs/concepts/services-networking/dns-pod-service/
                ## @param dnsPolicy Specifies the DNS policy for the zookeeper pods
                ## DNS policies can be set on a per-Pod basis. Currently Kubernetes supports the following Pod-specific DNS policies.
                ## Available options: Default, ClusterFirst, ClusterFirstWithHostNet, None
                ## Ref: https://kubernetes.io/docs/concepts/services-networking/dns-pod-service/#pod-s-dns-policy
                dnsPolicy: ""
                ## @param dnsConfig  allows users more control on the DNS settings for a Pod. Required if `dnsPolicy` is set to `None`
                ## The dnsConfig field is optional and it can work with any dnsPolicy settings.
                ## Ref: https://kubernetes.io/docs/concepts/services-networking/dns-pod-service/#pod-dns-config
                ## E.g.
                ## dnsConfig:
                ##   nameservers:
                ##     - 192.0.2.1 # this is an example
                ##   searches:
                ##     - ns1.svc.cluster-domain.example
                ##     - my.dns.search.suffix
                ##   options:
                ##     - name: ndots
                ##       value: "2"
                ##     - name: edns0
                dnsConfig: {}
                ## @section Controller-eligible statefulset parameters
                ##
                controller:
                  ## @param controller.replicaCount Number of Kafka controller-eligible nodes
                  ## Ignore this section if running in Zookeeper mode.
                  ##
                  replicaCount: 3
                  ## @param controller.controllerOnly If set to true, controller nodes will be deployed as dedicated controllers, instead of controller+broker processes.
                  ##
                  controllerOnly: false
                  ## @param controller.minId Minimal node.id values for controller-eligible nodes. Do not change after first initialization.
                  ## Broker-only id increment their ID starting at this minimal value.
                  ## We recommend setting this this value high enough, as IDs under this value will be used by controller-elegible nodes
                  ##
                  minId: 0
                  ## @param controller.zookeeperMigrationMode Set to true to deploy cluster controller quorum
                  ## This allows configuring both kraft and zookeeper modes simultaneously in order to perform the migration of the Kafka metadata.
                  ## Ref. https://docs.confluent.io/platform/current/installation/migrate-zk-kraft.html
                  ##
                  zookeeperMigrationMode: false
                  ## @param controller.config Configuration file for Kafka controller-eligible nodes, rendered as a template. Auto-generated based on chart values when not specified.
                  ## @param controller.existingConfigmap ConfigMap with Kafka Configuration for controller-eligible nodes.
                  ## NOTE: This will override the configuration based on values, please act carefully
                  ## If both are set, the existingConfigMap will be used.
                  ##
                  config: ""
                  existingConfigmap: ""
                  ## @param controller.extraConfig Additional configuration to be appended at the end of the generated Kafka controller-eligible nodes configuration file.
                  ##
                  extraConfig: ""
                  ## @param controller.extraConfigYaml Additional configuration in yaml format to be appended at the end of the generated Kafka controller-eligible nodes configuration file.
                  ## If keys of extraConfigYaml are duplicated here, the value from controller.extraConfigYaml is taken.
                  ##
                  extraConfigYaml: {}
                  ## @param controller.secretConfig Additional configuration to be appended at the end of the generated Kafka controller-eligible nodes configuration file.
                  ## This value will be stored in a secret.
                  ##
                  secretConfig: ""
                  ## @param controller.existingSecretConfig Secret with additonal configuration that will be appended to the end of the generated Kafka controller-eligible nodes configuration file
                  ## The key for the configuration should be: server-secret.properties
                  ## NOTE: This will override controller.secretConfig value
                  ##
                  existingSecretConfig: ""
                  ## @param controller.heapOpts Kafka Java Heap size for controller-eligible nodes
                  ##
                  heapOpts: -Xmx1024m -Xms1024m
                  ## @param controller.command Override Kafka container command
                  ##
                  command: []
                  ## @param controller.args Override Kafka container arguments
                  ##
                  args: []
                  ## @param controller.extraEnvVars Extra environment variables to add to Kafka pods
                  ## ref: https://github.com/bitnami/containers/tree/main/bitnami/kafka#configuration
                  ## e.g:
                  ## extraEnvVars:
                  ##   - name: KAFKA_CFG_BACKGROUND_THREADS
                  ##     value: "10"
                  ##
                  extraEnvVars: []
                  ## @param controller.extraEnvVarsCM ConfigMap with extra environment variables
                  ##
                  extraEnvVarsCM: ""
                  ## @param controller.extraEnvVarsSecret Secret with extra environment variables
                  ##
                  extraEnvVarsSecret: ""
                  ## @param controller.extraContainerPorts Kafka controller-eligible extra containerPorts.
                  ##
                  extraContainerPorts: []
                  ## Configure extra options for Kafka containers' liveness, readiness and startup probes
                  ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/#configure-probes
                  ## @param controller.livenessProbe.enabled Enable livenessProbe on Kafka containers
                  ## @param controller.livenessProbe.initialDelaySeconds Initial delay seconds for livenessProbe
                  ## @param controller.livenessProbe.periodSeconds Period seconds for livenessProbe
                  ## @param controller.livenessProbe.timeoutSeconds Timeout seconds for livenessProbe
                  ## @param controller.livenessProbe.failureThreshold Failure threshold for livenessProbe
                  ## @param controller.livenessProbe.successThreshold Success threshold for livenessProbe
                  ##
                  livenessProbe:
                    enabled: true
                    initialDelaySeconds: 10
                    timeoutSeconds: 5
                    failureThreshold: 3
                    periodSeconds: 10
                    successThreshold: 1
                  ## @param controller.readinessProbe.enabled Enable readinessProbe on Kafka containers
                  ## @param controller.readinessProbe.initialDelaySeconds Initial delay seconds for readinessProbe
                  ## @param controller.readinessProbe.periodSeconds Period seconds for readinessProbe
                  ## @param controller.readinessProbe.timeoutSeconds Timeout seconds for readinessProbe
                  ## @param controller.readinessProbe.failureThreshold Failure threshold for readinessProbe
                  ## @param controller.readinessProbe.successThreshold Success threshold for readinessProbe
                  ##
                  readinessProbe:
                    enabled: true
                    initialDelaySeconds: 5
                    failureThreshold: 6
                    timeoutSeconds: 5
                    periodSeconds: 10
                    successThreshold: 1
                  ## @param controller.startupProbe.enabled Enable startupProbe on Kafka containers
                  ## @param controller.startupProbe.initialDelaySeconds Initial delay seconds for startupProbe
                  ## @param controller.startupProbe.periodSeconds Period seconds for startupProbe
                  ## @param controller.startupProbe.timeoutSeconds Timeout seconds for startupProbe
                  ## @param controller.startupProbe.failureThreshold Failure threshold for startupProbe
                  ## @param controller.startupProbe.successThreshold Success threshold for startupProbe
                  ##
                  startupProbe:
                    enabled: false
                    initialDelaySeconds: 30
                    periodSeconds: 10
                    timeoutSeconds: 1
                    failureThreshold: 15
                    successThreshold: 1
                  ## @param controller.customLivenessProbe Custom livenessProbe that overrides the default one
                  ##
                  customLivenessProbe: {}
                  ## @param controller.customReadinessProbe Custom readinessProbe that overrides the default one
                  ##
                  customReadinessProbe: {}
                  ## @param controller.customStartupProbe Custom startupProbe that overrides the default one
                  ##
                  customStartupProbe: {}
                  ## @param controller.lifecycleHooks lifecycleHooks for the Kafka container to automate configuration before or after startup
                  ##
                  lifecycleHooks: {}
                  ## Kafka init container resource requests and limits
                  ## ref: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
                  ## @param controller.initContainerResources.limits The resources limits for the init container
                  ## @param controller.initContainerResources.requests The requested resources for the init container
                  ##
                  initContainerResources:
                    limits: {}
                    requests: {}
                  ## Kafka resource requests and limits
                  ## ref: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
                  ## @param controller.resourcesPreset Set container resources according to one common preset (allowed values: none, nano, micro, small, medium, large, xlarge, 2xlarge). This is ignored if controller.resources is set (controller.resources is recommended for production).
                  ## More information: https://github.com/bitnami/charts/blob/main/bitnami/common/templates/_resources.tpl#L15
                  ##
                  resourcesPreset: "large"
                  ## @param controller.resources Set container requests and limits for different resources like CPU or memory (essential for production workloads)
                  ## Example:
                  ## resources:
                  ##   requests:
                  ##     cpu: 2
                  ##     memory: 512Mi
                  ##   limits:
                  ##     cpu: 3
                  ##     memory: 1024Mi
                  ##
                  resources: {}
                  ## Kafka pods' Security Context
                  ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-pod
                  ## @param controller.podSecurityContext.enabled Enable security context for the pods
                  ## @param controller.podSecurityContext.fsGroupChangePolicy Set filesystem group change policy
                  ## @param controller.podSecurityContext.sysctls Set kernel settings using the sysctl interface
                  ## @param controller.podSecurityContext.supplementalGroups Set filesystem extra groups
                  ## @param controller.podSecurityContext.fsGroup Set Kafka pod's Security Context fsGroup
                  ## @param controller.podSecurityContext.seccompProfile.type Set Kafka pods's Security Context seccomp profile
                  ##
                  podSecurityContext:
                    enabled: true
                    fsGroupChangePolicy: Always
                    sysctls: []
                    supplementalGroups: []
                    fsGroup: 1001
                    seccompProfile:
                      type: "RuntimeDefault"
                  ## Kafka containers' Security Context
                  ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-container
                  ## @param controller.containerSecurityContext.enabled Enable Kafka containers' Security Context
                  ## @param controller.containerSecurityContext.seLinuxOptions [object,nullable] Set SELinux options in container
                  ## @param controller.containerSecurityContext.runAsUser Set containers' Security Context runAsUser
                  ## @param controller.containerSecurityContext.runAsGroup Set containers' Security Context runAsGroup
                  ## @param controller.containerSecurityContext.runAsGroup Set Kafka containers' Security Context runAsGroup
                  ## @param controller.containerSecurityContext.runAsNonRoot Set Kafka containers' Security Context runAsNonRoot
                  ## @param controller.containerSecurityContext.allowPrivilegeEscalation Force the child process to be run as non-privileged
                  ## @param controller.containerSecurityContext.readOnlyRootFilesystem Allows the pod to mount the RootFS as ReadOnly only
                  ## @param controller.containerSecurityContext.capabilities.drop Set Kafka containers' server Security Context capabilities to be dropped
                  ## e.g:
                  ##   containerSecurityContext:
                  ##     enabled: true
                  ##     capabilities:
                  ##       drop: ["NET_RAW"]
                  ##     readOnlyRootFilesystem: true
                  ##
                  containerSecurityContext:
                    enabled: true
                    seLinuxOptions: {}
                    runAsUser: 1001
                    runAsGroup: 1001
                    runAsNonRoot: true
                    allowPrivilegeEscalation: false
                    readOnlyRootFilesystem: true
                    capabilities:
                      drop: ["ALL"]
                  ## @param controller.automountServiceAccountToken Mount Service Account token in pod
                  ##
                  automountServiceAccountToken: false
                  ## @param controller.hostAliases Kafka pods host aliases
                  ## https://kubernetes.io/docs/concepts/services-networking/add-entries-to-pod-etc-hosts-with-host-aliases/
                  ##
                  hostAliases: []
                  ## @param controller.hostNetwork Specify if host network should be enabled for Kafka pods
                  ##
                  hostNetwork: false
                  ## @param controller.hostIPC Specify if host IPC should be enabled for Kafka pods
                  ##
                  hostIPC: false
                  ## @param controller.podLabels Extra labels for Kafka pods
                  ## Ref: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
                  ##
                  podLabels: {}
                  ## @param controller.podAnnotations Extra annotations for Kafka pods
                  ## ref: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
                  ##
                  podAnnotations: {}
                  ## @param controller.podAffinityPreset Pod affinity preset. Ignored if `affinity` is set. Allowed values: `soft` or `hard`
                  ## ref: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#inter-pod-affinity-and-anti-affinity
                  ##
                  podAffinityPreset: ""
                  ## @param controller.podAntiAffinityPreset Pod anti-affinity preset. Ignored if `affinity` is set. Allowed values: `soft` or `hard`
                  ## Ref: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#inter-pod-affinity-and-anti-affinity
                  ##
                  podAntiAffinityPreset: soft
                  ## Node affinity preset
                  ## Ref: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#node-affinity
                  ##
                  nodeAffinityPreset:
                    ## @param controller.nodeAffinityPreset.type Node affinity preset type. Ignored if `affinity` is set. Allowed values: `soft` or `hard`
                    ##
                    type: ""
                    ## @param controller.nodeAffinityPreset.key Node label key to match Ignored if `affinity` is set.
                    ## E.g.
                    ## key: "kubernetes.io/e2e-az-name"
                    ##
                    key: ""
                    ## @param controller.nodeAffinityPreset.values Node label values to match. Ignored if `affinity` is set.
                    ## E.g.
                    ## values:
                    ##   - e2e-az1
                    ##   - e2e-az2
                    ##
                    values: []
                  ## @param controller.affinity Affinity for pod assignment
                  ## Ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#affinity-and-anti-affinity
                  ## Note: podAffinityPreset, podAntiAffinityPreset, and  nodeAffinityPreset will be ignored when it's set
                  ##
                  affinity: {}
                  ## @param controller.nodeSelector Node labels for pod assignment
                  ## Ref: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/
                  ##
                  nodeSelector: {}
                  ## @param controller.tolerations Tolerations for pod assignment
                  ## Ref: https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/
                  ##
                  tolerations: []
                  ## @param controller.topologySpreadConstraints Topology Spread Constraints for pod assignment spread across your cluster among failure-domains. Evaluated as a template
                  ## Ref: https://kubernetes.io/docs/concepts/workloads/pods/pod-topology-spread-constraints/#spread-constraints-for-pods
                  ##
                  topologySpreadConstraints: []
                  ## @param controller.terminationGracePeriodSeconds Seconds the pod needs to gracefully terminate
                  ## ref: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#hook-handler-execution
                  ##
                  terminationGracePeriodSeconds: ""
                  ## @param controller.podManagementPolicy StatefulSet controller supports relax its ordering guarantees while preserving its uniqueness and identity guarantees. There are two valid pod management policies: OrderedReady and Parallel
                  ## ref: https://kubernetes.io/docs/tutorials/stateful-application/basic-stateful-set/#pod-management-policy
                  ##
                  podManagementPolicy: Parallel
                  ## @param controller.minReadySeconds How many seconds a pod needs to be ready before killing the next, during update
                  ##
                  minReadySeconds: 0
                  ## @param controller.priorityClassName Name of the existing priority class to be used by kafka pods
                  ## Ref: https://kubernetes.io/docs/concepts/configuration/pod-priority-preemption/
                  ##
                  priorityClassName: ""
                  ## @param controller.runtimeClassName Name of the runtime class to be used by pod(s)
                  ## ref: https://kubernetes.io/docs/concepts/containers/runtime-class/
                  ##
                  runtimeClassName: ""
                  ## @param controller.enableServiceLinks Whether information about services should be injected into pod's environment variable
                  ## The environment variables injected by service links are not used, but can lead to slow kafka boot times or slow running of the scripts when there are many services in the current namespace.
                  ## If you experience slow pod startups or slow running of the scripts you probably want to set this to `false`.
                  ##
                  enableServiceLinks: true
                  ## @param controller.schedulerName Name of the k8s scheduler (other than default)
                  ## ref: https://kubernetes.io/docs/tasks/administer-cluster/configure-multiple-schedulers/
                  ##
                  schedulerName: ""
                  ## @param controller.updateStrategy.type Kafka statefulset strategy type
                  ## ref: https://kubernetes.io/docs/concepts/workloads/controllers/statefulset/#update-strategies
                  ##
                  updateStrategy:
                    type: RollingUpdate
                  ## @param controller.extraVolumes Optionally specify extra list of additional volumes for the Kafka pod(s)
                  ## e.g:
                  ## extraVolumes:
                  ##   - name: kafka-jaas
                  ##     secret:
                  ##       secretName: kafka-jaas
                  ##
                  extraVolumes: []
                  ## @param controller.extraVolumeMounts Optionally specify extra list of additional volumeMounts for the Kafka container(s)
                  ## extraVolumeMounts:
                  ##   - name: kafka-jaas
                  ##     mountPath: /bitnami/kafka/config/kafka_jaas.conf
                  ##     subPath: kafka_jaas.conf
                  ##
                  extraVolumeMounts: []
                  ## @param controller.sidecars Add additional sidecar containers to the Kafka pod(s)
                  ## e.g:
                  ## sidecars:
                  ##   - name: your-image-name
                  ##     image: your-image
                  ##     imagePullPolicy: Always
                  ##     ports:
                  ##       - name: portname
                  ##         containerPort: 1234
                  ##
                  sidecars: []
                  ## @param controller.initContainers Add additional Add init containers to the Kafka pod(s)
                  ## e.g:
                  ## initContainers:
                  ##   - name: your-image-name
                  ##     image: your-image
                  ##     imagePullPolicy: Always
                  ##     ports:
                  ##       - name: portname
                  ##         containerPort: 1234
                  ##
                  initContainers: []
                  ## @section Experimental: Kafka Controller Autoscaling configuration
                  ## ref: https://kubernetes.io/docs/tasks/run-application/horizontal-pod-autoscale/
                  ##
                  autoscaling:
                    vpa:
                      ## @param controller.autoscaling.vpa.enabled Enable VPA
                      ##
                      enabled: false
                      ## @param controller.autoscaling.vpa.annotations Annotations for VPA resource
                      ##
                      annotations: {}
                      ## @param controller.autoscaling.vpa.controlledResources VPA List of resources that the vertical pod autoscaler can control. Defaults to cpu and memory
                      ##
                      controlledResources: []
                      ## @param controller.autoscaling.vpa.maxAllowed VPA Max allowed resources for the pod
                      ## cpu: 200m
                      ## memory: 100Mi
                      maxAllowed: {}
                      ## @param controller.autoscaling.vpa.minAllowed VPA Min allowed resources for the pod
                      ## cpu: 200m
                      ## memory: 100Mi
                      minAllowed: {}
                      updatePolicy:
                        ## @param controller.autoscaling.vpa.updatePolicy.updateMode Autoscaling update policy Specifies whether recommended updates are applied when a Pod is started and whether recommended updates are applied during the life of a Pod
                        ## Possible values are "Off", "Initial", "Recreate", and "Auto".
                        ##
                        updateMode: Auto
                    hpa:
                      ## @param controller.autoscaling.hpa.enabled Enable HPA for Kafka Controller
                      ##
                      enabled: false
                      ## @param controller.autoscaling.hpa.minReplicas Minimum number of Kafka Controller replicas
                      ##
                      minReplicas: ""
                      ## @param controller.autoscaling.hpa.maxReplicas Maximum number of Kafka Controller replicas
                      ##
                      maxReplicas: ""
                      ## @param controller.autoscaling.hpa.targetCPU Target CPU utilization percentage
                      ##
                      targetCPU: ""
                      ## @param controller.autoscaling.hpa.targetMemory Target Memory utilization percentage
                      ##
                      targetMemory: ""
                  ## Kafka Pod Disruption Budget
                  ## ref: https://kubernetes.io/docs/concepts/workloads/pods/disruptions/
                  ## @param controller.pdb.create Deploy a pdb object for the Kafka pod
                  ## @param controller.pdb.minAvailable Maximum number/percentage of unavailable Kafka replicas
                  ## @param controller.pdb.maxUnavailable Maximum number/percentage of unavailable Kafka replicas
                  ##
                  pdb:
                    create: true
                    minAvailable: ""
                    maxUnavailable: ""
                  ## Enable persistence using Persistent Volume Claims
                  ## ref: https://kubernetes.io/docs/concepts/storage/persistent-volumes/
                  ##
                  persistence:
                    ## @param controller.persistence.enabled Enable Kafka data persistence using PVC, note that ZooKeeper persistence is unaffected
                    ##
                    enabled: true
                    ## @param controller.persistence.existingClaim A manually managed Persistent Volume and Claim
                    ## If defined, PVC must be created manually before volume will be bound
                    ## The value is evaluated as a template
                    ##
                    existingClaim: ""
                    ## @param controller.persistence.storageClass PVC Storage Class for Kafka data volume
                    ## If defined, storageClassName: <storageClass>
                    ## If set to "-", storageClassName: "", which disables dynamic provisioning
                    ## If undefined (the default) or set to null, no storageClassName spec is
                    ## set, choosing the default provisioner.
                    ##
                    storageClass: ""
                    ## @param controller.persistence.accessModes Persistent Volume Access Modes
                    ##
                    accessModes:
                      - ReadWriteOnce
                    ## @param controller.persistence.size PVC Storage Request for Kafka data volume
                    ##
                    size: 8Gi
                    ## @param controller.persistence.annotations Annotations for the PVC
                    ##
                    annotations: {}
                    ## @param controller.persistence.labels Labels for the PVC
                    ##
                    labels: {}
                    ## @param controller.persistence.selector Selector to match an existing Persistent Volume for Kafka data PVC. If set, the PVC can't have a PV dynamically provisioned for it
                    ## selector:
                    ##   matchLabels:
                    ##     app: my-app
                    ##
                    selector: {}
                    ## @param controller.persistence.mountPath Mount path of the Kafka data volume
                    ##
                    mountPath: /bitnami/kafka
                  ## Log Persistence parameters
                  ##
                  logPersistence:
                    ## @param controller.logPersistence.enabled Enable Kafka logs persistence using PVC, note that ZooKeeper persistence is unaffected
                    ##
                    enabled: false
                    ## @param controller.logPersistence.existingClaim A manually managed Persistent Volume and Claim
                    ## If defined, PVC must be created manually before volume will be bound
                    ## The value is evaluated as a template
                    ##
                    existingClaim: ""
                    ## @param controller.logPersistence.storageClass PVC Storage Class for Kafka logs volume
                    ## If defined, storageClassName: <storageClass>
                    ## If set to "-", storageClassName: "", which disables dynamic provisioning
                    ## If undefined (the default) or set to null, no storageClassName spec is
                    ## set, choosing the default provisioner.
                    ##
                    storageClass: ""
                    ## @param controller.logPersistence.accessModes Persistent Volume Access Modes
                    ##
                    accessModes:
                      - ReadWriteOnce
                    ## @param controller.logPersistence.size PVC Storage Request for Kafka logs volume
                    ##
                    size: 8Gi
                    ## @param controller.logPersistence.annotations Annotations for the PVC
                    ##
                    annotations: {}
                    ## @param controller.logPersistence.selector Selector to match an existing Persistent Volume for Kafka log data PVC. If set, the PVC can't have a PV dynamically provisioned for it
                    ## selector:
                    ##   matchLabels:
                    ##     app: my-app
                    ##
                    selector: {}
                    ## @param controller.logPersistence.mountPath Mount path of the Kafka logs volume
                    ##
                    mountPath: /opt/bitnami/kafka/logs
                ## @section Broker-only statefulset parameters
                ##
                broker:
                  ## @param broker.replicaCount Number of Kafka broker-only nodes
                  ##
                  replicaCount: 0
                  ## @param broker.minId Minimal node.id values for broker-only nodes. Do not change after first initialization.
                  ## Broker-only id increment their ID starting at this minimal value.
                  ## We recommend setting this this value high enough, as IDs under this value will be used by controller-eligible nodes
                  ##
                  ##
                  minId: 100
                  ## @param broker.zookeeperMigrationMode Set to true to deploy cluster controller quorum
                  ## This allows configuring both kraft and zookeeper modes simultaneously in order to perform the migration of the Kafka metadata.
                  ## Ref. https://docs.confluent.io/platform/current/installation/migrate-zk-kraft.html
                  ##
                  zookeeperMigrationMode: false
                  ## @param broker.config Configuration file for Kafka broker-only nodes, rendered as a template. Auto-generated based on chart values when not specified.
                  ## @param broker.existingConfigmap ConfigMap with Kafka Configuration for broker-only nodes.
                  ## NOTE: This will override the configuration based on values, please act carefully
                  ## If both are set, the existingConfigMap will be used.
                  ##
                  config: ""
                  existingConfigmap: ""
                  ## @param broker.extraConfig Additional configuration to be appended at the end of the generated Kafka broker-only nodes configuration file.
                  ##
                  extraConfig: ""
                  ## @param broker.extraConfigYaml Additional configuration in yaml format to be appended at the end of the generated Kafka broker-only nodes configuration file.
                  ## If keys of extraConfigYaml are duplicated here, the value from broker.extraConfigYaml is taken.
                  ##
                  extraConfigYaml: {}
                  ## @param broker.secretConfig Additional configuration to be appended at the end of the generated Kafka broker-only nodes configuration file.
                  ## This value will be stored in a secret.
                  ##
                  secretConfig: ""
                  ## @param broker.existingSecretConfig Secret with additonal configuration that will be appended to the end of the generated Kafka broker-only nodes configuration file
                  ## The key for the configuration should be: server-secret.properties
                  ## NOTE: This will override broker.secretConfig value
                  ##
                  existingSecretConfig: ""
                  ## @param broker.heapOpts Kafka Java Heap size for broker-only nodes
                  ##
                  heapOpts: -Xmx1024m -Xms1024m
                  ## @param broker.command Override Kafka container command
                  ##
                  command: []
                  ## @param broker.args Override Kafka container arguments
                  ##
                  args: []
                  ## @param broker.extraEnvVars Extra environment variables to add to Kafka pods
                  ## ref: https://github.com/bitnami/containers/tree/main/bitnami/kafka#configuration
                  ## e.g:
                  ## extraEnvVars:
                  ##   - name: KAFKA_CFG_BACKGROUND_THREADS
                  ##     value: "10"
                  ##
                  extraEnvVars: []
                  ## @param broker.extraEnvVarsCM ConfigMap with extra environment variables
                  ##
                  extraEnvVarsCM: ""
                  ## @param broker.extraEnvVarsSecret Secret with extra environment variables
                  ##
                  extraEnvVarsSecret: ""
                  ## @param broker.extraContainerPorts Kafka broker-only extra containerPorts.
                  ##
                  extraContainerPorts: []
                  ## Configure extra options for Kafka containers' liveness, readiness and startup probes
                  ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/#configure-probes
                  ## @param broker.livenessProbe.enabled Enable livenessProbe on Kafka containers
                  ## @param broker.livenessProbe.initialDelaySeconds Initial delay seconds for livenessProbe
                  ## @param broker.livenessProbe.periodSeconds Period seconds for livenessProbe
                  ## @param broker.livenessProbe.timeoutSeconds Timeout seconds for livenessProbe
                  ## @param broker.livenessProbe.failureThreshold Failure threshold for livenessProbe
                  ## @param broker.livenessProbe.successThreshold Success threshold for livenessProbe
                  ##
                  livenessProbe:
                    enabled: true
                    initialDelaySeconds: 10
                    timeoutSeconds: 5
                    failureThreshold: 3
                    periodSeconds: 10
                    successThreshold: 1
                  ## @param broker.readinessProbe.enabled Enable readinessProbe on Kafka containers
                  ## @param broker.readinessProbe.initialDelaySeconds Initial delay seconds for readinessProbe
                  ## @param broker.readinessProbe.periodSeconds Period seconds for readinessProbe
                  ## @param broker.readinessProbe.timeoutSeconds Timeout seconds for readinessProbe
                  ## @param broker.readinessProbe.failureThreshold Failure threshold for readinessProbe
                  ## @param broker.readinessProbe.successThreshold Success threshold for readinessProbe
                  ##
                  readinessProbe:
                    enabled: true
                    initialDelaySeconds: 5
                    failureThreshold: 6
                    timeoutSeconds: 5
                    periodSeconds: 10
                    successThreshold: 1
                  ## @param broker.startupProbe.enabled Enable startupProbe on Kafka containers
                  ## @param broker.startupProbe.initialDelaySeconds Initial delay seconds for startupProbe
                  ## @param broker.startupProbe.periodSeconds Period seconds for startupProbe
                  ## @param broker.startupProbe.timeoutSeconds Timeout seconds for startupProbe
                  ## @param broker.startupProbe.failureThreshold Failure threshold for startupProbe
                  ## @param broker.startupProbe.successThreshold Success threshold for startupProbe
                  ##
                  startupProbe:
                    enabled: false
                    initialDelaySeconds: 30
                    periodSeconds: 10
                    timeoutSeconds: 1
                    failureThreshold: 15
                    successThreshold: 1
                  ## @param broker.customLivenessProbe Custom livenessProbe that overrides the default one
                  ##
                  customLivenessProbe: {}
                  ## @param broker.customReadinessProbe Custom readinessProbe that overrides the default one
                  ##
                  customReadinessProbe: {}
                  ## @param broker.customStartupProbe Custom startupProbe that overrides the default one
                  ##
                  customStartupProbe: {}
                  ## @param broker.lifecycleHooks lifecycleHooks for the Kafka container to automate configuration before or after startup
                  ##
                  lifecycleHooks: {}
                  ## Kafka init container resource requests and limits
                  ## ref: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
                  ## @param broker.initContainerResources.limits The resources limits for the container
                  ## @param broker.initContainerResources.requests The requested resources for the container
                  ##
                  initContainerResources:
                    limits: {}
                    requests: {}
                  ## Kafka resource requests and limits
                  ## ref: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
                  ## @param broker.resourcesPreset Set container resources according to one common preset (allowed values: none, nano, micro, small, medium, large, xlarge, 2xlarge). This is ignored if broker.resources is set (broker.resources is recommended for production).
                  ## More information: https://github.com/bitnami/charts/blob/main/bitnami/common/templates/_resources.tpl#L15
                  ##
                  resourcesPreset: "small"
                  ## @param broker.resources Set container requests and limits for different resources like CPU or memory (essential for production workloads)
                  ## Example:
                  ## resources:
                  ##   requests:
                  ##     cpu: 2
                  ##     memory: 512Mi
                  ##   limits:
                  ##     cpu: 3
                  ##     memory: 1024Mi
                  ##
                  resources: {}
                  ## Kafka pods' Security Context
                  ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-pod
                  ## @param broker.podSecurityContext.enabled Enable security context for the pods
                  ## @param broker.podSecurityContext.fsGroupChangePolicy Set filesystem group change policy
                  ## @param broker.podSecurityContext.sysctls Set kernel settings using the sysctl interface
                  ## @param broker.podSecurityContext.supplementalGroups Set filesystem extra groups
                  ## @param broker.podSecurityContext.fsGroup Set Kafka pod's Security Context fsGroup
                  ## @param broker.podSecurityContext.seccompProfile.type Set Kafka pod's Security Context seccomp profile
                  ##
                  podSecurityContext:
                    enabled: true
                    fsGroupChangePolicy: Always
                    sysctls: []
                    supplementalGroups: []
                    fsGroup: 1001
                    seccompProfile:
                      type: "RuntimeDefault"
                  ## Kafka containers' Security Context
                  ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-container
                  ## @param broker.containerSecurityContext.enabled Enable Kafka containers' Security Context
                  ## @param broker.containerSecurityContext.seLinuxOptions [object,nullable] Set SELinux options in container
                  ## @param broker.containerSecurityContext.runAsUser Set containers' Security Context runAsUser
                  ## @param broker.containerSecurityContext.runAsGroup Set containers' Security Context runAsGroup
                  ## @param broker.containerSecurityContext.runAsNonRoot Set Kafka containers' Security Context runAsNonRoot
                  ## @param broker.containerSecurityContext.allowPrivilegeEscalation Force the child process to be run as non-privileged
                  ## @param broker.containerSecurityContext.readOnlyRootFilesystem Allows the pod to mount the RootFS as ReadOnly only
                  ## @param broker.containerSecurityContext.capabilities.drop Set Kafka containers' server Security Context capabilities to be dropped
                  ## e.g:
                  ##   containerSecurityContext:
                  ##     enabled: true
                  ##     capabilities:
                  ##       drop: ["NET_RAW"]
                  ##     readOnlyRootFilesystem: true
                  ##
                  containerSecurityContext:
                    enabled: true
                    seLinuxOptions: {}
                    runAsUser: 1001
                    runAsGroup: 1001
                    runAsNonRoot: true
                    allowPrivilegeEscalation: false
                    readOnlyRootFilesystem: true
                    capabilities:
                      drop: ["ALL"]
                  ## @param broker.automountServiceAccountToken Mount Service Account token in pod
                  ##
                  automountServiceAccountToken: false
                  ## @param broker.hostAliases Kafka pods host aliases
                  ## https://kubernetes.io/docs/concepts/services-networking/add-entries-to-pod-etc-hosts-with-host-aliases/
                  ##
                  hostAliases: []
                  ## @param broker.hostNetwork Specify if host network should be enabled for Kafka pods
                  ##
                  hostNetwork: false
                  ## @param broker.hostIPC Specify if host IPC should be enabled for Kafka pods
                  ##
                  hostIPC: false
                  ## @param broker.podLabels Extra labels for Kafka pods
                  ## Ref: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
                  ##
                  podLabels: {}
                  ## @param broker.podAnnotations Extra annotations for Kafka pods
                  ## ref: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
                  ##
                  podAnnotations: {}
                  ## @param broker.podAffinityPreset Pod affinity preset. Ignored if `affinity` is set. Allowed values: `soft` or `hard`
                  ## ref: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#inter-pod-affinity-and-anti-affinity
                  ##
                  podAffinityPreset: ""
                  ## @param broker.podAntiAffinityPreset Pod anti-affinity preset. Ignored if `affinity` is set. Allowed values: `soft` or `hard`
                  ## Ref: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#inter-pod-affinity-and-anti-affinity
                  ##
                  podAntiAffinityPreset: soft
                  ## Node affinity preset
                  ## Ref: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#node-affinity
                  ##
                  nodeAffinityPreset:
                    ## @param broker.nodeAffinityPreset.type Node affinity preset type. Ignored if `affinity` is set. Allowed values: `soft` or `hard`
                    ##
                    type: ""
                    ## @param broker.nodeAffinityPreset.key Node label key to match Ignored if `affinity` is set.
                    ## E.g.
                    ## key: "kubernetes.io/e2e-az-name"
                    ##
                    key: ""
                    ## @param broker.nodeAffinityPreset.values Node label values to match. Ignored if `affinity` is set.
                    ## E.g.
                    ## values:
                    ##   - e2e-az1
                    ##   - e2e-az2
                    ##
                    values: []
                  ## @param broker.affinity Affinity for pod assignment
                  ## Ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#affinity-and-anti-affinity
                  ## Note: podAffinityPreset, podAntiAffinityPreset, and  nodeAffinityPreset will be ignored when it's set
                  ##
                  affinity: {}
                  ## @param broker.nodeSelector Node labels for pod assignment
                  ## Ref: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/
                  ##
                  nodeSelector: {}
                  ## @param broker.tolerations Tolerations for pod assignment
                  ## Ref: https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/
                  ##
                  tolerations: []
                  ## @param broker.topologySpreadConstraints Topology Spread Constraints for pod assignment spread across your cluster among failure-domains. Evaluated as a template
                  ## Ref: https://kubernetes.io/docs/concepts/workloads/pods/pod-topology-spread-constraints/#spread-constraints-for-pods
                  ##
                  topologySpreadConstraints: []
                  ## @param broker.terminationGracePeriodSeconds Seconds the pod needs to gracefully terminate
                  ## ref: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#hook-handler-execution
                  ##
                  terminationGracePeriodSeconds: ""
                  ## @param broker.podManagementPolicy StatefulSet controller supports relax its ordering guarantees while preserving its uniqueness and identity guarantees. There are two valid pod management policies: OrderedReady and Parallel
                  ## ref: https://kubernetes.io/docs/tutorials/stateful-application/basic-stateful-set/#pod-management-policy
                  ##
                  podManagementPolicy: Parallel
                  ## @param broker.minReadySeconds How many seconds a pod needs to be ready before killing the next, during update
                  ##
                  minReadySeconds: 0
                  ## @param broker.priorityClassName Name of the existing priority class to be used by kafka pods
                  ## Ref: https://kubernetes.io/docs/concepts/configuration/pod-priority-preemption/
                  ##
                  priorityClassName: ""
                  ## @param broker.runtimeClassName Name of the runtime class to be used by pod(s)
                  ## ref: https://kubernetes.io/docs/concepts/containers/runtime-class/
                  ##
                  runtimeClassName: ""
                  ## @param broker.enableServiceLinks Whether information about services should be injected into pod's environment variable
                  ## The environment variables injected by service links are not used, but can lead to slow kafka boot times or slow running of the scripts when there are many services in the current namespace.
                  ## If you experience slow pod startups or slow running of the scripts you probably want to set this to `false`.
                  ##
                  enableServiceLinks: true
                  ## @param broker.schedulerName Name of the k8s scheduler (other than default)
                  ## ref: https://kubernetes.io/docs/tasks/administer-cluster/configure-multiple-schedulers/
                  ##
                  schedulerName: ""
                  ## @param broker.updateStrategy.type Kafka statefulset strategy type
                  ## ref: https://kubernetes.io/docs/concepts/workloads/controllers/statefulset/#update-strategies
                  ##
                  updateStrategy:
                    type: RollingUpdate
                  ## @param broker.extraVolumes Optionally specify extra list of additional volumes for the Kafka pod(s)
                  ## e.g:
                  ## extraVolumes:
                  ##   - name: kafka-jaas
                  ##     secret:
                  ##       secretName: kafka-jaas
                  ##
                  extraVolumes: []
                  ## @param broker.extraVolumeMounts Optionally specify extra list of additional volumeMounts for the Kafka container(s)
                  ## extraVolumeMounts:
                  ##   - name: kafka-jaas
                  ##     mountPath: /bitnami/kafka/config/kafka_jaas.conf
                  ##     subPath: kafka_jaas.conf
                  ##
                  extraVolumeMounts: []
                  ## @param broker.sidecars Add additional sidecar containers to the Kafka pod(s)
                  ## e.g:
                  ## sidecars:
                  ##   - name: your-image-name
                  ##     image: your-image
                  ##     imagePullPolicy: Always
                  ##     ports:
                  ##       - name: portname
                  ##         containerPort: 1234
                  ##
                  sidecars: []
                  ## @param broker.initContainers Add additional Add init containers to the Kafka pod(s)
                  ## e.g:
                  ## initContainers:
                  ##   - name: your-image-name
                  ##     image: your-image
                  ##     imagePullPolicy: Always
                  ##     ports:
                  ##       - name: portname
                  ##         containerPort: 1234
                  ##
                  initContainers: []
                  ## Kafka Pod Disruption Budget
                  ## ref: https://kubernetes.io/docs/concepts/workloads/pods/disruptions/
                  ## @param broker.pdb.create Deploy a pdb object for the Kafka pod
                  ## @param broker.pdb.minAvailable Maximum number/percentage of unavailable Kafka replicas
                  ## @param broker.pdb.maxUnavailable Maximum number/percentage of unavailable Kafka replicas
                  ##
                  pdb:
                    create: true
                    minAvailable: ""
                    maxUnavailable: ""
                  ## @section Experimental: Kafka Broker Autoscaling configuration
                  ## ref: https://kubernetes.io/docs/tasks/run-application/horizontal-pod-autoscale/
                  ##
                  autoscaling:
                    vpa:
                      ## @param broker.autoscaling.vpa.enabled Enable VPA
                      ##
                      enabled: false
                      ## @param broker.autoscaling.vpa.annotations Annotations for VPA resource
                      ##
                      annotations: {}
                      ## @param broker.autoscaling.vpa.controlledResources VPA List of resources that the vertical pod autoscaler can control. Defaults to cpu and memory
                      ##
                      controlledResources: []
                      ## @param broker.autoscaling.vpa.maxAllowed VPA Max allowed resources for the pod
                      ## cpu: 200m
                      ## memory: 100Mi
                      maxAllowed: {}
                      ## @param broker.autoscaling.vpa.minAllowed VPA Min allowed resources for the pod
                      ## cpu: 200m
                      ## memory: 100Mi
                      minAllowed: {}
                      updatePolicy:
                        ## @param broker.autoscaling.vpa.updatePolicy.updateMode Autoscaling update policy Specifies whether recommended updates are applied when a Pod is started and whether recommended updates are applied during the life of a Pod
                        ## Possible values are "Off", "Initial", "Recreate", and "Auto".
                        ##
                        updateMode: Auto
                    hpa:
                      ## @param broker.autoscaling.hpa.enabled Enable HPA for Kafka Broker
                      ##
                      enabled: false
                      ## @param broker.autoscaling.hpa.minReplicas Minimum number of Kafka Broker replicas
                      ##
                      minReplicas: ""
                      ## @param broker.autoscaling.hpa.maxReplicas Maximum number of Kafka Broker replicas
                      ##
                      maxReplicas: ""
                      ## @param broker.autoscaling.hpa.targetCPU Target CPU utilization percentage
                      ##
                      targetCPU: ""
                      ## @param broker.autoscaling.hpa.targetMemory Target Memory utilization percentage
                      ##
                      targetMemory: ""
                  ## Enable persistence using Persistent Volume Claims
                  ## ref: https://kubernetes.io/docs/concepts/storage/persistent-volumes/
                  ##
                  persistence:
                    ## @param broker.persistence.enabled Enable Kafka data persistence using PVC, note that ZooKeeper persistence is unaffected
                    ##
                    enabled: true
                    ## @param broker.persistence.existingClaim A manually managed Persistent Volume and Claim
                    ## If defined, PVC must be created manually before volume will be bound
                    ## The value is evaluated as a template
                    ##
                    existingClaim: ""
                    ## @param broker.persistence.storageClass PVC Storage Class for Kafka data volume
                    ## If defined, storageClassName: <storageClass>
                    ## If set to "-", storageClassName: "", which disables dynamic provisioning
                    ## If undefined (the default) or set to null, no storageClassName spec is
                    ## set, choosing the default provisioner.
                    ##
                    storageClass: ""
                    ## @param broker.persistence.accessModes Persistent Volume Access Modes
                    ##
                    accessModes:
                      - ReadWriteOnce
                    ## @param broker.persistence.size PVC Storage Request for Kafka data volume
                    ##
                    size: 8Gi
                    ## @param broker.persistence.annotations Annotations for the PVC
                    ##
                    annotations: {}
                    ## @param broker.persistence.labels Labels for the PVC
                    ##
                    labels: {}
                    ## @param broker.persistence.selector Selector to match an existing Persistent Volume for Kafka data PVC. If set, the PVC can't have a PV dynamically provisioned for it
                    ## selector:
                    ##   matchLabels:
                    ##     app: my-app
                    ##
                    selector: {}
                    ## @param broker.persistence.mountPath Mount path of the Kafka data volume
                    ##
                    mountPath: /bitnami/kafka
                  ## Log Persistence parameters
                  ##
                  logPersistence:
                    ## @param broker.logPersistence.enabled Enable Kafka logs persistence using PVC, note that ZooKeeper persistence is unaffected
                    ##
                    enabled: false
                    ## @param broker.logPersistence.existingClaim A manually managed Persistent Volume and Claim
                    ## If defined, PVC must be created manually before volume will be bound
                    ## The value is evaluated as a template
                    ##
                    existingClaim: ""
                    ## @param broker.logPersistence.storageClass PVC Storage Class for Kafka logs volume
                    ## If defined, storageClassName: <storageClass>
                    ## If set to "-", storageClassName: "", which disables dynamic provisioning
                    ## If undefined (the default) or set to null, no storageClassName spec is
                    ## set, choosing the default provisioner.
                    ##
                    storageClass: ""
                    ## @param broker.logPersistence.accessModes Persistent Volume Access Modes
                    ##
                    accessModes:
                      - ReadWriteOnce
                    ## @param broker.logPersistence.size PVC Storage Request for Kafka logs volume
                    ##
                    size: 8Gi
                    ## @param broker.logPersistence.annotations Annotations for the PVC
                    ##
                    annotations: {}
                    ## @param broker.logPersistence.selector Selector to match an existing Persistent Volume for Kafka log data PVC. If set, the PVC can't have a PV dynamically provisioned for it
                    ## selector:
                    ##   matchLabels:
                    ##     app: my-app
                    ##
                    selector: {}
                    ## @param broker.logPersistence.mountPath Mount path of the Kafka logs volume
                    ##
                    mountPath: /opt/bitnami/kafka/logs
                ## @section Traffic Exposure parameters
                ##
                
                ## Service parameters
                ##
                service:
                  ## @param service.type Kubernetes Service type
                  ##
                  type: ClusterIP
                  ## @param service.ports.client Kafka svc port for client connections
                  ## @param service.ports.controller Kafka svc port for controller connections. It is used if "kraft.enabled: true"
                  ## @param service.ports.interbroker Kafka svc port for inter-broker connections
                  ## @param service.ports.external Kafka svc port for external connections
                  ##
                  ports:
                    client: 9092
                    controller: 9093
                    interbroker: 9094
                    external: 9095
                  ## @param service.extraPorts Extra ports to expose in the Kafka service (normally used with the `sidecar` value)
                  ##
                  extraPorts: []
                  ## @param service.nodePorts.client Node port for the Kafka client connections
                  ## @param service.nodePorts.external Node port for the Kafka external connections
                  ## NOTE: choose port between <30000-32767>
                  ##
                  nodePorts:
                    client: ""
                    external: ""
                  ## @param service.sessionAffinity Control where client requests go, to the same pod or round-robin
                  ## Values: ClientIP or None
                  ## ref: https://kubernetes.io/docs/concepts/services-networking/service/
                  ##
                  sessionAffinity: None
                  ## @param service.sessionAffinityConfig Additional settings for the sessionAffinity
                  ## sessionAffinityConfig:
                  ##   clientIP:
                  ##     timeoutSeconds: 300
                  ##
                  sessionAffinityConfig: {}
                  ## @param service.clusterIP Kafka service Cluster IP
                  ## e.g.:
                  ## clusterIP: None
                  ##
                  clusterIP: ""
                  ## @param service.loadBalancerIP Kafka service Load Balancer IP
                  ## ref: https://kubernetes.io/docs/concepts/services-networking/service/#loadbalancer
                  ##
                  loadBalancerIP: ""
                  ## @param service.loadBalancerClass Kafka service Load Balancer Class
                  ## ref: https://kubernetes.io/docs/concepts/services-networking/service/#load-balancer-class
                  ##
                  loadBalancerClass: ""
                  ## @param service.loadBalancerSourceRanges Kafka service Load Balancer sources
                  ## ref: https://kubernetes.io/docs/tasks/access-application-cluster/configure-cloud-provider-firewall/#restrict-access-for-loadbalancer-service
                  ## e.g:
                  ## loadBalancerSourceRanges:
                  ##   - 10.10.10.0/24
                  ##
                  loadBalancerSourceRanges: []
                  ## @param service.allocateLoadBalancerNodePorts Whether to allocate node ports when service type is LoadBalancer
                  ## ref: https://kubernetes.io/docs/concepts/services-networking/service/#load-balancer-nodeport-allocation
                  ##
                  allocateLoadBalancerNodePorts: true
                  ## @param service.externalTrafficPolicy Kafka service external traffic policy
                  ## ref https://kubernetes.io/docs/tasks/access-application-cluster/create-external-load-balancer/#preserving-the-client-source-ip
                  ##
                  externalTrafficPolicy: Cluster
                  ## @param service.annotations Additional custom annotations for Kafka service
                  ##
                  annotations: {}
                  ## Headless service properties
                  ##
                  headless:
                    controller:
                      ## @param service.headless.controller.annotations Annotations for the controller-eligible headless service.
                      ##
                      annotations: {}
                      ## @param service.headless.controller.labels Labels for the controller-eligible headless service.
                      ##
                      labels: {}
                    broker:
                      ## @param service.headless.broker.annotations Annotations for the broker-only headless service.
                      ##
                      annotations: {}
                      ## @param service.headless.broker.labels Labels for the broker-only headless service.
                      ##
                      labels: {}
                ## External Access to Kafka brokers configuration
                ##
                externalAccess:
                  ## @param externalAccess.enabled Enable Kubernetes external cluster access to Kafka brokers
                  ##
                  enabled: false
                  ## External IPs auto-discovery configuration
                  ## An init container is used to auto-detect LB IPs or node ports by querying the K8s API
                  ## Note: RBAC might be required
                  ##
                  autoDiscovery:
                    ## @param externalAccess.autoDiscovery.enabled Enable using an init container to auto-detect external IPs/ports by querying the K8s API
                    ##
                    enabled: false
                    ## Bitnami Kubectl image
                    ## ref: https://hub.docker.com/r/bitnami/kubectl/tags/
                    ## @param externalAccess.autoDiscovery.image.registry [default: REGISTRY_NAME] Init container auto-discovery image registry
                    ## @param externalAccess.autoDiscovery.image.repository [default: REPOSITORY_NAME/kubectl] Init container auto-discovery image repository
                    ## @skip externalAccess.autoDiscovery.image.tag Init container auto-discovery image tag (immutable tags are recommended)
                    ## @param externalAccess.autoDiscovery.image.digest Kubectl image digest in the way sha256:aa.... Please note this parameter, if set, will override the tag
                    ## @param externalAccess.autoDiscovery.image.pullPolicy Init container auto-discovery image pull policy
                    ## @param externalAccess.autoDiscovery.image.pullSecrets Init container auto-discovery image pull secrets
                    ##
                    image:
                      registry: docker.io
                      repository: bitnami/kubectl
                      tag: 1.30.2-debian-12-r0
                      digest: ""
                      ## Specify a imagePullPolicy
                      ## Defaults to 'Always' if image tag is 'latest', else set to 'IfNotPresent'
                      ## ref: https://kubernetes.io/docs/concepts/containers/images/#pre-pulled-images
                      ##
                      pullPolicy: IfNotPresent
                      ## Optionally specify an array of imagePullSecrets (secrets must be manually created in the namespace)
                      ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
                      ## e.g:
                      ## pullSecrets:
                      ##   - myRegistryKeySecretName
                      ##
                      pullSecrets: []
                    ## Init Container resource requests and limits
                    ## ref: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
                    ## @param externalAccess.autoDiscovery.resourcesPreset Set container resources according to one common preset (allowed values: none, nano, micro, small, medium, large, xlarge, 2xlarge). This is ignored if externalAccess.autoDiscovery.resources is set (externalAccess.autoDiscovery.resources is recommended for production).
                    ## More information: https://github.com/bitnami/charts/blob/main/bitnami/common/templates/_resources.tpl#L15
                    ##
                    resourcesPreset: "nano"
                    ## @param externalAccess.autoDiscovery.resources Set container requests and limits for different resources like CPU or memory (essential for production workloads)
                    ## Example:
                    ## resources:
                    ##   requests:
                    ##     cpu: 2
                    ##     memory: 512Mi
                    ##   limits:
                    ##     cpu: 3
                    ##     memory: 1024Mi
                    ##
                    resources: {}
                    ## Kafka provisioning containers' Security Context
                    ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-container
                    ## @param externalAccess.autoDiscovery.containerSecurityContext.enabled Enable Kafka auto-discovery containers' Security Context
                    ## @param externalAccess.autoDiscovery.containerSecurityContext.seLinuxOptions [object,nullable] Set SELinux options in container
                    ## @param externalAccess.autoDiscovery.containerSecurityContext.runAsUser Set containers' Security Context runAsUser
                    ## @param externalAccess.autoDiscovery.containerSecurityContext.runAsGroup Set containers' Security Context runAsGroup
                    ## @param externalAccess.autoDiscovery.containerSecurityContext.runAsNonRoot Set Kafka auto-discovery containers' Security Context runAsNonRoot
                    ## @param externalAccess.autoDiscovery.containerSecurityContext.allowPrivilegeEscalation Set Kafka auto-discovery containers' Security Context allowPrivilegeEscalation
                    ## @param externalAccess.autoDiscovery.containerSecurityContext.readOnlyRootFilesystem Set Kafka auto-discovery containers' Security Context readOnlyRootFilesystem
                    ## @param externalAccess.autoDiscovery.containerSecurityContext.capabilities.drop Set Kafka auto-discovery containers' Security Context capabilities to be dropped
                    ## @param externalAccess.autoDiscovery.containerSecurityContext.seccompProfile.type Set Kafka auto-discovery seccomp profile type
                    ## e.g:
                    ##   containerSecurityContext:
                    ##     enabled: true
                    ##     capabilities:
                    ##       drop: ["NET_RAW"]
                    ##     readOnlyRootFilesystem: true
                    ##
                    containerSecurityContext:
                      enabled: true
                      seLinuxOptions: {}
                      runAsUser: 1001
                      runAsGroup: 1001
                      runAsNonRoot: true
                      allowPrivilegeEscalation: false
                      readOnlyRootFilesystem: true
                      capabilities:
                        drop: ["ALL"]
                      seccompProfile:
                        type: "RuntimeDefault"
                  ## Service settings
                  controller:
                    ## @param externalAccess.controller.forceExpose If set to true, force exposing controller-eligible nodes although they are configured as controller-only nodes
                    ##
                    forceExpose: false
                    ## Parameters to configure K8s service(s) used to externally access Kafka brokers
                    ## Note: A new service per broker will be created
                    ##
                    service:
                      ## @param externalAccess.controller.service.type Kubernetes Service type for external access. It can be NodePort, LoadBalancer or ClusterIP
                      ##
                      type: LoadBalancer
                      ## @param externalAccess.controller.service.ports.external Kafka port used for external access when service type is LoadBalancer
                      ##
                      ports:
                        external: 9094
                      ## @param externalAccess.controller.service.loadBalancerClass Kubernetes Service Load Balancer class for external access when service type is LoadBalancer
                      ## ref: https://kubernetes.io/docs/concepts/services-networking/service/#load-balancer-class
                      ##
                      loadBalancerClass: ""
                      ## @param externalAccess.controller.service.loadBalancerIPs Array of load balancer IPs for each Kafka broker. Length must be the same as replicaCount
                      ## e.g:
                      ## loadBalancerIPs:
                      ##   - X.X.X.X
                      ##   - Y.Y.Y.Y
                      ##
                      loadBalancerIPs: []
                      ## @param externalAccess.controller.service.loadBalancerNames Array of load balancer Names for each Kafka broker. Length must be the same as replicaCount
                      ## e.g:
                      ## loadBalancerNames:
                      ##   - broker1.external.example.com
                      ##   - broker2.external.example.com
                      ##
                      loadBalancerNames: []
                      ## @param externalAccess.controller.service.loadBalancerAnnotations Array of load balancer annotations for each Kafka broker. Length must be the same as replicaCount
                      ## e.g:
                      ## loadBalancerAnnotations:
                      ##   - external-dns.alpha.kubernetes.io/hostname: broker1.external.example.com.
                      ##   - external-dns.alpha.kubernetes.io/hostname: broker2.external.example.com.
                      ##
                      loadBalancerAnnotations: []
                      ## @param externalAccess.controller.service.loadBalancerSourceRanges Address(es) that are allowed when service is LoadBalancer
                      ## ref: https://kubernetes.io/docs/tasks/access-application-cluster/configure-cloud-provider-firewall/#restrict-access-for-loadbalancer-service
                      ## e.g:
                      ## loadBalancerSourceRanges:
                      ## - 10.10.10.0/24
                      ##
                      loadBalancerSourceRanges: []
                      ## @param externalAccess.controller.service.allocateLoadBalancerNodePorts Whether to allocate node ports when service type is LoadBalancer
                      ## ref: https://kubernetes.io/docs/concepts/services-networking/service/#load-balancer-nodeport-allocation
                      ##
                      allocateLoadBalancerNodePorts: true
                      ## @param externalAccess.controller.service.nodePorts Array of node ports used for each Kafka broker. Length must be the same as replicaCount
                      ## e.g:
                      ## nodePorts:
                      ##   - 30001
                      ##   - 30002
                      ##
                      nodePorts: []
                      ## @param externalAccess.controller.service.externalIPs Use distinct service host IPs to configure Kafka external listener when service type is NodePort. Length must be the same as replicaCount
                      ## e.g:
                      ## externalIPs:
                      ##   - X.X.X.X
                      ##   - Y.Y.Y.Y
                      ##
                      externalIPs: []
                      ## @param externalAccess.controller.service.useHostIPs Use service host IPs to configure Kafka external listener when service type is NodePort
                      ##
                      useHostIPs: false
                      ## @param externalAccess.controller.service.usePodIPs using the MY_POD_IP address for external access.
                      ##
                      usePodIPs: false
                      ## @param externalAccess.controller.service.domain Domain or external ip used to configure Kafka external listener when service type is NodePort or ClusterIP
                      ## NodePort: If not specified, the container will try to get the kubernetes node external IP
                      ## ClusterIP: Must be specified, ingress IP or domain where tcp for external ports is configured
                      ##
                      domain: ""
                      ## @param externalAccess.controller.service.publishNotReadyAddresses Indicates that any agent which deals with endpoints for this Service should disregard any indications of ready/not-ready
                      ## ref: https://kubernetes.io/docs/reference/kubernetes-api/service-resources/service-v1/
                      ##
                      publishNotReadyAddresses: false
                      ## @param externalAccess.controller.service.labels Service labels for external access
                      ##
                      labels: {}
                      ## @param externalAccess.controller.service.annotations Service annotations for external access
                      ##
                      annotations: {}
                      ## @param externalAccess.controller.service.extraPorts Extra ports to expose in the Kafka external service
                      ##
                      extraPorts: []
                  broker:
                    ## Parameters to configure K8s service(s) used to externally access Kafka brokers
                    ## Note: A new service per broker will be created
                    ##
                    service:
                      ## @param externalAccess.broker.service.type Kubernetes Service type for external access. It can be NodePort, LoadBalancer or ClusterIP
                      ##
                      type: LoadBalancer
                      ## @param externalAccess.broker.service.ports.external Kafka port used for external access when service type is LoadBalancer
                      ##
                      ports:
                        external: 9094
                      ## @param externalAccess.broker.service.loadBalancerClass Kubernetes Service Load Balancer class for external access when service type is LoadBalancer
                      ## ref: https://kubernetes.io/docs/concepts/services-networking/service/#load-balancer-class
                      ##
                      loadBalancerClass: ""
                      ## @param externalAccess.broker.service.loadBalancerIPs Array of load balancer IPs for each Kafka broker. Length must be the same as replicaCount
                      ## e.g:
                      ## loadBalancerIPs:
                      ##   - X.X.X.X
                      ##   - Y.Y.Y.Y
                      ##
                      loadBalancerIPs: []
                      ## @param externalAccess.broker.service.loadBalancerNames Array of load balancer Names for each Kafka broker. Length must be the same as replicaCount
                      ## e.g:
                      ## loadBalancerNames:
                      ##   - broker1.external.example.com
                      ##   - broker2.external.example.com
                      ##
                      loadBalancerNames: []
                      ## @param externalAccess.broker.service.loadBalancerAnnotations Array of load balancer annotations for each Kafka broker. Length must be the same as replicaCount
                      ## e.g:
                      ## loadBalancerAnnotations:
                      ##   - external-dns.alpha.kubernetes.io/hostname: broker1.external.example.com.
                      ##   - external-dns.alpha.kubernetes.io/hostname: broker2.external.example.com.
                      ##
                      loadBalancerAnnotations: []
                      ## @param externalAccess.broker.service.loadBalancerSourceRanges Address(es) that are allowed when service is LoadBalancer
                      ## ref: https://kubernetes.io/docs/tasks/access-application-cluster/configure-cloud-provider-firewall/#restrict-access-for-loadbalancer-service
                      ## e.g:
                      ## loadBalancerSourceRanges:
                      ## - 10.10.10.0/24
                      ##
                      loadBalancerSourceRanges: []
                      ## @param externalAccess.broker.service.allocateLoadBalancerNodePorts Whether to allocate node ports when service type is LoadBalancer
                      ## ref: https://kubernetes.io/docs/concepts/services-networking/service/#load-balancer-nodeport-allocation
                      ##
                      allocateLoadBalancerNodePorts: true
                      ## @param externalAccess.broker.service.nodePorts Array of node ports used for each Kafka broker. Length must be the same as replicaCount
                      ## e.g:
                      ## nodePorts:
                      ##   - 30001
                      ##   - 30002
                      ##
                      nodePorts: []
                      ## @param externalAccess.broker.service.externalIPs Use distinct service host IPs to configure Kafka external listener when service type is NodePort. Length must be the same as replicaCount
                      ## e.g:
                      ## externalIPs:
                      ##   - X.X.X.X
                      ##   - Y.Y.Y.Y
                      ##
                      externalIPs: []
                      ## @param externalAccess.broker.service.useHostIPs Use service host IPs to configure Kafka external listener when service type is NodePort
                      ##
                      useHostIPs: false
                      ## @param externalAccess.broker.service.usePodIPs using the MY_POD_IP address for external access.
                      ##
                      usePodIPs: false
                      ## @param externalAccess.broker.service.domain Domain or external ip used to configure Kafka external listener when service type is NodePort or ClusterIP
                      ## NodePort: If not specified, the container will try to get the kubernetes node external IP
                      ## ClusterIP: Must be specified, ingress IP or domain where tcp for external ports is configured
                      ##
                      domain: ""
                      ## @param externalAccess.broker.service.publishNotReadyAddresses Indicates that any agent which deals with endpoints for this Service should disregard any indications of ready/not-ready
                      ## ref: https://kubernetes.io/docs/reference/kubernetes-api/service-resources/service-v1/
                      ##
                      publishNotReadyAddresses: false
                      ## @param externalAccess.broker.service.labels Service labels for external access
                      ##
                      labels: {}
                      ## @param externalAccess.broker.service.annotations Service annotations for external access
                      ##
                      annotations: {}
                      ## @param externalAccess.broker.service.extraPorts Extra ports to expose in the Kafka external service
                      ##
                      extraPorts: []
                ## Network policies
                ## Ref: https://kubernetes.io/docs/concepts/services-networking/network-policies/
                ##
                networkPolicy:
                  ## @param networkPolicy.enabled Specifies whether a NetworkPolicy should be created
                  ##
                  enabled: true
                  ## @param networkPolicy.allowExternal Don't require client label for connections
                  ## When set to false, only pods with the correct client label will have network access to the port Redis&reg; is
                  ## listening on. When true, zookeeper accept connections from any source (with the correct destination port).
                  ##
                  allowExternal: true
                  ## @param networkPolicy.allowExternalEgress Allow the pod to access any range of port and all destinations.
                  ##
                  allowExternalEgress: true
                  ## @param networkPolicy.extraIngress [array] Add extra ingress rules to the NetworkPolicy
                  ## e.g:
                  ## extraIngress:
                  ##   - ports:
                  ##       - port: 1234
                  ##     from:
                  ##       - podSelector:
                  ##           - matchLabels:
                  ##               - role: frontend
                  ##       - podSelector:
                  ##           - matchExpressions:
                  ##               - key: role
                  ##                 operator: In
                  ##                 values:
                  ##                   - frontend
                  extraIngress: []
                  ## @param networkPolicy.extraEgress [array] Add extra ingress rules to the NetworkPolicy
                  ## e.g:
                  ## extraEgress:
                  ##   - ports:
                  ##       - port: 1234
                  ##     to:
                  ##       - podSelector:
                  ##           - matchLabels:
                  ##               - role: frontend
                  ##       - podSelector:
                  ##           - matchExpressions:
                  ##               - key: role
                  ##                 operator: In
                  ##                 values:
                  ##                   - frontend
                  ##
                  extraEgress: []
                  ## @param networkPolicy.ingressNSMatchLabels [object] Labels to match to allow traffic from other namespaces
                  ## @param networkPolicy.ingressNSPodMatchLabels [object] Pod labels to match to allow traffic from other namespaces
                  ##
                  ingressNSMatchLabels: {}
                  ingressNSPodMatchLabels: {}
                ## @section Volume Permissions parameters
                ##
                
                ## Init containers parameters:
                ## volumePermissions: Change the owner and group of the persistent volume(s) mountpoint(s) to 'runAsUser:fsGroup' on each node
                ##
                volumePermissions:
                  ## @param volumePermissions.enabled Enable init container that changes the owner and group of the persistent volume
                  ##
                  enabled: false
                  ## @param volumePermissions.image.registry [default: REGISTRY_NAME] Init container volume-permissions image registry
                  ## @param volumePermissions.image.repository [default: REPOSITORY_NAME/os-shell] Init container volume-permissions image repository
                  ## @skip volumePermissions.image.tag Init container volume-permissions image tag (immutable tags are recommended)
                  ## @param volumePermissions.image.digest Init container volume-permissions image digest in the way sha256:aa.... Please note this parameter, if set, will override the tag
                  ## @param volumePermissions.image.pullPolicy Init container volume-permissions image pull policy
                  ## @param volumePermissions.image.pullSecrets Init container volume-permissions image pull secrets
                  ##
                  image:
                    registry: docker.io
                    repository: bitnami/os-shell
                    tag: 12-debian-12-r22
                    digest: ""
                    pullPolicy: IfNotPresent
                    ## Optionally specify an array of imagePullSecrets.
                    ## Secrets must be manually created in the namespace.
                    ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
                    ## Example:
                    ## pullSecrets:
                    ##   - myRegistryKeySecretName
                    ##
                    pullSecrets: []
                  ## Init container resource requests and limits
                  ## ref: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
                  ## @param volumePermissions.resourcesPreset Set container resources according to one common preset (allowed values: none, nano, micro, small, medium, large, xlarge, 2xlarge). This is ignored if volumePermissions.resources is set (volumePermissions.resources is recommended for production).
                  ## More information: https://github.com/bitnami/charts/blob/main/bitnami/common/templates/_resources.tpl#L15
                  ##
                  resourcesPreset: "nano"
                  ## @param volumePermissions.resources Set container requests and limits for different resources like CPU or memory (essential for production workloads)
                  ## Example:
                  ## resources:
                  ##   requests:
                  ##     cpu: 2
                  ##     memory: 512Mi
                  ##   limits:
                  ##     cpu: 3
                  ##     memory: 1024Mi
                  ##
                  resources: {}
                  ## Init container' Security Context
                  ## Note: the chown of the data folder is done to containerSecurityContext.runAsUser
                  ## and not the below volumePermissions.containerSecurityContext.runAsUser
                  ## @param volumePermissions.containerSecurityContext.seLinuxOptions [object,nullable] Set SELinux options in container
                  ## @param volumePermissions.containerSecurityContext.runAsUser User ID for the init container
                  ##
                  containerSecurityContext:
                    seLinuxOptions: {}
                    runAsUser: 0
                ## @section Other Parameters
                ##
                
                ## ServiceAccount for Kafka
                ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/
                ##
                serviceAccount:
                  ## @param serviceAccount.create Enable creation of ServiceAccount for Kafka pods
                  ##
                  create: true
                  ## @param serviceAccount.name The name of the service account to use. If not set and `create` is `true`, a name is generated
                  ## If not set and create is true, a name is generated using the kafka.serviceAccountName template
                  ##
                  name: ""
                  ## @param serviceAccount.automountServiceAccountToken Allows auto mount of ServiceAccountToken on the serviceAccount created
                  ## Can be set to false if pods using this serviceAccount do not need to use K8s API
                  ##
                  automountServiceAccountToken: false
                  ## @param serviceAccount.annotations Additional custom annotations for the ServiceAccount
                  ##
                  annotations: {}
                ## Role Based Access Control
                ## ref: https://kubernetes.io/docs/admin/authorization/rbac/
                ##
                rbac:
                  ## @param rbac.create Whether to create & use RBAC resources or not
                  ## binding Kafka ServiceAccount to a role
                  ## that allows Kafka pods querying the K8s API
                  ##
                  create: false
                ## @section Metrics parameters
                ##
                
                ## Prometheus Exporters / Metrics
                ##
                metrics:
                  ## Prometheus JMX exporter: exposes the majority of Kafka metrics
                  ##
                  jmx:
                    ## @param metrics.jmx.enabled Whether or not to expose JMX metrics to Prometheus
                    ##
                    enabled: false
                    ## @param metrics.jmx.kafkaJmxPort JMX port where the exporter will collect metrics, exposed in the Kafka container.
                    ##
                    kafkaJmxPort: 5555
                    ## Bitnami JMX exporter image
                    ## ref: https://hub.docker.com/r/bitnami/jmx-exporter/tags/
                    ## @param metrics.jmx.image.registry [default: REGISTRY_NAME] JMX exporter image registry
                    ## @param metrics.jmx.image.repository [default: REPOSITORY_NAME/jmx-exporter] JMX exporter image repository
                    ## @skip metrics.jmx.image.tag JMX exporter image tag (immutable tags are recommended)
                    ## @param metrics.jmx.image.digest JMX exporter image digest in the way sha256:aa.... Please note this parameter, if set, will override the tag
                    ## @param metrics.jmx.image.pullPolicy JMX exporter image pull policy
                    ## @param metrics.jmx.image.pullSecrets Specify docker-registry secret names as an array
                    ##
                    image:
                      registry: docker.io
                      repository: bitnami/jmx-exporter
                      tag: 1.0.1-debian-12-r1
                      digest: ""
                      ## Specify a imagePullPolicy
                      ## Defaults to 'Always' if image tag is 'latest', else set to 'IfNotPresent'
                      ## ref: https://kubernetes.io/docs/concepts/containers/images/#pre-pulled-images
                      ##
                      pullPolicy: IfNotPresent
                      ## Optionally specify an array of imagePullSecrets (secrets must be manually created in the namespace)
                      ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
                      ## e.g:
                      ## pullSecrets:
                      ##   - myRegistryKeySecretName
                      ##
                      pullSecrets: []
                    ## Prometheus JMX exporter containers' Security Context
                    ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-container
                    ## @param metrics.jmx.containerSecurityContext.enabled Enable Prometheus JMX exporter containers' Security Context
                    ## @param metrics.jmx.containerSecurityContext.seLinuxOptions [object,nullable] Set SELinux options in container
                    ## @param metrics.jmx.containerSecurityContext.runAsUser Set containers' Security Context runAsUser
                    ## @param metrics.jmx.containerSecurityContext.runAsGroup Set containers' Security Context runAsGroup
                    ## @param metrics.jmx.containerSecurityContext.runAsNonRoot Set Prometheus JMX exporter containers' Security Context runAsNonRoot
                    ## @param metrics.jmx.containerSecurityContext.allowPrivilegeEscalation Set Prometheus JMX exporter containers' Security Context allowPrivilegeEscalation
                    ## @param metrics.jmx.containerSecurityContext.readOnlyRootFilesystem Set Prometheus JMX exporter containers' Security Context readOnlyRootFilesystem
                    ## @param metrics.jmx.containerSecurityContext.capabilities.drop Set Prometheus JMX exporter containers' Security Context capabilities to be dropped
                    ## e.g:
                    ##   containerSecurityContext:
                    ##     enabled: true
                    ##     capabilities:
                    ##       drop: ["NET_RAW"]
                    ##     readOnlyRootFilesystem: true
                    ##
                    containerSecurityContext:
                      enabled: true
                      seLinuxOptions: {}
                      runAsUser: 1001
                      runAsGroup: 1001
                      runAsNonRoot: true
                      allowPrivilegeEscalation: false
                      readOnlyRootFilesystem: true
                      capabilities:
                        drop: ["ALL"]
                    ## @param metrics.jmx.containerPorts.metrics Prometheus JMX exporter metrics container port
                    ##
                    containerPorts:
                      metrics: 5556
                    ## Prometheus JMX exporter resource requests and limits
                    ## ref: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
                    ## @param metrics.jmx.resourcesPreset Set container resources according to one common preset (allowed values: none, nano, micro, small, medium, large, xlarge, 2xlarge). This is ignored if metrics.jmx.resources is set (metrics.jmx.resources is recommended for production).
                    ## More information: https://github.com/bitnami/charts/blob/main/bitnami/common/templates/_resources.tpl#L15
                    ##
                    resourcesPreset: "micro"
                    ## @param metrics.jmx.resources Set container requests and limits for different resources like CPU or memory (essential for production workloads)
                    ## Example:
                    ## resources:
                    ##   requests:
                    ##     cpu: 2
                    ##     memory: 512Mi
                    ##   limits:
                    ##     cpu: 3
                    ##     memory: 1024Mi
                    ##
                    resources: {}
                    ## Prometheus JMX exporter service configuration
                    ##
                    service:
                      ## @param metrics.jmx.service.ports.metrics Prometheus JMX exporter metrics service port
                      ##
                      ports:
                        metrics: 5556
                      ## @param metrics.jmx.service.clusterIP Static clusterIP or None for headless services
                      ## ref: https://kubernetes.io/docs/concepts/services-networking/service/#choosing-your-own-ip-address
                      ##
                      clusterIP: ""
                      ## @param metrics.jmx.service.sessionAffinity Control where client requests go, to the same pod or round-robin
                      ## Values: ClientIP or None
                      ## ref: https://kubernetes.io/docs/concepts/services-networking/service/
                      ##
                      sessionAffinity: None
                      ## @param metrics.jmx.service.annotations [object] Annotations for the Prometheus JMX exporter service
                      ##
                      annotations:
                        prometheus.io/scrape: "true"
                        prometheus.io/port: "{{ .Values.metrics.jmx.service.ports.metrics }}"
                        prometheus.io/path: "/"
                    ## @param metrics.jmx.whitelistObjectNames Allows setting which JMX objects you want to expose to via JMX stats to JMX exporter
                    ## Only whitelisted values will be exposed via JMX exporter. They must also be exposed via Rules. To expose all metrics
                    ## (warning its crazy excessive and they aren't formatted in a prometheus style) (1) `whitelistObjectNames: []`
                    ## (2) commented out above `overrideConfig`.
                    ##
                    whitelistObjectNames:
                      - kafka.controller:*
                      - kafka.server:*
                      - java.lang:*
                      - kafka.network:*
                      - kafka.log:*
                    ## @param metrics.jmx.config [string] Configuration file for JMX exporter
                    ## Specify content for jmx-kafka-prometheus.yml. Evaluated as a template
                    ##
                    ## Credits to the incubator/kafka chart for the JMX configuration.
                    ## https://github.com/helm/charts/tree/master/incubator/kafka
                    ##
                    config: |-
                      jmxUrl: service:jmx:rmi:///jndi/rmi://127.0.0.1:{{ .Values.metrics.jmx.kafkaJmxPort }}/jmxrmi
                      lowercaseOutputName: true
                      lowercaseOutputLabelNames: true
                      ssl: false
                      {{- if .Values.metrics.jmx.whitelistObjectNames }}
                      whitelistObjectNames: ["{{ join "\",\"" .Values.metrics.jmx.whitelistObjectNames }}"]
                      {{- end }}
                    ## @param metrics.jmx.existingConfigmap Name of existing ConfigMap with JMX exporter configuration
                    ## NOTE: This will override metrics.jmx.config
                    ##
                    existingConfigmap: ""
                    ## @param metrics.jmx.extraRules  Add extra rules to JMX exporter configuration
                    ## e.g:
                    ## extraRules: |-
                    ##  - pattern: kafka.server<type=socket-server-metrics, listener=(.+), networkProcessor=(.+)><>(connection-count)
                    ##    name: kafka_server_socket_server_metrics_$3
                    ##    labels:
                    ##      listener: $1
                    ##
                    extraRules: ""
                  ## Prometheus Operator ServiceMonitor configuration
                  ##
                  serviceMonitor:
                    ## @param metrics.serviceMonitor.enabled if `true`, creates a Prometheus Operator ServiceMonitor (requires `metrics.jmx.enabled` to be `true`)
                    ##
                    enabled: false
                    ## @param metrics.serviceMonitor.namespace Namespace in which Prometheus is running
                    ##
                    namespace: ""
                    ## @param metrics.serviceMonitor.interval Interval at which metrics should be scraped
                    ## ref: https://github.com/coreos/prometheus-operator/blob/master/Documentation/api.md#endpoint
                    ##
                    interval: ""
                    ## @param metrics.serviceMonitor.scrapeTimeout Timeout after which the scrape is ended
                    ## ref: https://github.com/coreos/prometheus-operator/blob/master/Documentation/api.md#endpoint
                    ##
                    scrapeTimeout: ""
                    ## @param metrics.serviceMonitor.labels Additional labels that can be used so ServiceMonitor will be discovered by Prometheus
                    ##
                    labels: {}
                    ## @param metrics.serviceMonitor.selector Prometheus instance selector labels
                    ## ref: https://github.com/bitnami/charts/tree/main/bitnami/prometheus-operator#prometheus-configuration
                    ##
                    selector: {}
                    ## @param metrics.serviceMonitor.relabelings RelabelConfigs to apply to samples before scraping
                    ##
                    relabelings: []
                    ## @param metrics.serviceMonitor.metricRelabelings MetricRelabelConfigs to apply to samples before ingestion
                    ##
                    metricRelabelings: []
                    ## @param metrics.serviceMonitor.honorLabels Specify honorLabels parameter to add the scrape endpoint
                    ##
                    honorLabels: false
                    ## @param metrics.serviceMonitor.jobLabel The name of the label on the target service to use as the job name in prometheus.
                    ##
                    jobLabel: ""
                  prometheusRule:
                    ## @param metrics.prometheusRule.enabled if `true`, creates a Prometheus Operator PrometheusRule (requires `metrics.jmx.enabled` to be `true`)
                    ##
                    enabled: false
                    ## @param metrics.prometheusRule.namespace Namespace in which Prometheus is running
                    ##
                    namespace: ""
                    ## @param metrics.prometheusRule.labels Additional labels that can be used so PrometheusRule will be discovered by Prometheus
                    ##
                    labels: {}
                    ## @param metrics.prometheusRule.groups Prometheus Rule Groups for Kafka
                    ##
                    groups: []
                
                ## @section Kafka provisioning parameters
                ##
                
                ## Kafka provisioning
                ##
                provisioning:
                  ## @param provisioning.enabled Enable kafka provisioning Job
                  ##
                  enabled: true
                  ## @param provisioning.automountServiceAccountToken Mount Service Account token in pod
                  ##
                  automountServiceAccountToken: false
                  ## @param provisioning.numPartitions Default number of partitions for topics when unspecified
                  ##
                  numPartitions: 3
                  ## @param provisioning.replicationFactor Default replication factor for topics when unspecified
                  ##
                  replicationFactor: 1
                  ## @param provisioning.topics Kafka topics to provision
                  ## - name: topic-name
                  ##   partitions: 1
                  ##   replicationFactor: 1
                  ##   ## https://kafka.apache.org/documentation/#topicconfigs
                  ##   config:
                  ##     max.message.bytes: 64000
                  ##     flush.messages: 1
                  ##
                  topics:
                    - name: cve
                      partitions: 3
                      replicationFactor: 2
                      ## https://kafka.apache.org/documentation/#topicconfigs
                      config:
                        max.message.bytes: 64000
                        flush.messages: 1
                  ## @param provisioning.nodeSelector Node labels for pod assignment
                  ## Ref: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/
                  ##
                  nodeSelector: {}
                  ## @param provisioning.tolerations Tolerations for pod assignment
                  ## Ref: https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/
                  ##
                  tolerations: []
                  ## @param provisioning.extraProvisioningCommands Extra commands to run to provision cluster resources
                  ## - echo "Allow user to consume from any topic"
                  ## - >-
                  ##   /opt/bitnami/kafka/bin/kafka-acls.sh
                  ##   --bootstrap-server $KAFKA_SERVICE
                  ##   --command-config $CLIENT_CONF
                  ##   --add
                  ##   --allow-principal User:user
                  ##   --consumer --topic '*'
                  ## - "/opt/bitnami/kafka/bin/kafka-acls.sh
                  ##      --bootstrap-server $KAFKA_SERVICE
                  ##      --command-config $CLIENT_CONF
                  ##      --list"
                  ##
                  extraProvisioningCommands: []
                  ## @param provisioning.parallel Number of provisioning commands to run at the same time
                  ##
                  parallel: 1
                  ## @param provisioning.preScript Extra bash script to run before topic provisioning. $CLIENT_CONF is path to properties file with most needed configurations
                  ##
                  preScript: ""
                  ## @param provisioning.postScript Extra bash script to run after topic provisioning. $CLIENT_CONF is path to properties file with most needed configurations
                  ##
                  postScript: ""
                  ## Auth Configuration for kafka provisioning Job
                  ##
                  auth:
                    ## TLS configuration for kafka provisioning Job
                    ##
                    tls:
                      ## @param provisioning.auth.tls.type Format to use for TLS certificates. Allowed types: `JKS` and `PEM`.
                      ## Note: ignored if auth.tls.client.protocol different from one of these values: "SSL" "SASL_SSL"
                      ##
                      type: jks
                      ## @param provisioning.auth.tls.certificatesSecret Existing secret containing the TLS certificates for the Kafka provisioning Job.
                      ## When using 'jks' format for certificates, the secret should contain a truststore and a keystore.
                      ## When using 'pem' format for certificates, the secret should contain one of the following:
                      ## 1. A public CA certificate, a public certificate and one private key.
                      ## 2. A truststore and a keystore in PEM format
                      ## If caCert is set, option 1 will be taken, otherwise option 2.
                      ##
                      certificatesSecret: ""
                      ## @param provisioning.auth.tls.cert The secret key from the certificatesSecret if 'cert' key different from the default (tls.crt)
                      ##
                      cert: tls.crt
                      ## @param provisioning.auth.tls.key The secret key from the certificatesSecret if 'key' key different from the default (tls.key)
                      ##
                      key: tls.key
                      ## @param provisioning.auth.tls.caCert The secret key from the certificatesSecret if 'caCert' key different from the default (ca.crt)
                      ##
                      caCert: ca.crt
                      ## @param provisioning.auth.tls.keystore The secret key from the certificatesSecret if 'keystore' key different from the default (keystore.jks)
                      ##
                      keystore: keystore.jks
                      ## @param provisioning.auth.tls.truststore The secret key from the certificatesSecret if 'truststore' key different from the default (truststore.jks)
                      ##
                      truststore: truststore.jks
                      ## @param provisioning.auth.tls.passwordsSecret Name of the secret containing passwords to access the JKS files or PEM key when they are password-protected.
                      ## It should contain two keys called "keystore-password" and "truststore-password", or "key-password" if using a password-protected PEM key.
                      ##
                      passwordsSecret: ""
                      ## @param provisioning.auth.tls.keyPasswordSecretKey The secret key from the passwordsSecret if 'keyPasswordSecretKey' key different from the default (key-password)
                      ## Note: must not be used if `passwordsSecret` is not defined.
                      ##
                      keyPasswordSecretKey: key-password
                      ## @param provisioning.auth.tls.keystorePasswordSecretKey The secret key from the passwordsSecret if 'keystorePasswordSecretKey' key different from the default (keystore-password)
                      ## Note: must not be used if `passwordsSecret` is not defined.
                      ##
                      keystorePasswordSecretKey: keystore-password
                      ## @param provisioning.auth.tls.truststorePasswordSecretKey The secret key from the passwordsSecret if 'truststorePasswordSecretKey' key different from the default (truststore-password)
                      ## Note: must not be used if `passwordsSecret` is not defined.
                      ##
                      truststorePasswordSecretKey: truststore-password
                      ## @param provisioning.auth.tls.keyPassword Password to access the password-protected PEM key if necessary. Ignored if 'passwordsSecret' is provided.
                      ##
                      keyPassword: ""
                      ## @param provisioning.auth.tls.keystorePassword Password to access the JKS keystore. Ignored if 'passwordsSecret' is provided.
                      ##
                      keystorePassword: ""
                      ## @param provisioning.auth.tls.truststorePassword Password to access the JKS truststore. Ignored if 'passwordsSecret' is provided.
                      ##
                      truststorePassword: ""
                  ## @param provisioning.command Override provisioning container command
                  ##
                  command: []
                  ## @param provisioning.args Override provisioning container arguments
                  ##
                  args: []
                  ## @param provisioning.extraEnvVars Extra environment variables to add to the provisioning pod
                  ## e.g:
                  ## extraEnvVars:
                  ##   - name: KAFKA_CFG_BACKGROUND_THREADS
                  ##     value: "10"
                  ##
                  extraEnvVars: []
                  ## @param provisioning.extraEnvVarsCM ConfigMap with extra environment variables
                  ##
                  extraEnvVarsCM: ""
                  ## @param provisioning.extraEnvVarsSecret Secret with extra environment variables
                  ##
                  extraEnvVarsSecret: ""
                  ## @param provisioning.podAnnotations Extra annotations for Kafka provisioning pods
                  ##
                  podAnnotations: {}
                  ## @param provisioning.podLabels Extra labels for Kafka provisioning pods
                  ## Ref: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
                  ##
                  podLabels: {}
                  ## Kafka provisioning pods ServiceAccount
                  ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/
                  ##
                  serviceAccount:
                    ## @param provisioning.serviceAccount.create Enable creation of ServiceAccount for Kafka provisioning pods
                    ##
                    create: true
                    ## @param provisioning.serviceAccount.name The name of the service account to use. If not set and `create` is `true`, a name is generated
                    ## If not set and create is true, a name is generated using the provisioning.serviceAccount.name template
                    ##
                    name: ""
                    ## @param provisioning.serviceAccount.automountServiceAccountToken Allows auto mount of ServiceAccountToken on the serviceAccount created
                    ## Can be set to false if pods using this serviceAccount do not need to use K8s API
                    ##
                    automountServiceAccountToken: false
                  ## Kafka provisioning resource requests and limits
                  ## ref: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
                  ## @param provisioning.resourcesPreset Set container resources according to one common preset (allowed values: none, nano, micro, small, medium, large, xlarge, 2xlarge). This is ignored if provisioning.resources is set (provisioning.resources is recommended for production).
                  ## More information: https://github.com/bitnami/charts/blob/main/bitnami/common/templates/_resources.tpl#L15
                  ##
                  resourcesPreset: "micro"
                  ## @param provisioning.resources Set container requests and limits for different resources like CPU or memory (essential for production workloads)
                  ## Example:
                  ## resources:
                  ##   requests:
                  ##     cpu: 2
                  ##     memory: 512Mi
                  ##   limits:
                  ##     cpu: 3
                  ##     memory: 1024Mi
                  ##
                  resources: {}
                  ## Kafka provisioning pods' Security Context
                  ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-pod
                  ## @param provisioning.podSecurityContext.enabled Enable security context for the pods
                  ## @param provisioning.podSecurityContext.fsGroupChangePolicy Set filesystem group change policy
                  ## @param provisioning.podSecurityContext.sysctls Set kernel settings using the sysctl interface
                  ## @param provisioning.podSecurityContext.supplementalGroups Set filesystem extra groups
                  ## @param provisioning.podSecurityContext.fsGroup Set Kafka provisioning pod's Security Context fsGroup
                  ## @param provisioning.podSecurityContext.seccompProfile.type Set Kafka provisioning pod's Security Context seccomp profile
                  ##
                  podSecurityContext:
                    enabled: true
                    fsGroupChangePolicy: Always
                    sysctls: []
                    supplementalGroups: []
                    fsGroup: 1001
                    seccompProfile:
                      type: "RuntimeDefault"
                  ## Kafka provisioning containers' Security Context
                  ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-container
                  ## @param provisioning.containerSecurityContext.enabled Enable Kafka provisioning containers' Security Context
                  ## @param provisioning.containerSecurityContext.seLinuxOptions [object,nullable] Set SELinux options in container
                  ## @param provisioning.containerSecurityContext.runAsUser Set containers' Security Context runAsUser
                  ## @param provisioning.containerSecurityContext.runAsGroup Set containers' Security Context runAsGroup
                  ## @param provisioning.containerSecurityContext.runAsNonRoot Set Kafka provisioning containers' Security Context runAsNonRoot
                  ## @param provisioning.containerSecurityContext.allowPrivilegeEscalation Set Kafka provisioning containers' Security Context allowPrivilegeEscalation
                  ## @param provisioning.containerSecurityContext.readOnlyRootFilesystem Set Kafka provisioning containers' Security Context readOnlyRootFilesystem
                  ## @param provisioning.containerSecurityContext.capabilities.drop Set Kafka provisioning containers' Security Context capabilities to be dropped
                  ## e.g:
                  ##   containerSecurityContext:
                  ##     enabled: true
                  ##     capabilities:
                  ##       drop: ["NET_RAW"]
                  ##     readOnlyRootFilesystem: true
                  ##
                  containerSecurityContext:
                    enabled: true
                    seLinuxOptions: {}
                    runAsUser: 1001
                    runAsGroup: 1001
                    runAsNonRoot: true
                    allowPrivilegeEscalation: false
                    readOnlyRootFilesystem: true
                    capabilities:
                      drop: ["ALL"]
                  ## @param provisioning.schedulerName Name of the k8s scheduler (other than default) for kafka provisioning
                  ## ref: https://kubernetes.io/docs/tasks/administer-cluster/configure-multiple-schedulers/
                  ##
                  schedulerName: ""
                  ## @param provisioning.enableServiceLinks Whether information about services should be injected into pod's environment variable
                  ## The environment variables injected by service links are not used, but can lead to slow kafka boot times or slow running of the scripts when there are many services in the current namespace.
                  ## If you experience slow pod startups or slow running of the scripts you probably want to set this to `false`.
                  ##
                  enableServiceLinks: true
                  ## @param provisioning.extraVolumes Optionally specify extra list of additional volumes for the Kafka provisioning pod(s)
                  ## e.g:
                  ## extraVolumes:
                  ##   - name: kafka-jaas
                  ##     secret:
                  ##       secretName: kafka-jaas
                  ##
                  extraVolumes: []
                  ## @param provisioning.extraVolumeMounts Optionally specify extra list of additional volumeMounts for the Kafka provisioning container(s)
                  ## extraVolumeMounts:
                  ##   - name: kafka-jaas
                  ##     mountPath: /bitnami/kafka/config/kafka_jaas.conf
                  ##     subPath: kafka_jaas.conf
                  ##
                  extraVolumeMounts: []
                  ## @param provisioning.sidecars Add additional sidecar containers to the Kafka provisioning pod(s)
                  ## e.g:
                  ## sidecars:
                  ##   - name: your-image-name
                  ##     image: your-image
                  ##     imagePullPolicy: Always
                  ##     ports:
                  ##       - name: portname
                  ##         containerPort: 1234
                  ##
                  sidecars: []
                  ## @param provisioning.initContainers Add additional Add init containers to the Kafka provisioning pod(s)
                  ## e.g:
                  ## initContainers:
                  ##   - name: your-image-name
                  ##     image: your-image
                  ##     imagePullPolicy: Always
                  ##     ports:
                  ##       - name: portname
                  ##         containerPort: 1234
                  ##
                  initContainers: []
                  ## @param provisioning.waitForKafka If true use an init container to wait until kafka is ready before starting provisioning
                  ##
                  waitForKafka: true
                  ## @param provisioning.useHelmHooks Flag to indicate usage of helm hooks
                  useHelmHooks: true
                ## @section KRaft chart parameters
                
                ## KRaft configuration
                ## Kafka mode without Zookeeper. Kafka nodes can work as controllers in this mode.
                ##
                kraft:
                  ## @param kraft.enabled Switch to enable or disable the KRaft mode for Kafka
                  ##
                  enabled: true
                  ## @param kraft.existingClusterIdSecret Name of the secret containing the cluster ID for the Kafka KRaft cluster. This is incompatible with the clusterId parameter. If both are set, the existingClusterIdSecret will be used
                  existingClusterIdSecret: ""
                  ## @param kraft.clusterId Kafka Kraft cluster ID. If not set, a random cluster ID will be generated the first time Kraft is initialized.
                  ## NOTE: Already initialized Kafka nodes will use cluster ID stored in their persisted storage.
                  ## If reusing existing PVCs or migrating from Zookeeper mode, make sure the cluster ID is set matching the stored cluster ID, otherwise new nodes will fail to join the cluster.
                  ## In case the cluster ID stored in the secret does not match the value stored in /bitnami/kafka/data/meta.properties, remove the secret and upgrade the chart setting the correct value.
                  ##
                  clusterId: ""
                  ## @param kraft.controllerQuorumVoters Override the Kafka controller quorum voters of the Kafka Kraft cluster. If not set, it will be automatically configured to use all controller-elegible nodes.
                  ##
                  controllerQuorumVoters: ""
                ## @section ZooKeeper chart parameters
                ##
                ## @param zookeeperChrootPath Path which puts data under some path in the global ZooKeeper namespace
                ## ref: https://kafka.apache.org/documentation/#brokerconfigs_zookeeper.connect
                ##
                zookeeperChrootPath: ""
                ## ZooKeeper chart configuration
                ## https://github.com/bitnami/charts/blob/main/bitnami/zookeeper/values.yaml
                ##
                zookeeper:
                  ## @param zookeeper.enabled Switch to enable or disable the ZooKeeper helm chart. Must be false if you use KRaft mode.
                  ##
                  enabled: false
                  ## @param zookeeper.replicaCount Number of ZooKeeper nodes
                  ##
                  replicaCount: 1
                  ## ZooKeeper authentication
                  ##
                  auth:
                    client:
                      ## @param zookeeper.auth.client.enabled Enable ZooKeeper auth
                      ##
                      enabled: false
                      ## @param zookeeper.auth.client.clientUser User that will use ZooKeeper client (zkCli.sh) to authenticate. Must exist in the serverUsers comma-separated list.
                      ##
                      clientUser: ""
                      ## @param zookeeper.auth.client.clientPassword Password that will use ZooKeeper client (zkCli.sh) to authenticate. Must exist in the serverPasswords comma-separated list.
                      ##
                      clientPassword: ""
                      ## @param zookeeper.auth.client.serverUsers Comma, semicolon or whitespace separated list of user to be created. Specify them as a string, for example: "user1,user2,admin"
                      ##
                      serverUsers: ""
                      ## @param zookeeper.auth.client.serverPasswords Comma, semicolon or whitespace separated list of passwords to assign to users when created. Specify them as a string, for example: "pass4user1, pass4user2, pass4admin"
                      ##
                      serverPasswords: ""
                  ## ZooKeeper Persistence parameters
                  ## ref: https://kubernetes.io/docs/concepts/storage/persistent-volumes/
                  ## @param zookeeper.persistence.enabled Enable persistence on ZooKeeper using PVC(s)
                  ## @param zookeeper.persistence.storageClass Persistent Volume storage class
                  ## @param zookeeper.persistence.accessModes Persistent Volume access modes
                  ## @param zookeeper.persistence.size Persistent Volume size
                  ##
                  persistence:
                    enabled: true
                    storageClass: ""
                    accessModes:
                      - ReadWriteOnce
                    size: 8Gi
                ## External Zookeeper Configuration
                ##
                externalZookeeper:
                  ## @param externalZookeeper.servers List of external zookeeper servers to use. Typically used in combination with 'zookeeperChrootPath'. Must be empty if you use KRaft mode.
                  ##
                  servers: []
            EOT,
        ]
      [32m+[0m[0m verify                     = false
      [32m+[0m[0m version                    = "29.3.4"
      [32m+[0m[0m wait                       = false
      [32m+[0m[0m wait_for_jobs              = false
    }

[1m  # helm_release.postgres_chart[0m will be created
[0m  [32m+[0m[0m resource "helm_release" "postgres_chart" {
      [32m+[0m[0m atomic                     = false
      [32m+[0m[0m chart                      = "./charts/bitnami-postgres"
      [32m+[0m[0m cleanup_on_fail            = false
      [32m+[0m[0m create_namespace           = false
      [32m+[0m[0m dependency_update          = false
      [32m+[0m[0m disable_crd_hooks          = false
      [32m+[0m[0m disable_openapi_validation = false
      [32m+[0m[0m disable_webhooks           = false
      [32m+[0m[0m force_update               = false
      [32m+[0m[0m id                         = (known after apply)
      [32m+[0m[0m lint                       = false
      [32m+[0m[0m manifest                   = (known after apply)
      [32m+[0m[0m max_history                = 0
      [32m+[0m[0m metadata                   = (known after apply)
      [32m+[0m[0m name                       = "postgresql"
      [32m+[0m[0m namespace                  = "cve-consumer"
      [32m+[0m[0m pass_credentials           = false
      [32m+[0m[0m recreate_pods              = false
      [32m+[0m[0m render_subchart_notes      = true
      [32m+[0m[0m replace                    = false
      [32m+[0m[0m reset_values               = false
      [32m+[0m[0m reuse_values               = false
      [32m+[0m[0m skip_crds                  = false
      [32m+[0m[0m status                     = "deployed"
      [32m+[0m[0m timeout                    = 300
      [32m+[0m[0m values                     = [
          [32m+[0m[0m <<-EOT
                # Copyright Broadcom, Inc. All Rights Reserved.
                # SPDX-License-Identifier: APACHE-2.0
                
                ## @section Global parameters
                ## Please, note that this will override the parameters, including dependencies, configured to use the global value
                ##
                global:
                  ## @param global.imageRegistry Global Docker image registry
                  ##
                  imageRegistry: ""
                  ## @param global.imagePullSecrets Global Docker registry secret names as an array
                  ## e.g.
                  ## imagePullSecrets:
                  ##   - myRegistryKeySecretName
                  ##
                  imagePullSecrets: []
                  ## @param global.storageClass Global StorageClass for Persistent Volume(s)
                  ##
                  storageClass: ""
                  postgresql:
                    ## @param global.postgresql.auth.postgresPassword Password for the "postgres" admin user (overrides `auth.postgresPassword`)
                    ## @param global.postgresql.auth.username Name for a custom user to create (overrides `auth.username`)
                    ## @param global.postgresql.auth.password Password for the custom user to create (overrides `auth.password`)
                    ## @param global.postgresql.auth.database Name for a custom database to create (overrides `auth.database`)
                    ## @param global.postgresql.auth.existingSecret Name of existing secret to use for PostgreSQL credentials (overrides `auth.existingSecret`).
                    ## @param global.postgresql.auth.secretKeys.adminPasswordKey Name of key in existing secret to use for PostgreSQL credentials (overrides `auth.secretKeys.adminPasswordKey`). Only used when `global.postgresql.auth.existingSecret` is set.
                    ## @param global.postgresql.auth.secretKeys.userPasswordKey Name of key in existing secret to use for PostgreSQL credentials (overrides `auth.secretKeys.userPasswordKey`). Only used when `global.postgresql.auth.existingSecret` is set.
                    ## @param global.postgresql.auth.secretKeys.replicationPasswordKey Name of key in existing secret to use for PostgreSQL credentials (overrides `auth.secretKeys.replicationPasswordKey`). Only used when `global.postgresql.auth.existingSecret` is set.
                    ##
                    auth:
                      postgresPassword: "git"
                      username: "web_app"
                      password: "vin123"
                      database: "cve"
                      existingSecret: ""
                      secretKeys:
                        adminPasswordKey: ""
                        userPasswordKey: ""
                        replicationPasswordKey: ""
                    ## @param global.postgresql.service.ports.postgresql PostgreSQL service port (overrides `service.ports.postgresql`)
                    ##
                    service:
                      ports:
                        postgresql: "5432"
                  ## Compatibility adaptations for Kubernetes platforms
                  ##
                  compatibility:
                    ## Compatibility adaptations for Openshift
                    ##
                    openshift:
                      ## @param global.compatibility.openshift.adaptSecurityContext Adapt the securityContext sections of the deployment to make them compatible with Openshift restricted-v2 SCC: remove runAsUser, runAsGroup and fsGroup and let the platform use their allowed default IDs. Possible values: auto (apply if the detected running cluster is Openshift), force (perform the adaptation always), disabled (do not perform adaptation)
                      ##
                      adaptSecurityContext: auto
                ## @section Common parameters
                ##
                
                ## @param kubeVersion Override Kubernetes version
                ##
                kubeVersion: ""
                ## @param nameOverride String to partially override common.names.fullname template (will maintain the release name)
                ##
                nameOverride: ""
                ## @param fullnameOverride String to fully override common.names.fullname template
                ##
                fullnameOverride: ""
                ## @param clusterDomain Kubernetes Cluster Domain
                ##
                clusterDomain: cluster.local
                ## @param extraDeploy Array of extra objects to deploy with the release (evaluated as a template)
                ##
                extraDeploy: []
                ## @param commonLabels Add labels to all the deployed resources
                ##
                commonLabels: {}
                ## @param commonAnnotations Add annotations to all the deployed resources
                ##
                commonAnnotations: {}
                ## Enable diagnostic mode in the statefulset
                ##
                diagnosticMode:
                  ## @param diagnosticMode.enabled Enable diagnostic mode (all probes will be disabled and the command will be overridden)
                  ##
                  enabled: false
                  ## @param diagnosticMode.command Command to override all containers in the statefulset
                  ##
                  command:
                    - sleep
                  ## @param diagnosticMode.args Args to override all containers in the statefulset
                  ##
                  args:
                    - infinity
                ## @section PostgreSQL common parameters
                ##
                
                ## Bitnami PostgreSQL image version
                ## ref: https://hub.docker.com/r/bitnami/postgresql/tags/
                ## @param image.registry [default: REGISTRY_NAME] PostgreSQL image registry
                ## @param image.repository [default: REPOSITORY_NAME/postgresql] PostgreSQL image repository
                ## @skip image.tag PostgreSQL image tag (immutable tags are recommended)
                ## @param image.digest PostgreSQL image digest in the way sha256:aa.... Please note this parameter, if set, will override the tag
                ## @param image.pullPolicy PostgreSQL image pull policy
                ## @param image.pullSecrets Specify image pull secrets
                ## @param image.debug Specify if debug values should be set
                ##
                image:
                  registry: docker.io
                  repository: bitnami/postgresql
                  tag: 16.3.0-debian-12-r14
                  digest: ""
                  ## Specify a imagePullPolicy
                  ## Defaults to 'Always' if image tag is 'latest', else set to 'IfNotPresent'
                  ## ref: https://kubernetes.io/docs/concepts/containers/images/#pre-pulled-images
                  ##
                  pullPolicy: IfNotPresent
                  ## Optionally specify an array of imagePullSecrets.
                  ## Secrets must be manually created in the namespace.
                  ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
                  ## Example:
                  ## pullSecrets:
                  ##   - myRegistryKeySecretName
                  ##
                  pullSecrets: []
                  ## Set to true if you would like to see extra information on logs
                  ##
                  debug: false
                ## Authentication parameters
                ## ref: https://github.com/bitnami/containers/tree/main/bitnami/postgresql#setting-the-root-password-on-first-run
                ## ref: https://github.com/bitnami/containers/tree/main/bitnami/postgresql#creating-a-database-on-first-run
                ## ref: https://github.com/bitnami/containers/tree/main/bitnami/postgresql#creating-a-database-user-on-first-run
                ##
                auth:
                  ## @param auth.enablePostgresUser Assign a password to the "postgres" admin user. Otherwise, remote access will be blocked for this user
                  ##
                  enablePostgresUser: true
                  ## @param auth.postgresPassword Password for the "postgres" admin user. Ignored if `auth.existingSecret` is provided
                  ##
                  postgresPassword: ""
                  ## @param auth.username Name for a custom user to create
                  ##
                  username: ""
                  ## @param auth.password Password for the custom user to create. Ignored if `auth.existingSecret` is provided
                  ##
                  password: ""
                  ## @param auth.database Name for a custom database to create
                  ##
                  database: ""
                  ## @param auth.replicationUsername Name of the replication user
                  ##
                  replicationUsername: repl_user
                  ## @param auth.replicationPassword Password for the replication user. Ignored if `auth.existingSecret` is provided
                  ##
                  replicationPassword: ""
                  ## @param auth.existingSecret Name of existing secret to use for PostgreSQL credentials. `auth.postgresPassword`, `auth.password`, and `auth.replicationPassword` will be ignored and picked up from this secret. The secret might also contains the key `ldap-password` if LDAP is enabled. `ldap.bind_password` will be ignored and picked from this secret in this case.
                  ##
                  existingSecret: ""
                  ## @param auth.secretKeys.adminPasswordKey Name of key in existing secret to use for PostgreSQL credentials. Only used when `auth.existingSecret` is set.
                  ## @param auth.secretKeys.userPasswordKey Name of key in existing secret to use for PostgreSQL credentials. Only used when `auth.existingSecret` is set.
                  ## @param auth.secretKeys.replicationPasswordKey Name of key in existing secret to use for PostgreSQL credentials. Only used when `auth.existingSecret` is set.
                  ##
                  secretKeys:
                    adminPasswordKey: postgres-password
                    userPasswordKey: password
                    replicationPasswordKey: replication-password
                  ## @param auth.usePasswordFiles Mount credentials as a files instead of using an environment variable
                  ##
                  usePasswordFiles: false
                ## @param architecture PostgreSQL architecture (`standalone` or `replication`)
                ##
                architecture: standalone
                ## Replication configuration
                ## Ignored if `architecture` is `standalone`
                ##
                replication:
                  ## @param replication.synchronousCommit Set synchronous commit mode. Allowed values: `on`, `remote_apply`, `remote_write`, `local` and `off`
                  ## @param replication.numSynchronousReplicas Number of replicas that will have synchronous replication. Note: Cannot be greater than `readReplicas.replicaCount`.
                  ## ref: https://www.postgresql.org/docs/current/runtime-config-wal.html#GUC-SYNCHRONOUS-COMMIT
                  ##
                  synchronousCommit: "off"
                  numSynchronousReplicas: 0
                  ## @param replication.applicationName Cluster application name. Useful for advanced replication settings
                  ##
                  applicationName: my_application
                ## @param containerPorts.postgresql PostgreSQL container port
                ##
                containerPorts:
                  postgresql: 5432
                ## Audit settings
                ## https://github.com/bitnami/containers/tree/main/bitnami/postgresql#auditing
                ## @param audit.logHostname Log client hostnames
                ## @param audit.logConnections Add client log-in operations to the log file
                ## @param audit.logDisconnections Add client log-outs operations to the log file
                ## @param audit.pgAuditLog Add operations to log using the pgAudit extension
                ## @param audit.pgAuditLogCatalog Log catalog using pgAudit
                ## @param audit.clientMinMessages Message log level to share with the user
                ## @param audit.logLinePrefix Template for log line prefix (default if not set)
                ## @param audit.logTimezone Timezone for the log timestamps
                ##
                audit:
                  logHostname: false
                  logConnections: false
                  logDisconnections: false
                  pgAuditLog: ""
                  pgAuditLogCatalog: "off"
                  clientMinMessages: error
                  logLinePrefix: ""
                  logTimezone: ""
                ## LDAP configuration
                ## @param ldap.enabled Enable LDAP support
                ## DEPRECATED ldap.url It will removed in a future, please use 'ldap.uri' instead
                ## @param ldap.server IP address or name of the LDAP server.
                ## @param ldap.port Port number on the LDAP server to connect to
                ## @param ldap.prefix String to prepend to the user name when forming the DN to bind
                ## @param ldap.suffix String to append to the user name when forming the DN to bind
                ## DEPRECATED ldap.baseDN It will removed in a future, please use 'ldap.basedn' instead
                ## DEPRECATED ldap.bindDN It will removed in a future, please use 'ldap.binddn' instead
                ## DEPRECATED ldap.bind_password It will removed in a future, please use 'ldap.bindpw' instead
                ## @param ldap.basedn Root DN to begin the search for the user in
                ## @param ldap.binddn DN of user to bind to LDAP
                ## @param ldap.bindpw Password for the user to bind to LDAP
                ## DEPRECATED ldap.search_attr It will removed in a future, please use 'ldap.searchAttribute' instead
                ## DEPRECATED ldap.search_filter It will removed in a future, please use 'ldap.searchFilter' instead
                ## @param ldap.searchAttribute Attribute to match against the user name in the search
                ## @param ldap.searchFilter The search filter to use when doing search+bind authentication
                ## @param ldap.scheme Set to `ldaps` to use LDAPS
                ## DEPRECATED ldap.tls as string is deprecated, please use 'ldap.tls.enabled' instead
                ## @param ldap.tls.enabled Se to true to enable TLS encryption
                ##
                ldap:
                  enabled: false
                  server: ""
                  port: ""
                  prefix: ""
                  suffix: ""
                  basedn: ""
                  binddn: ""
                  bindpw: ""
                  searchAttribute: ""
                  searchFilter: ""
                  scheme: ""
                  tls:
                    enabled: false
                  ## @param ldap.uri LDAP URL beginning in the form `ldap[s]://host[:port]/basedn`. If provided, all the other LDAP parameters will be ignored.
                  ## Ref: https://www.postgresql.org/docs/current/auth-ldap.html
                  ##
                  uri: ""
                ## @param postgresqlDataDir PostgreSQL data dir folder
                ##
                postgresqlDataDir: /bitnami/postgresql/data
                ## @param postgresqlSharedPreloadLibraries Shared preload libraries (comma-separated list)
                ##
                postgresqlSharedPreloadLibraries: "pgaudit"
                ## Start PostgreSQL pod(s) without limitations on shm memory.
                ## By default docker and containerd (and possibly other container runtimes) limit `/dev/shm` to `64M`
                ## ref: https://github.com/docker-library/postgres/issues/416
                ## ref: https://github.com/containerd/containerd/issues/3654
                ##
                shmVolume:
                  ## @param shmVolume.enabled Enable emptyDir volume for /dev/shm for PostgreSQL pod(s)
                  ##
                  enabled: true
                  ## @param shmVolume.sizeLimit Set this to enable a size limit on the shm tmpfs
                  ## Note: the size of the tmpfs counts against container's memory limit
                  ## e.g:
                  ## sizeLimit: 1Gi
                  ##
                  sizeLimit: ""
                ## TLS configuration
                ##
                tls:
                  ## @param tls.enabled Enable TLS traffic support
                  ##
                  enabled: false
                  ## @param tls.autoGenerated Generate automatically self-signed TLS certificates
                  ##
                  autoGenerated: false
                  ## @param tls.preferServerCiphers Whether to use the server's TLS cipher preferences rather than the client's
                  ##
                  preferServerCiphers: true
                  ## @param tls.certificatesSecret Name of an existing secret that contains the certificates
                  ##
                  certificatesSecret: ""
                  ## @param tls.certFilename Certificate filename
                  ##
                  certFilename: ""
                  ## @param tls.certKeyFilename Certificate key filename
                  ##
                  certKeyFilename: ""
                  ## @param tls.certCAFilename CA Certificate filename
                  ## If provided, PostgreSQL will authenticate TLS/SSL clients by requesting them a certificate
                  ## ref: https://www.postgresql.org/docs/9.6/auth-methods.html
                  ##
                  certCAFilename: ""
                  ## @param tls.crlFilename File containing a Certificate Revocation List
                  ##
                  crlFilename: ""
                ## @section PostgreSQL Primary parameters
                ##
                primary:
                  ## @param primary.name Name of the primary database (eg primary, master, leader, ...)
                  ##
                  name: primary
                  ## @param primary.configuration PostgreSQL Primary main configuration to be injected as ConfigMap
                  ## ref: https://www.postgresql.org/docs/current/static/runtime-config.html
                  ##
                  configuration: ""
                  ## @param primary.pgHbaConfiguration PostgreSQL Primary client authentication configuration
                  ## ref: https://www.postgresql.org/docs/current/static/auth-pg-hba-conf.html
                  ## e.g:#
                  ## pgHbaConfiguration: |-
                  ##   local all all trust
                  ##   host all all localhost trust
                  ##   host mydatabase mysuser 192.168.0.0/24 md5
                  ##
                  pgHbaConfiguration: ""
                  ## @param primary.existingConfigmap Name of an existing ConfigMap with PostgreSQL Primary configuration
                  ## NOTE: `primary.configuration` and `primary.pgHbaConfiguration` will be ignored
                  ##
                  existingConfigmap: ""
                  ## @param primary.extendedConfiguration Extended PostgreSQL Primary configuration (appended to main or default configuration)
                  ## ref: https://github.com/bitnami/containers/tree/main/bitnami/postgresql#allow-settings-to-be-loaded-from-files-other-than-the-default-postgresqlconf
                  ##
                  extendedConfiguration: ""
                  ## @param primary.existingExtendedConfigmap Name of an existing ConfigMap with PostgreSQL Primary extended configuration
                  ## NOTE: `primary.extendedConfiguration` will be ignored
                  ##
                  existingExtendedConfigmap: ""
                  ## Initdb configuration
                  ## ref: https://github.com/bitnami/containers/tree/main/bitnami/postgresql#specifying-initdb-arguments
                  ##
                  initdb:
                    ## @param primary.initdb.args PostgreSQL initdb extra arguments
                    ##
                    args: ""
                    ## @param primary.initdb.postgresqlWalDir Specify a custom location for the PostgreSQL transaction log
                    ##
                    postgresqlWalDir: ""
                    ## @param primary.initdb.scripts Dictionary of initdb scripts
                    ## Specify dictionary of scripts to be run at first boot
                    ## e.g:
                    ## scripts:
                    ##   my_init_script.sh: |
                    ##      #!/bin/sh
                    ##      echo "Do something."
                    ##
                    scripts: {}
                    ## @param primary.initdb.scriptsConfigMap ConfigMap with scripts to be run at first boot
                    ## NOTE: This will override `primary.initdb.scripts`
                    ##
                    scriptsConfigMap: ""
                    ## @param primary.initdb.scriptsSecret Secret with scripts to be run at first boot (in case it contains sensitive information)
                    ## NOTE: This can work along `primary.initdb.scripts` or `primary.initdb.scriptsConfigMap`
                    ##
                    scriptsSecret: ""
                    ## @param primary.initdb.user Specify the PostgreSQL username to execute the initdb scripts
                    ##
                    user: ""
                    ## @param primary.initdb.password Specify the PostgreSQL password to execute the initdb scripts
                    ##
                    password: ""
                  ## Configure current cluster's primary server to be the standby server in other cluster.
                  ## This will allow cross cluster replication and provide cross cluster high availability.
                  ## You will need to configure pgHbaConfiguration if you want to enable this feature with local cluster replication enabled.
                  ## @param primary.standby.enabled Whether to enable current cluster's primary as standby server of another cluster or not
                  ## @param primary.standby.primaryHost The Host of replication primary in the other cluster
                  ## @param primary.standby.primaryPort The Port of replication primary in the other cluster
                  ##
                  standby:
                    enabled: false
                    primaryHost: ""
                    primaryPort: ""
                  ## @param primary.extraEnvVars Array with extra environment variables to add to PostgreSQL Primary nodes
                  ## e.g:
                  ## extraEnvVars:
                  ##   - name: FOO
                  ##     value: "bar"
                  ##
                  extraEnvVars: []
                  ## @param primary.extraEnvVarsCM Name of existing ConfigMap containing extra env vars for PostgreSQL Primary nodes
                  ##
                  extraEnvVarsCM: ""
                  ## @param primary.extraEnvVarsSecret Name of existing Secret containing extra env vars for PostgreSQL Primary nodes
                  ##
                  extraEnvVarsSecret: ""
                  ## @param primary.command Override default container command (useful when using custom images)
                  ##
                  command: []
                  ## @param primary.args Override default container args (useful when using custom images)
                  ##
                  args: []
                  ## Configure extra options for PostgreSQL Primary containers' liveness, readiness and startup probes
                  ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/#configure-probes
                  ## @param primary.livenessProbe.enabled Enable livenessProbe on PostgreSQL Primary containers
                  ## @param primary.livenessProbe.initialDelaySeconds Initial delay seconds for livenessProbe
                  ## @param primary.livenessProbe.periodSeconds Period seconds for livenessProbe
                  ## @param primary.livenessProbe.timeoutSeconds Timeout seconds for livenessProbe
                  ## @param primary.livenessProbe.failureThreshold Failure threshold for livenessProbe
                  ## @param primary.livenessProbe.successThreshold Success threshold for livenessProbe
                  ##
                  livenessProbe:
                    enabled: true
                    initialDelaySeconds: 30
                    periodSeconds: 10
                    timeoutSeconds: 5
                    failureThreshold: 6
                    successThreshold: 1
                  ## @param primary.readinessProbe.enabled Enable readinessProbe on PostgreSQL Primary containers
                  ## @param primary.readinessProbe.initialDelaySeconds Initial delay seconds for readinessProbe
                  ## @param primary.readinessProbe.periodSeconds Period seconds for readinessProbe
                  ## @param primary.readinessProbe.timeoutSeconds Timeout seconds for readinessProbe
                  ## @param primary.readinessProbe.failureThreshold Failure threshold for readinessProbe
                  ## @param primary.readinessProbe.successThreshold Success threshold for readinessProbe
                  ##
                  readinessProbe:
                    enabled: true
                    initialDelaySeconds: 5
                    periodSeconds: 10
                    timeoutSeconds: 5
                    failureThreshold: 6
                    successThreshold: 1
                  ## @param primary.startupProbe.enabled Enable startupProbe on PostgreSQL Primary containers
                  ## @param primary.startupProbe.initialDelaySeconds Initial delay seconds for startupProbe
                  ## @param primary.startupProbe.periodSeconds Period seconds for startupProbe
                  ## @param primary.startupProbe.timeoutSeconds Timeout seconds for startupProbe
                  ## @param primary.startupProbe.failureThreshold Failure threshold for startupProbe
                  ## @param primary.startupProbe.successThreshold Success threshold for startupProbe
                  ##
                  startupProbe:
                    enabled: false
                    initialDelaySeconds: 30
                    periodSeconds: 10
                    timeoutSeconds: 1
                    failureThreshold: 15
                    successThreshold: 1
                  ## @param primary.customLivenessProbe Custom livenessProbe that overrides the default one
                  ##
                  customLivenessProbe: {}
                  ## @param primary.customReadinessProbe Custom readinessProbe that overrides the default one
                  ##
                  customReadinessProbe: {}
                  ## @param primary.customStartupProbe Custom startupProbe that overrides the default one
                  ##
                  customStartupProbe: {}
                  ## @param primary.lifecycleHooks for the PostgreSQL Primary container to automate configuration before or after startup
                  ##
                  lifecycleHooks: {}
                  ## PostgreSQL Primary resource requests and limits
                  ## ref: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
                  ## @param primary.resourcesPreset Set container resources according to one common preset (allowed values: none, nano, micro, small, medium, large, xlarge, 2xlarge). This is ignored if primary.resources is set (primary.resources is recommended for production).
                  ## More information: https://github.com/bitnami/charts/blob/main/bitnami/common/templates/_resources.tpl#L15
                  ##
                  resourcesPreset: "small"
                  ## @param primary.resources Set container requests and limits for different resources like CPU or memory (essential for production workloads)
                  ## Example:
                  ## resources:
                  ##   requests:
                  ##     cpu: 2
                  ##     memory: 512Mi
                  ##   limits:
                  ##     cpu: 3
                  ##     memory: 1024Mi
                  ##
                  resources: {}
                  ## Pod Security Context
                  ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
                  ## @param primary.podSecurityContext.enabled Enable security context
                  ## @param primary.podSecurityContext.fsGroupChangePolicy Set filesystem group change policy
                  ## @param primary.podSecurityContext.sysctls Set kernel settings using the sysctl interface
                  ## @param primary.podSecurityContext.supplementalGroups Set filesystem extra groups
                  ## @param primary.podSecurityContext.fsGroup Group ID for the pod
                  ##
                  podSecurityContext:
                    enabled: true
                    fsGroupChangePolicy: Always
                    sysctls: []
                    supplementalGroups: []
                    fsGroup: 1001
                  ## Container Security Context
                  ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
                  ## @param primary.containerSecurityContext.enabled Enabled containers' Security Context
                  ## @param primary.containerSecurityContext.seLinuxOptions [object,nullable] Set SELinux options in container
                  ## @param primary.containerSecurityContext.runAsUser Set containers' Security Context runAsUser
                  ## @param primary.containerSecurityContext.runAsGroup Set containers' Security Context runAsGroup
                  ## @param primary.containerSecurityContext.runAsNonRoot Set container's Security Context runAsNonRoot
                  ## @param primary.containerSecurityContext.privileged Set container's Security Context privileged
                  ## @param primary.containerSecurityContext.readOnlyRootFilesystem Set container's Security Context readOnlyRootFilesystem
                  ## @param primary.containerSecurityContext.allowPrivilegeEscalation Set container's Security Context allowPrivilegeEscalation
                  ## @param primary.containerSecurityContext.capabilities.drop List of capabilities to be dropped
                  ## @param primary.containerSecurityContext.seccompProfile.type Set container's Security Context seccomp profile
                  ##
                  containerSecurityContext:
                    enabled: true
                    seLinuxOptions: {}
                    runAsUser: 1001
                    runAsGroup: 1001
                    runAsNonRoot: true
                    privileged: false
                    readOnlyRootFilesystem: true
                    allowPrivilegeEscalation: false
                    capabilities:
                      drop: ["ALL"]
                    seccompProfile:
                      type: "RuntimeDefault"
                  ## @param primary.automountServiceAccountToken Mount Service Account token in pod
                  ##
                  automountServiceAccountToken: false
                  ## @param primary.hostAliases PostgreSQL primary pods host aliases
                  ## https://kubernetes.io/docs/concepts/services-networking/add-entries-to-pod-etc-hosts-with-host-aliases/
                  ##
                  hostAliases: []
                  ## @param primary.hostNetwork Specify if host network should be enabled for PostgreSQL pod (postgresql primary)
                  ##
                  hostNetwork: false
                  ## @param primary.hostIPC Specify if host IPC should be enabled for PostgreSQL pod (postgresql primary)
                  ##
                  hostIPC: false
                  ## @param primary.labels Map of labels to add to the statefulset (postgresql primary)
                  ##
                  labels: {}
                  ## @param primary.annotations Annotations for PostgreSQL primary pods
                  ##
                  annotations: {}
                  ## @param primary.podLabels Map of labels to add to the pods (postgresql primary)
                  ##
                  podLabels: {}
                  ## @param primary.podAnnotations Map of annotations to add to the pods (postgresql primary)
                  ##
                  podAnnotations: {}
                  ## @param primary.podAffinityPreset PostgreSQL primary pod affinity preset. Ignored if `primary.affinity` is set. Allowed values: `soft` or `hard`
                  ## ref: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#inter-pod-affinity-and-anti-affinity
                  ##
                  podAffinityPreset: ""
                  ## @param primary.podAntiAffinityPreset PostgreSQL primary pod anti-affinity preset. Ignored if `primary.affinity` is set. Allowed values: `soft` or `hard`
                  ## ref: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#inter-pod-affinity-and-anti-affinity
                  ##
                  podAntiAffinityPreset: soft
                  ## PostgreSQL Primary node affinity preset
                  ## ref: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#node-affinity
                  ##
                  nodeAffinityPreset:
                    ## @param primary.nodeAffinityPreset.type PostgreSQL primary node affinity preset type. Ignored if `primary.affinity` is set. Allowed values: `soft` or `hard`
                    ##
                    type: ""
                    ## @param primary.nodeAffinityPreset.key PostgreSQL primary node label key to match Ignored if `primary.affinity` is set.
                    ## E.g.
                    ## key: "kubernetes.io/e2e-az-name"
                    ##
                    key: ""
                    ## @param primary.nodeAffinityPreset.values PostgreSQL primary node label values to match. Ignored if `primary.affinity` is set.
                    ## E.g.
                    ## values:
                    ##   - e2e-az1
                    ##   - e2e-az2
                    ##
                    values: []
                  ## @param primary.affinity Affinity for PostgreSQL primary pods assignment
                  ## ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#affinity-and-anti-affinity
                  ## Note: primary.podAffinityPreset, primary.podAntiAffinityPreset, and primary.nodeAffinityPreset will be ignored when it's set
                  ##
                  affinity: {}
                  ## @param primary.nodeSelector Node labels for PostgreSQL primary pods assignment
                  ## ref: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/
                  ##
                  nodeSelector: {}
                  ## @param primary.tolerations Tolerations for PostgreSQL primary pods assignment
                  ## ref: https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/
                  ##
                  tolerations: []
                  ## @param primary.topologySpreadConstraints Topology Spread Constraints for pod assignment spread across your cluster among failure-domains. Evaluated as a template
                  ## Ref: https://kubernetes.io/docs/concepts/workloads/pods/pod-topology-spread-constraints/#spread-constraints-for-pods
                  ##
                  topologySpreadConstraints: []
                  ## @param primary.priorityClassName Priority Class to use for each pod (postgresql primary)
                  ##
                  priorityClassName: ""
                  ## @param primary.schedulerName Use an alternate scheduler, e.g. "stork".
                  ## ref: https://kubernetes.io/docs/tasks/administer-cluster/configure-multiple-schedulers/
                  ##
                  schedulerName: ""
                  ## @param primary.terminationGracePeriodSeconds Seconds PostgreSQL primary pod needs to terminate gracefully
                  ## ref: https://kubernetes.io/docs/concepts/workloads/pods/pod/#termination-of-pods
                  ##
                  terminationGracePeriodSeconds: ""
                  ## @param primary.updateStrategy.type PostgreSQL Primary statefulset strategy type
                  ## @param primary.updateStrategy.rollingUpdate PostgreSQL Primary statefulset rolling update configuration parameters
                  ## ref: https://kubernetes.io/docs/concepts/workloads/controllers/statefulset/#update-strategies
                  ##
                  updateStrategy:
                    type: RollingUpdate
                    rollingUpdate: {}
                  ## @param primary.extraVolumeMounts Optionally specify extra list of additional volumeMounts for the PostgreSQL Primary container(s)
                  ##
                  extraVolumeMounts: []
                  ## @param primary.extraVolumes Optionally specify extra list of additional volumes for the PostgreSQL Primary pod(s)
                  ##
                  extraVolumes: []
                  ## @param primary.sidecars Add additional sidecar containers to the PostgreSQL Primary pod(s)
                  ## For example:
                  ## sidecars:
                  ##   - name: your-image-name
                  ##     image: your-image
                  ##     imagePullPolicy: Always
                  ##     ports:
                  ##       - name: portname
                  ##         containerPort: 1234
                  ##
                  sidecars: []
                  ## @param primary.initContainers Add additional init containers to the PostgreSQL Primary pod(s)
                  ## Example
                  ##
                  ## initContainers:
                  ##   - name: do-something
                  ##     image: busybox
                  ##     command: ['do', 'something']
                  ##
                  initContainers: []
                  ## Pod Disruption Budget configuration
                  ## ref: https://kubernetes.io/docs/tasks/run-application/configure-pdb
                  ## @param primary.pdb.create Enable/disable a Pod Disruption Budget creation
                  ## @param primary.pdb.minAvailable Minimum number/percentage of pods that should remain scheduled
                  ## @param primary.pdb.maxUnavailable Maximum number/percentage of pods that may be made unavailable. Defaults to `1` if both `primary.pdb.minAvailable` and `primary.pdb.maxUnavailable` are empty.
                  ##
                  pdb:
                    create: true
                    minAvailable: ""
                    maxUnavailable: ""
                  ## @param primary.extraPodSpec Optionally specify extra PodSpec for the PostgreSQL Primary pod(s)
                  ##
                  extraPodSpec: {}
                  ## Network Policies
                  ## Ref: https://kubernetes.io/docs/concepts/services-networking/network-policies/
                  ##
                  networkPolicy:
                    ## @param primary.networkPolicy.enabled Specifies whether a NetworkPolicy should be created
                    ##
                    enabled: true
                    ## @param primary.networkPolicy.allowExternal Don't require server label for connections
                    ## The Policy model to apply. When set to false, only pods with the correct
                    ## server label will have network access to the ports server is listening
                    ## on. When true, server will accept connections from any source
                    ## (with the correct destination port).
                    ##
                    allowExternal: true
                    ## @param primary.networkPolicy.allowExternalEgress Allow the pod to access any range of port and all destinations.
                    ##
                    allowExternalEgress: true
                    ## @param primary.networkPolicy.extraIngress [array] Add extra ingress rules to the NetworkPolicy
                    ## e.g:
                    ## extraIngress:
                    ##   - ports:
                    ##       - port: 1234
                    ##     from:
                    ##       - podSelector:
                    ##           - matchLabels:
                    ##               - role: frontend
                    ##       - podSelector:
                    ##           - matchExpressions:
                    ##               - key: role
                    ##                 operator: In
                    ##                 values:
                    ##                   - frontend
                    extraIngress: []
                    ## @param primary.networkPolicy.extraEgress [array] Add extra ingress rules to the NetworkPolicy
                    ## e.g:
                    ## extraEgress:
                    ##   - ports:
                    ##       - port: 1234
                    ##     to:
                    ##       - podSelector:
                    ##           - matchLabels:
                    ##               - role: frontend
                    ##       - podSelector:
                    ##           - matchExpressions:
                    ##               - key: role
                    ##                 operator: In
                    ##                 values:
                    ##                   - frontend
                    ##
                    extraEgress: []
                    ## @param primary.networkPolicy.ingressNSMatchLabels [object] Labels to match to allow traffic from other namespaces
                    ## @param primary.networkPolicy.ingressNSPodMatchLabels [object] Pod labels to match to allow traffic from other namespaces
                    ##
                    ingressNSMatchLabels: {}
                    ingressNSPodMatchLabels: {}
                  ## PostgreSQL Primary service configuration
                  ##
                  service:
                    ## @param primary.service.type Kubernetes Service type
                    ##
                    type: ClusterIP
                    ## @param primary.service.ports.postgresql PostgreSQL service port
                    ##
                    ports:
                      postgresql: 5432
                    ## Node ports to expose
                    ## NOTE: choose port between <30000-32767>
                    ## @param primary.service.nodePorts.postgresql Node port for PostgreSQL
                    ## ref: https://kubernetes.io/docs/concepts/services-networking/service/#type-nodeport
                    ##
                    nodePorts:
                      postgresql: ""
                    ## @param primary.service.clusterIP Static clusterIP or None for headless services
                    ## e.g:
                    ## clusterIP: None
                    ##
                    clusterIP: ""
                    ## @param primary.service.annotations Annotations for PostgreSQL primary service
                    ##
                    annotations: {}
                    ## @param primary.service.loadBalancerClass Load balancer class if service type is `LoadBalancer`
                    ## ref: https://kubernetes.io/docs/concepts/services-networking/service/#load-balancer-class
                    ##
                    loadBalancerClass: ""
                    ## @param primary.service.loadBalancerIP Load balancer IP if service type is `LoadBalancer`
                    ## Set the LoadBalancer service type to internal only
                    ## ref: https://kubernetes.io/docs/concepts/services-networking/service/#internal-load-balancer
                    ##
                    loadBalancerIP: ""
                    ## @param primary.service.externalTrafficPolicy Enable client source IP preservation
                    ## ref https://kubernetes.io/docs/tasks/access-application-cluster/create-external-load-balancer/#preserving-the-client-source-ip
                    ##
                    externalTrafficPolicy: Cluster
                    ## @param primary.service.loadBalancerSourceRanges Addresses that are allowed when service is LoadBalancer
                    ## https://kubernetes.io/docs/tasks/access-application-cluster/configure-cloud-provider-firewall/#restrict-access-for-loadbalancer-service
                    ##
                    ## loadBalancerSourceRanges:
                    ## - 10.10.10.0/24
                    ##
                    loadBalancerSourceRanges: []
                    ## @param primary.service.extraPorts Extra ports to expose in the PostgreSQL primary service
                    ##
                    extraPorts: []
                    ## @param primary.service.sessionAffinity Session Affinity for Kubernetes service, can be "None" or "ClientIP"
                    ## If "ClientIP", consecutive client requests will be directed to the same Pod
                    ## ref: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
                    ##
                    sessionAffinity: None
                    ## @param primary.service.sessionAffinityConfig Additional settings for the sessionAffinity
                    ## sessionAffinityConfig:
                    ##   clientIP:
                    ##     timeoutSeconds: 300
                    ##
                    sessionAffinityConfig: {}
                    ## Headless service properties
                    ##
                    headless:
                      ## @param primary.service.headless.annotations Additional custom annotations for headless PostgreSQL primary service
                      ##
                      annotations: {}
                  ## PostgreSQL Primary persistence configuration
                  ##
                  persistence:
                    ## @param primary.persistence.enabled Enable PostgreSQL Primary data persistence using PVC
                    ##
                    enabled: true
                    ## @param primary.persistence.volumeName Name to assign the volume
                    ##
                    volumeName: "data"
                    ## @param primary.persistence.existingClaim Name of an existing PVC to use
                    ##
                    existingClaim: ""
                    ## @param primary.persistence.mountPath The path the volume will be mounted at
                    ## Note: useful when using custom PostgreSQL images
                    ##
                    mountPath: /bitnami/postgresql
                    ## @param primary.persistence.subPath The subdirectory of the volume to mount to
                    ## Useful in dev environments and one PV for multiple services
                    ##
                    subPath: ""
                    ## @param primary.persistence.storageClass PVC Storage Class for PostgreSQL Primary data volume
                    ## If defined, storageClassName: <storageClass>
                    ## If set to "-", storageClassName: "", which disables dynamic provisioning
                    ## If undefined (the default) or set to null, no storageClassName spec is
                    ##   set, choosing the default provisioner.  (gp2 on AWS, standard on
                    ##   GKE, AWS & OpenStack)
                    ##
                    storageClass: ""
                    ## @param primary.persistence.accessModes PVC Access Mode for PostgreSQL volume
                    ##
                    accessModes:
                      - ReadWriteOnce
                    ## @param primary.persistence.size PVC Storage Request for PostgreSQL volume
                    ##
                    size: 8Gi
                    ## @param primary.persistence.annotations Annotations for the PVC
                    ##
                    annotations: {}
                    ## @param primary.persistence.labels Labels for the PVC
                    ##
                    labels: {}
                    ## @param primary.persistence.selector Selector to match an existing Persistent Volume (this value is evaluated as a template)
                    ## selector:
                    ##   matchLabels:
                    ##     app: my-app
                    ##
                    selector: {}
                    ## @param primary.persistence.dataSource Custom PVC data source
                    ##
                    dataSource: {}
                  ## PostgreSQL Primary Persistent Volume Claim Retention Policy
                  ## ref: https://kubernetes.io/docs/concepts/workloads/controllers/statefulset/#persistentvolumeclaim-retention
                  ##
                  persistentVolumeClaimRetentionPolicy:
                    ## @param primary.persistentVolumeClaimRetentionPolicy.enabled Enable Persistent volume retention policy for Primary Statefulset
                    ##
                    enabled: false
                    ## @param primary.persistentVolumeClaimRetentionPolicy.whenScaled Volume retention behavior when the replica count of the StatefulSet is reduced
                    ##
                    whenScaled: Retain
                    ## @param primary.persistentVolumeClaimRetentionPolicy.whenDeleted Volume retention behavior that applies when the StatefulSet is deleted
                    ##
                    whenDeleted: Retain
                ## @section PostgreSQL read only replica parameters (only used when `architecture` is set to `replication`)
                ##
                readReplicas:
                  ## @param readReplicas.name Name of the read replicas database (eg secondary, slave, ...)
                  ##
                  name: read
                  ## @param readReplicas.replicaCount Number of PostgreSQL read only replicas
                  ##
                  replicaCount: 1
                  ## @param readReplicas.extendedConfiguration Extended PostgreSQL read only replicas configuration (appended to main or default configuration)
                  ## ref: https://github.com/bitnami/containers/tree/main/bitnami/postgresql#allow-settings-to-be-loaded-from-files-other-than-the-default-postgresqlconf
                  ##
                  extendedConfiguration: ""
                  ## @param readReplicas.extraEnvVars Array with extra environment variables to add to PostgreSQL read only nodes
                  ## e.g:
                  ## extraEnvVars:
                  ##   - name: FOO
                  ##     value: "bar"
                  ##
                  extraEnvVars: []
                  ## @param readReplicas.extraEnvVarsCM Name of existing ConfigMap containing extra env vars for PostgreSQL read only nodes
                  ##
                  extraEnvVarsCM: ""
                  ## @param readReplicas.extraEnvVarsSecret Name of existing Secret containing extra env vars for PostgreSQL read only nodes
                  ##
                  extraEnvVarsSecret: ""
                  ## @param readReplicas.command Override default container command (useful when using custom images)
                  ##
                  command: []
                  ## @param readReplicas.args Override default container args (useful when using custom images)
                  ##
                  args: []
                  ## Configure extra options for PostgreSQL read only containers' liveness, readiness and startup probes
                  ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/#configure-probes
                  ## @param readReplicas.livenessProbe.enabled Enable livenessProbe on PostgreSQL read only containers
                  ## @param readReplicas.livenessProbe.initialDelaySeconds Initial delay seconds for livenessProbe
                  ## @param readReplicas.livenessProbe.periodSeconds Period seconds for livenessProbe
                  ## @param readReplicas.livenessProbe.timeoutSeconds Timeout seconds for livenessProbe
                  ## @param readReplicas.livenessProbe.failureThreshold Failure threshold for livenessProbe
                  ## @param readReplicas.livenessProbe.successThreshold Success threshold for livenessProbe
                  ##
                  livenessProbe:
                    enabled: true
                    initialDelaySeconds: 30
                    periodSeconds: 10
                    timeoutSeconds: 5
                    failureThreshold: 6
                    successThreshold: 1
                  ## @param readReplicas.readinessProbe.enabled Enable readinessProbe on PostgreSQL read only containers
                  ## @param readReplicas.readinessProbe.initialDelaySeconds Initial delay seconds for readinessProbe
                  ## @param readReplicas.readinessProbe.periodSeconds Period seconds for readinessProbe
                  ## @param readReplicas.readinessProbe.timeoutSeconds Timeout seconds for readinessProbe
                  ## @param readReplicas.readinessProbe.failureThreshold Failure threshold for readinessProbe
                  ## @param readReplicas.readinessProbe.successThreshold Success threshold for readinessProbe
                  ##
                  readinessProbe:
                    enabled: true
                    initialDelaySeconds: 5
                    periodSeconds: 10
                    timeoutSeconds: 5
                    failureThreshold: 6
                    successThreshold: 1
                  ## @param readReplicas.startupProbe.enabled Enable startupProbe on PostgreSQL read only containers
                  ## @param readReplicas.startupProbe.initialDelaySeconds Initial delay seconds for startupProbe
                  ## @param readReplicas.startupProbe.periodSeconds Period seconds for startupProbe
                  ## @param readReplicas.startupProbe.timeoutSeconds Timeout seconds for startupProbe
                  ## @param readReplicas.startupProbe.failureThreshold Failure threshold for startupProbe
                  ## @param readReplicas.startupProbe.successThreshold Success threshold for startupProbe
                  ##
                  startupProbe:
                    enabled: false
                    initialDelaySeconds: 30
                    periodSeconds: 10
                    timeoutSeconds: 1
                    failureThreshold: 15
                    successThreshold: 1
                  ## @param readReplicas.customLivenessProbe Custom livenessProbe that overrides the default one
                  ##
                  customLivenessProbe: {}
                  ## @param readReplicas.customReadinessProbe Custom readinessProbe that overrides the default one
                  ##
                  customReadinessProbe: {}
                  ## @param readReplicas.customStartupProbe Custom startupProbe that overrides the default one
                  ##
                  customStartupProbe: {}
                  ## @param readReplicas.lifecycleHooks for the PostgreSQL read only container to automate configuration before or after startup
                  ##
                  lifecycleHooks: {}
                  ## PostgreSQL read only resource requests and limits
                  ## ref: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
                  ## @param readReplicas.resourcesPreset Set container resources according to one common preset (allowed values: none, nano, micro, small, medium, large, xlarge, 2xlarge). This is ignored if readReplicas.resources is set (readReplicas.resources is recommended for production).
                  ## More information: https://github.com/bitnami/charts/blob/main/bitnami/common/templates/_resources.tpl#L15
                  ##
                  resourcesPreset: "nano"
                  ## @param readReplicas.resources Set container requests and limits for different resources like CPU or memory (essential for production workloads)
                  ## Example:
                  ## resources:
                  ##   requests:
                  ##     cpu: 2
                  ##     memory: 512Mi
                  ##   limits:
                  ##     cpu: 3
                  ##     memory: 1024Mi
                  ##
                  resources: {}
                  ## Pod Security Context
                  ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
                  ## @param readReplicas.podSecurityContext.enabled Enable security context
                  ## @param readReplicas.podSecurityContext.fsGroupChangePolicy Set filesystem group change policy
                  ## @param readReplicas.podSecurityContext.sysctls Set kernel settings using the sysctl interface
                  ## @param readReplicas.podSecurityContext.supplementalGroups Set filesystem extra groups
                  ## @param readReplicas.podSecurityContext.fsGroup Group ID for the pod
                  ##
                  podSecurityContext:
                    enabled: true
                    fsGroupChangePolicy: Always
                    sysctls: []
                    supplementalGroups: []
                    fsGroup: 1001
                  ## Container Security Context
                  ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
                  ## @param readReplicas.containerSecurityContext.enabled Enabled containers' Security Context
                  ## @param readReplicas.containerSecurityContext.seLinuxOptions [object,nullable] Set SELinux options in container
                  ## @param readReplicas.containerSecurityContext.runAsUser Set containers' Security Context runAsUser
                  ## @param readReplicas.containerSecurityContext.runAsGroup Set containers' Security Context runAsGroup
                  ## @param readReplicas.containerSecurityContext.runAsNonRoot Set container's Security Context runAsNonRoot
                  ## @param readReplicas.containerSecurityContext.privileged Set container's Security Context privileged
                  ## @param readReplicas.containerSecurityContext.readOnlyRootFilesystem Set container's Security Context readOnlyRootFilesystem
                  ## @param readReplicas.containerSecurityContext.allowPrivilegeEscalation Set container's Security Context allowPrivilegeEscalation
                  ## @param readReplicas.containerSecurityContext.capabilities.drop List of capabilities to be dropped
                  ## @param readReplicas.containerSecurityContext.seccompProfile.type Set container's Security Context seccomp profile
                  ##
                  containerSecurityContext:
                    enabled: true
                    seLinuxOptions: {}
                    runAsUser: 1001
                    runAsGroup: 1001
                    runAsNonRoot: true
                    privileged: false
                    readOnlyRootFilesystem: true
                    allowPrivilegeEscalation: false
                    capabilities:
                      drop: ["ALL"]
                    seccompProfile:
                      type: "RuntimeDefault"
                  ## @param readReplicas.automountServiceAccountToken Mount Service Account token in pod
                  ##
                  automountServiceAccountToken: false
                  ## @param readReplicas.hostAliases PostgreSQL read only pods host aliases
                  ## https://kubernetes.io/docs/concepts/services-networking/add-entries-to-pod-etc-hosts-with-host-aliases/
                  ##
                  hostAliases: []
                  ## @param readReplicas.hostNetwork Specify if host network should be enabled for PostgreSQL pod (PostgreSQL read only)
                  ##
                  hostNetwork: false
                  ## @param readReplicas.hostIPC Specify if host IPC should be enabled for PostgreSQL pod (postgresql primary)
                  ##
                  hostIPC: false
                  ## @param readReplicas.labels Map of labels to add to the statefulset (PostgreSQL read only)
                  ##
                  labels: {}
                  ## @param readReplicas.annotations Annotations for PostgreSQL read only pods
                  ##
                  annotations: {}
                  ## @param readReplicas.podLabels Map of labels to add to the pods (PostgreSQL read only)
                  ##
                  podLabels: {}
                  ## @param readReplicas.podAnnotations Map of annotations to add to the pods (PostgreSQL read only)
                  ##
                  podAnnotations: {}
                  ## @param readReplicas.podAffinityPreset PostgreSQL read only pod affinity preset. Ignored if `primary.affinity` is set. Allowed values: `soft` or `hard`
                  ## ref: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#inter-pod-affinity-and-anti-affinity
                  ##
                  podAffinityPreset: ""
                  ## @param readReplicas.podAntiAffinityPreset PostgreSQL read only pod anti-affinity preset. Ignored if `primary.affinity` is set. Allowed values: `soft` or `hard`
                  ## ref: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#inter-pod-affinity-and-anti-affinity
                  ##
                  podAntiAffinityPreset: soft
                  ## PostgreSQL read only node affinity preset
                  ## ref: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#node-affinity
                  ##
                  nodeAffinityPreset:
                    ## @param readReplicas.nodeAffinityPreset.type PostgreSQL read only node affinity preset type. Ignored if `primary.affinity` is set. Allowed values: `soft` or `hard`
                    ##
                    type: ""
                    ## @param readReplicas.nodeAffinityPreset.key PostgreSQL read only node label key to match Ignored if `primary.affinity` is set.
                    ## E.g.
                    ## key: "kubernetes.io/e2e-az-name"
                    ##
                    key: ""
                    ## @param readReplicas.nodeAffinityPreset.values PostgreSQL read only node label values to match. Ignored if `primary.affinity` is set.
                    ## E.g.
                    ## values:
                    ##   - e2e-az1
                    ##   - e2e-az2
                    ##
                    values: []
                  ## @param readReplicas.affinity Affinity for PostgreSQL read only pods assignment
                  ## ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#affinity-and-anti-affinity
                  ## Note: primary.podAffinityPreset, primary.podAntiAffinityPreset, and primary.nodeAffinityPreset will be ignored when it's set
                  ##
                  affinity: {}
                  ## @param readReplicas.nodeSelector Node labels for PostgreSQL read only pods assignment
                  ## ref: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/
                  ##
                  nodeSelector: {}
                  ## @param readReplicas.tolerations Tolerations for PostgreSQL read only pods assignment
                  ## ref: https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/
                  ##
                  tolerations: []
                  ## @param readReplicas.topologySpreadConstraints Topology Spread Constraints for pod assignment spread across your cluster among failure-domains. Evaluated as a template
                  ## Ref: https://kubernetes.io/docs/concepts/workloads/pods/pod-topology-spread-constraints/#spread-constraints-for-pods
                  ##
                  topologySpreadConstraints: []
                  ## @param readReplicas.priorityClassName Priority Class to use for each pod (PostgreSQL read only)
                  ##
                  priorityClassName: ""
                  ## @param readReplicas.schedulerName Use an alternate scheduler, e.g. "stork".
                  ## ref: https://kubernetes.io/docs/tasks/administer-cluster/configure-multiple-schedulers/
                  ##
                  schedulerName: ""
                  ## @param readReplicas.terminationGracePeriodSeconds Seconds PostgreSQL read only pod needs to terminate gracefully
                  ## ref: https://kubernetes.io/docs/concepts/workloads/pods/pod/#termination-of-pods
                  ##
                  terminationGracePeriodSeconds: ""
                  ## @param readReplicas.updateStrategy.type PostgreSQL read only statefulset strategy type
                  ## @param readReplicas.updateStrategy.rollingUpdate PostgreSQL read only statefulset rolling update configuration parameters
                  ## ref: https://kubernetes.io/docs/concepts/workloads/controllers/statefulset/#update-strategies
                  ##
                  updateStrategy:
                    type: RollingUpdate
                    rollingUpdate: {}
                  ## @param readReplicas.extraVolumeMounts Optionally specify extra list of additional volumeMounts for the PostgreSQL read only container(s)
                  ##
                  extraVolumeMounts: []
                  ## @param readReplicas.extraVolumes Optionally specify extra list of additional volumes for the PostgreSQL read only pod(s)
                  ##
                  extraVolumes: []
                  ## @param readReplicas.sidecars Add additional sidecar containers to the PostgreSQL read only pod(s)
                  ## For example:
                  ## sidecars:
                  ##   - name: your-image-name
                  ##     image: your-image
                  ##     imagePullPolicy: Always
                  ##     ports:
                  ##       - name: portname
                  ##         containerPort: 1234
                  ##
                  sidecars: []
                  ## @param readReplicas.initContainers Add additional init containers to the PostgreSQL read only pod(s)
                  ## Example
                  ##
                  ## initContainers:
                  ##   - name: do-something
                  ##     image: busybox
                  ##     command: ['do', 'something']
                  ##
                  initContainers: []
                  ## Pod Disruption Budget configuration
                  ## ref: https://kubernetes.io/docs/tasks/run-application/configure-pdb
                  ## @param readReplicas.pdb.create Enable/disable a Pod Disruption Budget creation
                  ## @param readReplicas.pdb.minAvailable Minimum number/percentage of pods that should remain scheduled
                  ## @param readReplicas.pdb.maxUnavailable Maximum number/percentage of pods that may be made unavailable. Defaults to `1` if both `readReplicas.pdb.minAvailable` and `readReplicas.pdb.maxUnavailable` are empty.
                  ##
                  pdb:
                    create: true
                    minAvailable: ""
                    maxUnavailable: ""
                  ## @param readReplicas.extraPodSpec Optionally specify extra PodSpec for the PostgreSQL read only pod(s)
                  ##
                  extraPodSpec: {}
                  ## Network Policies
                  ## Ref: https://kubernetes.io/docs/concepts/services-networking/network-policies/
                  ##
                  networkPolicy:
                    ## @param readReplicas.networkPolicy.enabled Specifies whether a NetworkPolicy should be created
                    ##
                    enabled: true
                    ## @param readReplicas.networkPolicy.allowExternal Don't require server label for connections
                    ## The Policy model to apply. When set to false, only pods with the correct
                    ## server label will have network access to the ports server is listening
                    ## on. When true, server will accept connections from any source
                    ## (with the correct destination port).
                    ##
                    allowExternal: true
                    ## @param readReplicas.networkPolicy.allowExternalEgress Allow the pod to access any range of port and all destinations.
                    ##
                    allowExternalEgress: true
                    ## @param readReplicas.networkPolicy.extraIngress [array] Add extra ingress rules to the NetworkPolicy
                    ## e.g:
                    ## extraIngress:
                    ##   - ports:
                    ##       - port: 1234
                    ##     from:
                    ##       - podSelector:
                    ##           - matchLabels:
                    ##               - role: frontend
                    ##       - podSelector:
                    ##           - matchExpressions:
                    ##               - key: role
                    ##                 operator: In
                    ##                 values:
                    ##                   - frontend
                    extraIngress: []
                    ## @param readReplicas.networkPolicy.extraEgress [array] Add extra ingress rules to the NetworkPolicy
                    ## e.g:
                    ## extraEgress:
                    ##   - ports:
                    ##       - port: 1234
                    ##     to:
                    ##       - podSelector:
                    ##           - matchLabels:
                    ##               - role: frontend
                    ##       - podSelector:
                    ##           - matchExpressions:
                    ##               - key: role
                    ##                 operator: In
                    ##                 values:
                    ##                   - frontend
                    ##
                    extraEgress: []
                    ## @param readReplicas.networkPolicy.ingressNSMatchLabels [object] Labels to match to allow traffic from other namespaces
                    ## @param readReplicas.networkPolicy.ingressNSPodMatchLabels [object] Pod labels to match to allow traffic from other namespaces
                    ##
                    ingressNSMatchLabels: {}
                    ingressNSPodMatchLabels: {}
                  ## PostgreSQL read only service configuration
                  ##
                  service:
                    ## @param readReplicas.service.type Kubernetes Service type
                    ##
                    type: ClusterIP
                    ## @param readReplicas.service.ports.postgresql PostgreSQL service port
                    ##
                    ports:
                      postgresql: 5432
                    ## Node ports to expose
                    ## NOTE: choose port between <30000-32767>
                    ## @param readReplicas.service.nodePorts.postgresql Node port for PostgreSQL
                    ## ref: https://kubernetes.io/docs/concepts/services-networking/service/#type-nodeport
                    ##
                    nodePorts:
                      postgresql: ""
                    ## @param readReplicas.service.clusterIP Static clusterIP or None for headless services
                    ## e.g:
                    ## clusterIP: None
                    ##
                    clusterIP: ""
                    ## @param readReplicas.service.annotations Annotations for PostgreSQL read only service
                    ##
                    annotations: {}
                    ## @param readReplicas.service.loadBalancerClass Load balancer class if service type is `LoadBalancer`
                    ## ref: https://kubernetes.io/docs/concepts/services-networking/service/#load-balancer-class
                    ##
                    loadBalancerClass: ""
                    ## @param readReplicas.service.loadBalancerIP Load balancer IP if service type is `LoadBalancer`
                    ## Set the LoadBalancer service type to internal only
                    ## ref: https://kubernetes.io/docs/concepts/services-networking/service/#internal-load-balancer
                    ##
                    loadBalancerIP: ""
                    ## @param readReplicas.service.externalTrafficPolicy Enable client source IP preservation
                    ## ref https://kubernetes.io/docs/tasks/access-application-cluster/create-external-load-balancer/#preserving-the-client-source-ip
                    ##
                    externalTrafficPolicy: Cluster
                    ## @param readReplicas.service.loadBalancerSourceRanges Addresses that are allowed when service is LoadBalancer
                    ## https://kubernetes.io/docs/tasks/access-application-cluster/configure-cloud-provider-firewall/#restrict-access-for-loadbalancer-service
                    ##
                    ## loadBalancerSourceRanges:
                    ## - 10.10.10.0/24
                    ##
                    loadBalancerSourceRanges: []
                    ## @param readReplicas.service.extraPorts Extra ports to expose in the PostgreSQL read only service
                    ##
                    extraPorts: []
                    ## @param readReplicas.service.sessionAffinity Session Affinity for Kubernetes service, can be "None" or "ClientIP"
                    ## If "ClientIP", consecutive client requests will be directed to the same Pod
                    ## ref: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
                    ##
                    sessionAffinity: None
                    ## @param readReplicas.service.sessionAffinityConfig Additional settings for the sessionAffinity
                    ## sessionAffinityConfig:
                    ##   clientIP:
                    ##     timeoutSeconds: 300
                    ##
                    sessionAffinityConfig: {}
                    ## Headless service properties
                    ##
                    headless:
                      ## @param readReplicas.service.headless.annotations Additional custom annotations for headless PostgreSQL read only service
                      ##
                      annotations: {}
                  ## PostgreSQL read only persistence configuration
                  ##
                  persistence:
                    ## @param readReplicas.persistence.enabled Enable PostgreSQL read only data persistence using PVC
                    ##
                    enabled: true
                    ## @param readReplicas.persistence.existingClaim Name of an existing PVC to use
                    ##
                    existingClaim: ""
                    ## @param readReplicas.persistence.mountPath The path the volume will be mounted at
                    ## Note: useful when using custom PostgreSQL images
                    ##
                    mountPath: /bitnami/postgresql
                    ## @param readReplicas.persistence.subPath The subdirectory of the volume to mount to
                    ## Useful in dev environments and one PV for multiple services
                    ##
                    subPath: ""
                    ## @param readReplicas.persistence.storageClass PVC Storage Class for PostgreSQL read only data volume
                    ## If defined, storageClassName: <storageClass>
                    ## If set to "-", storageClassName: "", which disables dynamic provisioning
                    ## If undefined (the default) or set to null, no storageClassName spec is
                    ##   set, choosing the default provisioner.  (gp2 on AWS, standard on
                    ##   GKE, AWS & OpenStack)
                    ##
                    storageClass: ""
                    ## @param readReplicas.persistence.accessModes PVC Access Mode for PostgreSQL volume
                    ##
                    accessModes:
                      - ReadWriteOnce
                    ## @param readReplicas.persistence.size PVC Storage Request for PostgreSQL volume
                    ##
                    size: 8Gi
                    ## @param readReplicas.persistence.annotations Annotations for the PVC
                    ##
                    annotations: {}
                    ## @param readReplicas.persistence.labels Labels for the PVC
                    ##
                    labels: {}
                    ## @param readReplicas.persistence.selector Selector to match an existing Persistent Volume (this value is evaluated as a template)
                    ## selector:
                    ##   matchLabels:
                    ##     app: my-app
                    ##
                    selector: {}
                    ## @param readReplicas.persistence.dataSource Custom PVC data source
                    ##
                    dataSource: {}
                  ## PostgreSQL Read only Persistent Volume Claim Retention Policy
                  ## ref: https://kubernetes.io/docs/concepts/workloads/controllers/statefulset/#persistentvolumeclaim-retention
                  ##
                  persistentVolumeClaimRetentionPolicy:
                    ## @param readReplicas.persistentVolumeClaimRetentionPolicy.enabled Enable Persistent volume retention policy for read only Statefulset
                    ##
                    enabled: false
                    ## @param readReplicas.persistentVolumeClaimRetentionPolicy.whenScaled Volume retention behavior when the replica count of the StatefulSet is reduced
                    ##
                    whenScaled: Retain
                    ## @param readReplicas.persistentVolumeClaimRetentionPolicy.whenDeleted Volume retention behavior that applies when the StatefulSet is deleted
                    ##
                    whenDeleted: Retain
                ## @section Backup parameters
                ## This section implements a trivial logical dump cronjob of the database.
                ## This only comes with the consistency guarantees of the dump program.
                ## This is not a snapshot based roll forward/backward recovery backup.
                ## ref: https://kubernetes.io/docs/concepts/workloads/controllers/cron-jobs/
                backup:
                  ## @param backup.enabled Enable the logical dump of the database "regularly"
                  enabled: false
                  cronjob:
                    ## @param backup.cronjob.schedule Set the cronjob parameter schedule
                    schedule: "@daily"
                    ## @param backup.cronjob.timeZone Set the cronjob parameter timeZone
                    timeZone: ""
                    ## @param backup.cronjob.concurrencyPolicy Set the cronjob parameter concurrencyPolicy
                    concurrencyPolicy: Allow
                    ## @param backup.cronjob.failedJobsHistoryLimit Set the cronjob parameter failedJobsHistoryLimit
                    failedJobsHistoryLimit: 1
                    ## @param backup.cronjob.successfulJobsHistoryLimit Set the cronjob parameter successfulJobsHistoryLimit
                    successfulJobsHistoryLimit: 3
                    ## @param backup.cronjob.startingDeadlineSeconds Set the cronjob parameter startingDeadlineSeconds
                    startingDeadlineSeconds: ""
                    ## @param backup.cronjob.ttlSecondsAfterFinished Set the cronjob parameter ttlSecondsAfterFinished
                    ttlSecondsAfterFinished: ""
                    ## @param backup.cronjob.restartPolicy Set the cronjob parameter restartPolicy
                    restartPolicy: OnFailure
                    ## @param backup.cronjob.podSecurityContext.enabled Enable PodSecurityContext for CronJob/Backup
                    ## @param backup.cronjob.podSecurityContext.fsGroupChangePolicy Set filesystem group change policy
                    ## @param backup.cronjob.podSecurityContext.sysctls Set kernel settings using the sysctl interface
                    ## @param backup.cronjob.podSecurityContext.supplementalGroups Set filesystem extra groups
                    ## @param backup.cronjob.podSecurityContext.fsGroup Group ID for the CronJob
                    podSecurityContext:
                      enabled: true
                      fsGroupChangePolicy: Always
                      sysctls: []
                      supplementalGroups: []
                      fsGroup: 1001
                    ## backup container's Security Context
                    ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-container
                    ## @param backup.cronjob.containerSecurityContext.enabled Enabled containers' Security Context
                    ## @param backup.cronjob.containerSecurityContext.seLinuxOptions [object,nullable] Set SELinux options in container
                    ## @param backup.cronjob.containerSecurityContext.runAsUser Set containers' Security Context runAsUser
                    ## @param backup.cronjob.containerSecurityContext.runAsGroup Set containers' Security Context runAsGroup
                    ## @param backup.cronjob.containerSecurityContext.runAsNonRoot Set container's Security Context runAsNonRoot
                    ## @param backup.cronjob.containerSecurityContext.privileged Set container's Security Context privileged
                    ## @param backup.cronjob.containerSecurityContext.readOnlyRootFilesystem Set container's Security Context readOnlyRootFilesystem
                    ## @param backup.cronjob.containerSecurityContext.allowPrivilegeEscalation Set container's Security Context allowPrivilegeEscalation
                    ## @param backup.cronjob.containerSecurityContext.capabilities.drop List of capabilities to be dropped
                    ## @param backup.cronjob.containerSecurityContext.seccompProfile.type Set container's Security Context seccomp profile
                    containerSecurityContext:
                      enabled: true
                      seLinuxOptions: {}
                      runAsUser: 1001
                      runAsGroup: 1001
                      runAsNonRoot: true
                      privileged: false
                      readOnlyRootFilesystem: true
                      allowPrivilegeEscalation: false
                      capabilities:
                        drop: ["ALL"]
                      seccompProfile:
                        type: "RuntimeDefault"
                    ## @param backup.cronjob.command Set backup container's command to run
                    command:
                      - /bin/sh
                      - -c
                      - "pg_dumpall --clean --if-exists --load-via-partition-root --quote-all-identifiers --no-password --file=${PGDUMP_DIR}/pg_dumpall-$(date '+%Y-%m-%d-%H-%M').pgdump"
                    ## @param backup.cronjob.labels Set the cronjob labels
                    labels: {}
                    ## @param backup.cronjob.annotations Set the cronjob annotations
                    annotations: {}
                    ## @param backup.cronjob.nodeSelector Node labels for PostgreSQL backup CronJob pod assignment
                    ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/assign-pods-nodes/
                    ##
                    nodeSelector: {}
                    ## @param backup.cronjob.tolerations Tolerations for PostgreSQL backup CronJob pods assignment
                    ## ref: https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/
                    ##
                    tolerations: []
                    ## backup cronjob container resource requests and limits
                    ## ref: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
                    ## @param backup.cronjob.resourcesPreset Set container resources according to one common preset (allowed values: none, nano, micro, small, medium, large, xlarge, 2xlarge). This is ignored if backup.cronjob.resources is set (backup.cronjob.resources is recommended for production).
                    ## More information: https://github.com/bitnami/charts/blob/main/bitnami/common/templates/_resources.tpl#L15
                    ##
                    resourcesPreset: "nano"
                    ## @param backup.cronjob.resources Set container requests and limits for different resources like CPU or memory
                    ## Example:
                    resources: {}
                    ## resources:
                    ##   requests:
                    ##     cpu: 1
                    ##     memory: 512Mi
                    ##   limits:
                    ##     cpu: 2
                    ##     memory: 1024Mi
                    networkPolicy:
                      ## @param backup.cronjob.networkPolicy.enabled Specifies whether a NetworkPolicy should be created
                      ##
                      enabled: true
                    storage:
                      ## @param backup.cronjob.storage.enabled Enable using a `PersistentVolumeClaim` as backup data volume 
                      ##
                      enabled: true
                      ## @param backup.cronjob.storage.existingClaim Provide an existing `PersistentVolumeClaim` (only when `architecture=standalone`)
                      ## If defined, PVC must be created manually before volume will be bound
                      ##
                      existingClaim: ""
                      ## @param backup.cronjob.storage.resourcePolicy Setting it to "keep" to avoid removing PVCs during a helm delete operation. Leaving it empty will delete PVCs after the chart deleted
                      ##
                      resourcePolicy: ""
                      ## @param backup.cronjob.storage.storageClass PVC Storage Class for the backup data volume
                      ## If defined, storageClassName: <storageClass>
                      ## If set to "-", storageClassName: "", which disables dynamic provisioning
                      ## If undefined (the default) or set to null, no storageClassName spec is
                      ## set, choosing the default provisioner.
                      ##
                      storageClass: ""
                      ## @param backup.cronjob.storage.accessModes PV Access Mode
                      ##
                      accessModes:
                        - ReadWriteOnce
                      ## @param backup.cronjob.storage.size PVC Storage Request for the backup data volume
                      ##
                      size: 8Gi
                      ## @param backup.cronjob.storage.annotations PVC annotations
                      ##
                      annotations: {}
                      ## @param backup.cronjob.storage.mountPath Path to mount the volume at
                      ##
                      mountPath: /backup/pgdump
                      ## @param backup.cronjob.storage.subPath Subdirectory of the volume to mount at
                      ## and one PV for multiple services.
                      ##
                      subPath: ""
                      ## Fine tuning for volumeClaimTemplates
                      ##
                      volumeClaimTemplates:
                        ## @param backup.cronjob.storage.volumeClaimTemplates.selector A label query over volumes to consider for binding (e.g. when using local volumes)
                        ## A label query over volumes to consider for binding (e.g. when using local volumes)
                        ## See https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.20/#labelselector-v1-meta for more details
                        ##
                        selector: {}
                    ## @param backup.cronjob.extraVolumeMounts Optionally specify extra list of additional volumeMounts for the backup container
                    ##
                    extraVolumeMounts: []
                    ## @param backup.cronjob.extraVolumes Optionally specify extra list of additional volumes for the backup container
                    ##
                    extraVolumes: []
                ## @section Volume Permissions parameters
                ##
                
                ## Init containers parameters:
                ## volumePermissions: Change the owner and group of the persistent volume(s) mountpoint(s) to 'runAsUser:fsGroup' on each node
                ##
                volumePermissions:
                  ## @param volumePermissions.enabled Enable init container that changes the owner and group of the persistent volume
                  ##
                  enabled: false
                  ## @param volumePermissions.image.registry [default: REGISTRY_NAME] Init container volume-permissions image registry
                  ## @param volumePermissions.image.repository [default: REPOSITORY_NAME/os-shell] Init container volume-permissions image repository
                  ## @skip volumePermissions.image.tag Init container volume-permissions image tag (immutable tags are recommended)
                  ## @param volumePermissions.image.digest Init container volume-permissions image digest in the way sha256:aa.... Please note this parameter, if set, will override the tag
                  ## @param volumePermissions.image.pullPolicy Init container volume-permissions image pull policy
                  ## @param volumePermissions.image.pullSecrets Init container volume-permissions image pull secrets
                  ##
                  image:
                    registry: docker.io
                    repository: bitnami/os-shell
                    tag: 12-debian-12-r22
                    digest: ""
                    pullPolicy: IfNotPresent
                    ## Optionally specify an array of imagePullSecrets.
                    ## Secrets must be manually created in the namespace.
                    ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
                    ## Example:
                    ## pullSecrets:
                    ##   - myRegistryKeySecretName
                    ##
                    pullSecrets: []
                  ## Init container resource requests and limits
                  ## ref: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
                  ## @param volumePermissions.resourcesPreset Set container resources according to one common preset (allowed values: none, nano, micro, small, medium, large, xlarge, 2xlarge). This is ignored if volumePermissions.resources is set (volumePermissions.resources is recommended for production).
                  ## More information: https://github.com/bitnami/charts/blob/main/bitnami/common/templates/_resources.tpl#L15
                  ##
                  resourcesPreset: "nano"
                  ## @param volumePermissions.resources Set container requests and limits for different resources like CPU or memory (essential for production workloads)
                  ## Example:
                  ## resources:
                  ##   requests:
                  ##     cpu: 2
                  ##     memory: 512Mi
                  ##   limits:
                  ##     cpu: 3
                  ##     memory: 1024Mi
                  ##
                  resources: {}
                  ## Init container' Security Context
                  ## Note: the chown of the data folder is done to containerSecurityContext.runAsUser
                  ## and not the below volumePermissions.containerSecurityContext.runAsUser
                  ## @param volumePermissions.containerSecurityContext.seLinuxOptions [object,nullable] Set SELinux options in container
                  ## @param volumePermissions.containerSecurityContext.runAsUser User ID for the init container
                  ## @param volumePermissions.containerSecurityContext.runAsGroup Group ID for the init container
                  ## @param volumePermissions.containerSecurityContext.runAsNonRoot runAsNonRoot for the init container
                  ## @param volumePermissions.containerSecurityContext.seccompProfile.type seccompProfile.type for the init container
                  ##
                  containerSecurityContext:
                    seLinuxOptions: {}
                    runAsUser: 0
                    runAsGroup: 0
                    runAsNonRoot: false
                    seccompProfile:
                      type: RuntimeDefault
                ## @section Other Parameters
                ##
                
                ## @param serviceBindings.enabled Create secret for service binding (Experimental)
                ## Ref: https://servicebinding.io/service-provider/
                ##
                serviceBindings:
                  enabled: false
                ## Service account for PostgreSQL to use.
                ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/
                ##
                serviceAccount:
                  ## @param serviceAccount.create Enable creation of ServiceAccount for PostgreSQL pod
                  ##
                  create: true
                  ## @param serviceAccount.name The name of the ServiceAccount to use.
                  ## If not set and create is true, a name is generated using the common.names.fullname template
                  ##
                  name: ""
                  ## @param serviceAccount.automountServiceAccountToken Allows auto mount of ServiceAccountToken on the serviceAccount created
                  ## Can be set to false if pods using this serviceAccount do not need to use K8s API
                  ##
                  automountServiceAccountToken: false
                  ## @param serviceAccount.annotations Additional custom annotations for the ServiceAccount
                  ##
                  annotations: {}
                ## Creates role for ServiceAccount
                ## @param rbac.create Create Role and RoleBinding (required for PSP to work)
                ##
                rbac:
                  create: false
                  ## @param rbac.rules Custom RBAC rules to set
                  ## e.g:
                  ## rules:
                  ##   - apiGroups:
                  ##       - ""
                  ##     resources:
                  ##       - pods
                  ##     verbs:
                  ##       - get
                  ##       - list
                  ##
                  rules: []
                ## Pod Security Policy
                ## ref: https://kubernetes.io/docs/concepts/policy/pod-security-policy/
                ## @param psp.create Whether to create a PodSecurityPolicy. WARNING: PodSecurityPolicy is deprecated in Kubernetes v1.21 or later, unavailable in v1.25 or later
                ##
                psp:
                  create: false
                ## @section Metrics Parameters
                ##
                metrics:
                  ## @param metrics.enabled Start a prometheus exporter
                  ##
                  enabled: false
                  ## @param metrics.image.registry [default: REGISTRY_NAME] PostgreSQL Prometheus Exporter image registry
                  ## @param metrics.image.repository [default: REPOSITORY_NAME/postgres-exporter] PostgreSQL Prometheus Exporter image repository
                  ## @skip metrics.image.tag PostgreSQL Prometheus Exporter image tag (immutable tags are recommended)
                  ## @param metrics.image.digest PostgreSQL image digest in the way sha256:aa.... Please note this parameter, if set, will override the tag
                  ## @param metrics.image.pullPolicy PostgreSQL Prometheus Exporter image pull policy
                  ## @param metrics.image.pullSecrets Specify image pull secrets
                  ##
                  image:
                    registry: docker.io
                    repository: bitnami/postgres-exporter
                    tag: 0.15.0-debian-12-r33
                    digest: ""
                    pullPolicy: IfNotPresent
                    ## Optionally specify an array of imagePullSecrets.
                    ## Secrets must be manually created in the namespace.
                    ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
                    ## Example:
                    ## pullSecrets:
                    ##   - myRegistryKeySecretName
                    ##
                    pullSecrets: []
                  ## @param metrics.collectors Control enabled collectors
                  ## ref: https://github.com/prometheus-community/postgres_exporter#flags
                  ## Example:
                  ## collectors:
                  ##   wal: false
                  collectors: {}
                  ## @param metrics.customMetrics Define additional custom metrics
                  ## ref: https://github.com/prometheus-community/postgres_exporter#adding-new-metrics-via-a-config-file-deprecated
                  ## customMetrics:
                  ##   pg_database:
                  ##     query: "SELECT d.datname AS name, CASE WHEN pg_catalog.has_database_privilege(d.datname, 'CONNECT') THEN pg_catalog.pg_database_size(d.datname) ELSE 0 END AS size_bytes FROM pg_catalog.pg_database d where datname not in ('template0', 'template1', 'postgres')"
                  ##     metrics:
                  ##       - name:
                  ##           usage: "LABEL"
                  ##           description: "Name of the database"
                  ##       - size_bytes:
                  ##           usage: "GAUGE"
                  ##           description: "Size of the database in bytes"
                  ##
                  customMetrics: {}
                  ## @param metrics.extraEnvVars Extra environment variables to add to PostgreSQL Prometheus exporter
                  ## see: https://github.com/prometheus-community/postgres_exporter#environment-variables
                  ## For example:
                  ##  extraEnvVars:
                  ##  - name: PG_EXPORTER_DISABLE_DEFAULT_METRICS
                  ##    value: "true"
                  ##
                  extraEnvVars: []
                  ## PostgreSQL Prometheus exporter containers' Security Context
                  ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-container
                  ## @param metrics.containerSecurityContext.enabled Enabled containers' Security Context
                  ## @param metrics.containerSecurityContext.seLinuxOptions [object,nullable] Set SELinux options in container
                  ## @param metrics.containerSecurityContext.runAsUser Set containers' Security Context runAsUser
                  ## @param metrics.containerSecurityContext.runAsGroup Set containers' Security Context runAsGroup
                  ## @param metrics.containerSecurityContext.runAsNonRoot Set container's Security Context runAsNonRoot
                  ## @param metrics.containerSecurityContext.privileged Set container's Security Context privileged
                  ## @param metrics.containerSecurityContext.readOnlyRootFilesystem Set container's Security Context readOnlyRootFilesystem
                  ## @param metrics.containerSecurityContext.allowPrivilegeEscalation Set container's Security Context allowPrivilegeEscalation
                  ## @param metrics.containerSecurityContext.capabilities.drop List of capabilities to be dropped
                  ## @param metrics.containerSecurityContext.seccompProfile.type Set container's Security Context seccomp profile
                  ##
                  containerSecurityContext:
                    enabled: true
                    seLinuxOptions: {}
                    runAsUser: 1001
                    runAsGroup: 1001
                    runAsNonRoot: true
                    privileged: false
                    readOnlyRootFilesystem: true
                    allowPrivilegeEscalation: false
                    capabilities:
                      drop: ["ALL"]
                    seccompProfile:
                      type: "RuntimeDefault"
                  ## Configure extra options for PostgreSQL Prometheus exporter containers' liveness, readiness and startup probes
                  ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/#configure-probes
                  ## @param metrics.livenessProbe.enabled Enable livenessProbe on PostgreSQL Prometheus exporter containers
                  ## @param metrics.livenessProbe.initialDelaySeconds Initial delay seconds for livenessProbe
                  ## @param metrics.livenessProbe.periodSeconds Period seconds for livenessProbe
                  ## @param metrics.livenessProbe.timeoutSeconds Timeout seconds for livenessProbe
                  ## @param metrics.livenessProbe.failureThreshold Failure threshold for livenessProbe
                  ## @param metrics.livenessProbe.successThreshold Success threshold for livenessProbe
                  ##
                  livenessProbe:
                    enabled: true
                    initialDelaySeconds: 5
                    periodSeconds: 10
                    timeoutSeconds: 5
                    failureThreshold: 6
                    successThreshold: 1
                  ## @param metrics.readinessProbe.enabled Enable readinessProbe on PostgreSQL Prometheus exporter containers
                  ## @param metrics.readinessProbe.initialDelaySeconds Initial delay seconds for readinessProbe
                  ## @param metrics.readinessProbe.periodSeconds Period seconds for readinessProbe
                  ## @param metrics.readinessProbe.timeoutSeconds Timeout seconds for readinessProbe
                  ## @param metrics.readinessProbe.failureThreshold Failure threshold for readinessProbe
                  ## @param metrics.readinessProbe.successThreshold Success threshold for readinessProbe
                  ##
                  readinessProbe:
                    enabled: true
                    initialDelaySeconds: 5
                    periodSeconds: 10
                    timeoutSeconds: 5
                    failureThreshold: 6
                    successThreshold: 1
                  ## @param metrics.startupProbe.enabled Enable startupProbe on PostgreSQL Prometheus exporter containers
                  ## @param metrics.startupProbe.initialDelaySeconds Initial delay seconds for startupProbe
                  ## @param metrics.startupProbe.periodSeconds Period seconds for startupProbe
                  ## @param metrics.startupProbe.timeoutSeconds Timeout seconds for startupProbe
                  ## @param metrics.startupProbe.failureThreshold Failure threshold for startupProbe
                  ## @param metrics.startupProbe.successThreshold Success threshold for startupProbe
                  ##
                  startupProbe:
                    enabled: false
                    initialDelaySeconds: 10
                    periodSeconds: 10
                    timeoutSeconds: 1
                    failureThreshold: 15
                    successThreshold: 1
                  ## @param metrics.customLivenessProbe Custom livenessProbe that overrides the default one
                  ##
                  customLivenessProbe: {}
                  ## @param metrics.customReadinessProbe Custom readinessProbe that overrides the default one
                  ##
                  customReadinessProbe: {}
                  ## @param metrics.customStartupProbe Custom startupProbe that overrides the default one
                  ##
                  customStartupProbe: {}
                  ## @param metrics.containerPorts.metrics PostgreSQL Prometheus exporter metrics container port
                  ##
                  containerPorts:
                    metrics: 9187
                  ## PostgreSQL Prometheus exporter resource requests and limits
                  ## ref: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
                  ## @param metrics.resourcesPreset Set container resources according to one common preset (allowed values: none, nano, micro, small, medium, large, xlarge, 2xlarge). This is ignored if metrics.resources is set (metrics.resources is recommended for production).
                  ## More information: https://github.com/bitnami/charts/blob/main/bitnami/common/templates/_resources.tpl#L15
                  ##
                  resourcesPreset: "nano"
                  ## @param metrics.resources Set container requests and limits for different resources like CPU or memory (essential for production workloads)
                  ## Example:
                  ## resources:
                  ##   requests:
                  ##     cpu: 2
                  ##     memory: 512Mi
                  ##   limits:
                  ##     cpu: 3
                  ##     memory: 1024Mi
                  ##
                  resources: {}
                  ## Service configuration
                  ##
                  service:
                    ## @param metrics.service.ports.metrics PostgreSQL Prometheus Exporter service port
                    ##
                    ports:
                      metrics: 9187
                    ## @param metrics.service.clusterIP Static clusterIP or None for headless services
                    ## ref: https://kubernetes.io/docs/concepts/services-networking/service/#choosing-your-own-ip-address
                    ##
                    clusterIP: ""
                    ## @param metrics.service.sessionAffinity Control where client requests go, to the same pod or round-robin
                    ## Values: ClientIP or None
                    ## ref: https://kubernetes.io/docs/concepts/services-networking/service/
                    ##
                    sessionAffinity: None
                    ## @param metrics.service.annotations [object] Annotations for Prometheus to auto-discover the metrics endpoint
                    ##
                    annotations:
                      prometheus.io/scrape: "true"
                      prometheus.io/port: "{{ .Values.metrics.service.ports.metrics }}"
                  ## Prometheus Operator ServiceMonitor configuration
                  ##
                  serviceMonitor:
                    ## @param metrics.serviceMonitor.enabled Create ServiceMonitor Resource for scraping metrics using Prometheus Operator
                    ##
                    enabled: false
                    ## @param metrics.serviceMonitor.namespace Namespace for the ServiceMonitor Resource (defaults to the Release Namespace)
                    ##
                    namespace: ""
                    ## @param metrics.serviceMonitor.interval Interval at which metrics should be scraped.
                    ## ref: https://github.com/coreos/prometheus-operator/blob/master/Documentation/api.md#endpoint
                    ##
                    interval: ""
                    ## @param metrics.serviceMonitor.scrapeTimeout Timeout after which the scrape is ended
                    ## ref: https://github.com/coreos/prometheus-operator/blob/master/Documentation/api.md#endpoint
                    ##
                    scrapeTimeout: ""
                    ## @param metrics.serviceMonitor.labels Additional labels that can be used so ServiceMonitor will be discovered by Prometheus
                    ##
                    labels: {}
                    ## @param metrics.serviceMonitor.selector Prometheus instance selector labels
                    ## ref: https://github.com/bitnami/charts/tree/main/bitnami/prometheus-operator#prometheus-configuration
                    ##
                    selector: {}
                    ## @param metrics.serviceMonitor.relabelings RelabelConfigs to apply to samples before scraping
                    ##
                    relabelings: []
                    ## @param metrics.serviceMonitor.metricRelabelings MetricRelabelConfigs to apply to samples before ingestion
                    ##
                    metricRelabelings: []
                    ## @param metrics.serviceMonitor.honorLabels Specify honorLabels parameter to add the scrape endpoint
                    ##
                    honorLabels: false
                    ## @param metrics.serviceMonitor.jobLabel The name of the label on the target service to use as the job name in prometheus.
                    ##
                    jobLabel: ""
                  ## Custom PrometheusRule to be defined
                  ## The value is evaluated as a template, so, for example, the value can depend on .Release or .Chart
                  ## ref: https://github.com/coreos/prometheus-operator#customresourcedefinitions
                  ##
                  prometheusRule:
                    ## @param metrics.prometheusRule.enabled Create a PrometheusRule for Prometheus Operator
                    ##
                    enabled: false
                    ## @param metrics.prometheusRule.namespace Namespace for the PrometheusRule Resource (defaults to the Release Namespace)
                    ##
                    namespace: ""
                    ## @param metrics.prometheusRule.labels Additional labels that can be used so PrometheusRule will be discovered by Prometheus
                    ##
                    labels: {}
                    ## @param metrics.prometheusRule.rules PrometheusRule definitions
                    ## Make sure to constraint the rules to the current postgresql service.
                    ## rules:
                    ##   - alert: HugeReplicationLag
                    ##     expr: pg_replication_lag{service="{{ printf "%s-metrics" (include "common.names.fullname" .) }}"} / 3600 > 1
                    ##     for: 1m
                    ##     labels:
                    ##       severity: critical
                    ##     annotations:
                    ##       description: replication for {{ include "common.names.fullname" . }} PostgreSQL is lagging by {{ "{{ $value }}" }} hour(s).
                    ##       summary: PostgreSQL replication is lagging by {{ "{{ $value }}" }} hour(s).
                    ##
                    rules: []
            EOT,
        ]
      [32m+[0m[0m verify                     = false
      [32m+[0m[0m version                    = "15.5.7"
      [32m+[0m[0m wait                       = false
      [32m+[0m[0m wait_for_jobs              = false
    }

[1m  # kubernetes_namespace.cve-consumer[0m will be created
[0m  [32m+[0m[0m resource "kubernetes_namespace" "cve-consumer" {
      [32m+[0m[0m id                               = (known after apply)
      [32m+[0m[0m wait_for_default_service_account = false

      [32m+[0m[0m metadata {
          [32m+[0m[0m generation       = (known after apply)
          [32m+[0m[0m name             = "cve-consumer"
          [32m+[0m[0m resource_version = (known after apply)
          [32m+[0m[0m uid              = (known after apply)
        }
    }

[1m  # kubernetes_namespace.cve-processor[0m will be created
[0m  [32m+[0m[0m resource "kubernetes_namespace" "cve-processor" {
      [32m+[0m[0m id                               = (known after apply)
      [32m+[0m[0m wait_for_default_service_account = false

      [32m+[0m[0m metadata {
          [32m+[0m[0m generation       = (known after apply)
          [32m+[0m[0m name             = "cve-processor"
          [32m+[0m[0m resource_version = (known after apply)
          [32m+[0m[0m uid              = (known after apply)
        }
    }

[1m  # kubernetes_namespace.kafka[0m will be created
[0m  [32m+[0m[0m resource "kubernetes_namespace" "kafka" {
      [32m+[0m[0m id                               = (known after apply)
      [32m+[0m[0m wait_for_default_service_account = false

      [32m+[0m[0m metadata {
          [32m+[0m[0m generation       = (known after apply)
          [32m+[0m[0m name             = "kafka"
          [32m+[0m[0m resource_version = (known after apply)
          [32m+[0m[0m uid              = (known after apply)
        }
    }

[1m  # module.ebs_csi_irsa_role.data.aws_iam_policy_document.this[0][0m will be read during apply
  # (config refers to values not yet known)
[0m [36m<=[0m[0m data "aws_iam_policy_document" "this" {
      [32m+[0m[0m id            = (known after apply)
      [32m+[0m[0m json          = (known after apply)
      [32m+[0m[0m minified_json = (known after apply)

      [32m+[0m[0m statement {
          [32m+[0m[0m actions = [
              [32m+[0m[0m "sts:AssumeRoleWithWebIdentity",
            ]
          [32m+[0m[0m effect  = "Allow"

          [32m+[0m[0m condition {
              [32m+[0m[0m test     = "StringEquals"
              [32m+[0m[0m values   = [
                  [32m+[0m[0m "sts.amazonaws.com",
                ]
              [32m+[0m[0m variable = (known after apply)
            }
          [32m+[0m[0m condition {
              [32m+[0m[0m test     = "StringEquals"
              [32m+[0m[0m values   = [
                  [32m+[0m[0m "system:serviceaccount:kube-system:ebs-csi-controller-sa",
                ]
              [32m+[0m[0m variable = (known after apply)
            }

          [32m+[0m[0m principals {
              [32m+[0m[0m identifiers = [
                  [32m+[0m[0m (known after apply),
                ]
              [32m+[0m[0m type        = "Federated"
            }
        }
    }

[1m  # module.ebs_csi_irsa_role.aws_iam_policy.ebs_csi[0][0m will be created
[0m  [32m+[0m[0m resource "aws_iam_policy" "ebs_csi" {
      [32m+[0m[0m arn              = (known after apply)
      [32m+[0m[0m attachment_count = (known after apply)
      [32m+[0m[0m description      = "Provides permissions to manage EBS volumes via the container storage interface driver"
      [32m+[0m[0m id               = (known after apply)
      [32m+[0m[0m name             = (known after apply)
      [32m+[0m[0m name_prefix      = "AmazonEKS_EBS_CSI_Policy-"
      [32m+[0m[0m path             = "/"
      [32m+[0m[0m policy           = jsonencode(
            {
              [32m+[0m[0m Statement = [
                  [32m+[0m[0m {
                      [32m+[0m[0m Action   = [
                          [32m+[0m[0m "ec2:ModifyVolume",
                          [32m+[0m[0m "ec2:EnableFastSnapshotRestores",
                          [32m+[0m[0m "ec2:DetachVolume",
                          [32m+[0m[0m "ec2:DescribeVolumesModifications",
                          [32m+[0m[0m "ec2:DescribeVolumes",
                          [32m+[0m[0m "ec2:DescribeTags",
                          [32m+[0m[0m "ec2:DescribeSnapshots",
                          [32m+[0m[0m "ec2:DescribeInstances",
                          [32m+[0m[0m "ec2:DescribeAvailabilityZones",
                          [32m+[0m[0m "ec2:CreateSnapshot",
                          [32m+[0m[0m "ec2:AttachVolume",
                        ]
                      [32m+[0m[0m Effect   = "Allow"
                      [32m+[0m[0m Resource = "*"
                    },
                  [32m+[0m[0m {
                      [32m+[0m[0m Action    = "ec2:CreateTags"
                      [32m+[0m[0m Condition = {
                          [32m+[0m[0m StringEquals = {
                              [32m+[0m[0m "ec2:CreateAction" = [
                                  [32m+[0m[0m "CreateVolume",
                                  [32m+[0m[0m "CreateSnapshot",
                                ]
                            }
                        }
                      [32m+[0m[0m Effect    = "Allow"
                      [32m+[0m[0m Resource  = [
                          [32m+[0m[0m "arn:aws:ec2:*:*:volume/*",
                          [32m+[0m[0m "arn:aws:ec2:*:*:snapshot/*",
                        ]
                    },
                  [32m+[0m[0m {
                      [32m+[0m[0m Action   = "ec2:DeleteTags"
                      [32m+[0m[0m Effect   = "Allow"
                      [32m+[0m[0m Resource = [
                          [32m+[0m[0m "arn:aws:ec2:*:*:volume/*",
                          [32m+[0m[0m "arn:aws:ec2:*:*:snapshot/*",
                        ]
                    },
                  [32m+[0m[0m {
                      [32m+[0m[0m Action    = "ec2:CreateVolume"
                      [32m+[0m[0m Condition = {
                          [32m+[0m[0m StringLike = {
                              [32m+[0m[0m "aws:RequestTag/ebs.csi.aws.com/cluster" = "true"
                            }
                        }
                      [32m+[0m[0m Effect    = "Allow"
                      [32m+[0m[0m Resource  = "*"
                    },
                  [32m+[0m[0m {
                      [32m+[0m[0m Action    = "ec2:CreateVolume"
                      [32m+[0m[0m Condition = {
                          [32m+[0m[0m StringLike = {
                              [32m+[0m[0m "aws:RequestTag/CSIVolumeName" = "*"
                            }
                        }
                      [32m+[0m[0m Effect    = "Allow"
                      [32m+[0m[0m Resource  = "*"
                    },
                  [32m+[0m[0m {
                      [32m+[0m[0m Action    = "ec2:CreateVolume"
                      [32m+[0m[0m Condition = {
                          [32m+[0m[0m StringLike = {
                              [32m+[0m[0m "aws:RequestTag/kubernetes.io/cluster/*" = "owned"
                            }
                        }
                      [32m+[0m[0m Effect    = "Allow"
                      [32m+[0m[0m Resource  = "*"
                    },
                  [32m+[0m[0m {
                      [32m+[0m[0m Action    = "ec2:DeleteVolume"
                      [32m+[0m[0m Condition = {
                          [32m+[0m[0m StringLike = {
                              [32m+[0m[0m "ec2:ResourceTag/ebs.csi.aws.com/cluster" = "true"
                            }
                        }
                      [32m+[0m[0m Effect    = "Allow"
                      [32m+[0m[0m Resource  = "*"
                    },
                  [32m+[0m[0m {
                      [32m+[0m[0m Action    = "ec2:DeleteVolume"
                      [32m+[0m[0m Condition = {
                          [32m+[0m[0m StringLike = {
                              [32m+[0m[0m "ec2:ResourceTag/CSIVolumeName" = "*"
                            }
                        }
                      [32m+[0m[0m Effect    = "Allow"
                      [32m+[0m[0m Resource  = "*"
                    },
                  [32m+[0m[0m {
                      [32m+[0m[0m Action    = "ec2:DeleteVolume"
                      [32m+[0m[0m Condition = {
                          [32m+[0m[0m StringLike = {
                              [32m+[0m[0m "ec2:ResourceTag/kubernetes.io/cluster/*" = "owned"
                            }
                        }
                      [32m+[0m[0m Effect    = "Allow"
                      [32m+[0m[0m Resource  = "*"
                    },
                  [32m+[0m[0m {
                      [32m+[0m[0m Action    = "ec2:DeleteVolume"
                      [32m+[0m[0m Condition = {
                          [32m+[0m[0m StringLike = {
                              [32m+[0m[0m "ec2:ResourceTag/kubernetes.io/created-for/pvc/name" = "*"
                            }
                        }
                      [32m+[0m[0m Effect    = "Allow"
                      [32m+[0m[0m Resource  = "*"
                    },
                  [32m+[0m[0m {
                      [32m+[0m[0m Action    = "ec2:DeleteSnapshot"
                      [32m+[0m[0m Condition = {
                          [32m+[0m[0m StringLike = {
                              [32m+[0m[0m "ec2:ResourceTag/CSIVolumeSnapshotName" = "*"
                            }
                        }
                      [32m+[0m[0m Effect    = "Allow"
                      [32m+[0m[0m Resource  = "*"
                    },
                  [32m+[0m[0m {
                      [32m+[0m[0m Action    = "ec2:DeleteSnapshot"
                      [32m+[0m[0m Condition = {
                          [32m+[0m[0m StringLike = {
                              [32m+[0m[0m "ec2:ResourceTag/ebs.csi.aws.com/cluster" = "true"
                            }
                        }
                      [32m+[0m[0m Effect    = "Allow"
                      [32m+[0m[0m Resource  = "*"
                    },
                ]
              [32m+[0m[0m Version   = "2012-10-17"
            }
        )
      [32m+[0m[0m policy_id        = (known after apply)
      [32m+[0m[0m tags_all         = (known after apply)
    }

[1m  # module.ebs_csi_irsa_role.aws_iam_role.this[0][0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role" "this" {
      [32m+[0m[0m arn                   = (known after apply)
      [32m+[0m[0m assume_role_policy    = (known after apply)
      [32m+[0m[0m create_date           = (known after apply)
      [32m+[0m[0m force_detach_policies = true
      [32m+[0m[0m id                    = (known after apply)
      [32m+[0m[0m managed_policy_arns   = (known after apply)
      [32m+[0m[0m max_session_duration  = 3600
      [32m+[0m[0m name                  = "ebs-csi-controller"
      [32m+[0m[0m name_prefix           = (known after apply)
      [32m+[0m[0m path                  = "/"
      [32m+[0m[0m tags_all              = (known after apply)
      [32m+[0m[0m unique_id             = (known after apply)
    }

[1m  # module.ebs_csi_irsa_role.aws_iam_role_policy_attachment.ebs_csi[0][0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role_policy_attachment" "ebs_csi" {
      [32m+[0m[0m id         = (known after apply)
      [32m+[0m[0m policy_arn = (known after apply)
      [32m+[0m[0m role       = "ebs-csi-controller"
    }

[1m  # module.eks.data.aws_caller_identity.current[0m will be read during apply
  # (depends on a resource or a module with changes pending)
[0m [36m<=[0m[0m data "aws_caller_identity" "current" {
      [32m+[0m[0m account_id = (known after apply)
      [32m+[0m[0m arn        = (known after apply)
      [32m+[0m[0m id         = (known after apply)
      [32m+[0m[0m user_id    = (known after apply)
    }

[1m  # module.eks.data.aws_eks_addon_version.this["aws-ebs-csi-driver"][0m will be read during apply
  # (depends on a resource or a module with changes pending)
[0m [36m<=[0m[0m data "aws_eks_addon_version" "this" {
      [32m+[0m[0m addon_name         = "aws-ebs-csi-driver"
      [32m+[0m[0m id                 = (known after apply)
      [32m+[0m[0m kubernetes_version = "1.29"
      [32m+[0m[0m most_recent        = true
      [32m+[0m[0m version            = (known after apply)
    }

[1m  # module.eks.data.aws_eks_addon_version.this["coredns"][0m will be read during apply
  # (depends on a resource or a module with changes pending)
[0m [36m<=[0m[0m data "aws_eks_addon_version" "this" {
      [32m+[0m[0m addon_name         = "coredns"
      [32m+[0m[0m id                 = (known after apply)
      [32m+[0m[0m kubernetes_version = "1.29"
      [32m+[0m[0m most_recent        = true
      [32m+[0m[0m version            = (known after apply)
    }

[1m  # module.eks.data.aws_eks_addon_version.this["eks-pod-identity-agent"][0m will be read during apply
  # (depends on a resource or a module with changes pending)
[0m [36m<=[0m[0m data "aws_eks_addon_version" "this" {
      [32m+[0m[0m addon_name         = "eks-pod-identity-agent"
      [32m+[0m[0m id                 = (known after apply)
      [32m+[0m[0m kubernetes_version = "1.29"
      [32m+[0m[0m most_recent        = true
      [32m+[0m[0m version            = (known after apply)
    }

[1m  # module.eks.data.aws_eks_addon_version.this["kube-proxy"][0m will be read during apply
  # (depends on a resource or a module with changes pending)
[0m [36m<=[0m[0m data "aws_eks_addon_version" "this" {
      [32m+[0m[0m addon_name         = "kube-proxy"
      [32m+[0m[0m id                 = (known after apply)
      [32m+[0m[0m kubernetes_version = "1.29"
      [32m+[0m[0m most_recent        = true
      [32m+[0m[0m version            = (known after apply)
    }

[1m  # module.eks.data.aws_eks_addon_version.this["vpc-cni"][0m will be read during apply
  # (depends on a resource or a module with changes pending)
[0m [36m<=[0m[0m data "aws_eks_addon_version" "this" {
      [32m+[0m[0m addon_name         = "vpc-cni"
      [32m+[0m[0m id                 = (known after apply)
      [32m+[0m[0m kubernetes_version = "1.29"
      [32m+[0m[0m most_recent        = true
      [32m+[0m[0m version            = (known after apply)
    }

[1m  # module.eks.data.aws_iam_session_context.current[0m will be read during apply
  # (config refers to values not yet known)
[0m [36m<=[0m[0m data "aws_iam_session_context" "current" {
      [32m+[0m[0m arn          = (known after apply)
      [32m+[0m[0m id           = (known after apply)
      [32m+[0m[0m issuer_arn   = (known after apply)
      [32m+[0m[0m issuer_id    = (known after apply)
      [32m+[0m[0m issuer_name  = (known after apply)
      [32m+[0m[0m session_name = (known after apply)
    }

[1m  # module.eks.data.aws_partition.current[0m will be read during apply
  # (depends on a resource or a module with changes pending)
[0m [36m<=[0m[0m data "aws_partition" "current" {
      [32m+[0m[0m dns_suffix         = (known after apply)
      [32m+[0m[0m id                 = (known after apply)
      [32m+[0m[0m partition          = (known after apply)
      [32m+[0m[0m reverse_dns_prefix = (known after apply)
    }

[1m  # module.eks.data.tls_certificate.this[0][0m will be read during apply
  # (config refers to values not yet known)
[0m [36m<=[0m[0m data "tls_certificate" "this" {
      [32m+[0m[0m certificates = (known after apply)
      [32m+[0m[0m id           = (known after apply)
      [32m+[0m[0m url          = (known after apply)
    }

[1m  # module.eks.aws_ec2_tag.cluster_primary_security_group["Environment"][0m will be created
[0m  [32m+[0m[0m resource "aws_ec2_tag" "cluster_primary_security_group" {
      [32m+[0m[0m id          = (known after apply)
      [32m+[0m[0m key         = "Environment"
      [32m+[0m[0m resource_id = (known after apply)
      [32m+[0m[0m value       = "dev"
    }

[1m  # module.eks.aws_ec2_tag.cluster_primary_security_group["Terraform"][0m will be created
[0m  [32m+[0m[0m resource "aws_ec2_tag" "cluster_primary_security_group" {
      [32m+[0m[0m id          = (known after apply)
      [32m+[0m[0m key         = "Terraform"
      [32m+[0m[0m resource_id = (known after apply)
      [32m+[0m[0m value       = "true"
    }

[1m  # module.eks.aws_eks_access_entry.this["cluster_creator"][0m will be created
[0m  [32m+[0m[0m resource "aws_eks_access_entry" "this" {
      [32m+[0m[0m access_entry_arn  = (known after apply)
      [32m+[0m[0m cluster_name      = "csye7125"
      [32m+[0m[0m created_at        = (known after apply)
      [32m+[0m[0m id                = (known after apply)
      [32m+[0m[0m kubernetes_groups = (known after apply)
      [32m+[0m[0m modified_at       = (known after apply)
      [32m+[0m[0m principal_arn     = (known after apply)
      [32m+[0m[0m tags              = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "Terraform"   = "true"
        }
      [32m+[0m[0m tags_all          = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "Terraform"   = "true"
        }
      [32m+[0m[0m type              = "STANDARD"
      [32m+[0m[0m user_name         = (known after apply)
    }

[1m  # module.eks.aws_eks_access_entry.this["root"][0m will be created
[0m  [32m+[0m[0m resource "aws_eks_access_entry" "this" {
      [32m+[0m[0m access_entry_arn  = (known after apply)
      [32m+[0m[0m cluster_name      = "csye7125"
      [32m+[0m[0m created_at        = (known after apply)
      [32m+[0m[0m id                = (known after apply)
      [32m+[0m[0m kubernetes_groups = (known after apply)
      [32m+[0m[0m modified_at       = (known after apply)
      [32m+[0m[0m principal_arn     = "arn:aws:iam::654654499596:root"
      [32m+[0m[0m tags              = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "Terraform"   = "true"
        }
      [32m+[0m[0m tags_all          = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "Terraform"   = "true"
        }
      [32m+[0m[0m type              = "STANDARD"
      [32m+[0m[0m user_name         = (known after apply)
    }

[1m  # module.eks.aws_eks_access_policy_association.this["cluster_creator_admin"][0m will be created
[0m  [32m+[0m[0m resource "aws_eks_access_policy_association" "this" {
      [32m+[0m[0m associated_at = (known after apply)
      [32m+[0m[0m cluster_name  = "csye7125"
      [32m+[0m[0m id            = (known after apply)
      [32m+[0m[0m modified_at   = (known after apply)
      [32m+[0m[0m policy_arn    = (known after apply)
      [32m+[0m[0m principal_arn = (known after apply)

      [32m+[0m[0m access_scope {
          [32m+[0m[0m type = "cluster"
        }
    }

[1m  # module.eks.aws_eks_access_policy_association.this["root_example"][0m will be created
[0m  [32m+[0m[0m resource "aws_eks_access_policy_association" "this" {
      [32m+[0m[0m associated_at = (known after apply)
      [32m+[0m[0m cluster_name  = "csye7125"
      [32m+[0m[0m id            = (known after apply)
      [32m+[0m[0m modified_at   = (known after apply)
      [32m+[0m[0m policy_arn    = "arn:aws:eks::aws:cluster-access-policy/AmazonEKSClusterAdminPolicy"
      [32m+[0m[0m principal_arn = "arn:aws:iam::654654499596:root"

      [32m+[0m[0m access_scope {
          [32m+[0m[0m type = "cluster"
        }
    }

[1m  # module.eks.aws_eks_addon.this["aws-ebs-csi-driver"][0m will be created
[0m  [32m+[0m[0m resource "aws_eks_addon" "this" {
      [32m+[0m[0m addon_name                  = "aws-ebs-csi-driver"
      [32m+[0m[0m addon_version               = (known after apply)
      [32m+[0m[0m arn                         = (known after apply)
      [32m+[0m[0m cluster_name                = "csye7125"
      [32m+[0m[0m configuration_values        = (known after apply)
      [32m+[0m[0m created_at                  = (known after apply)
      [32m+[0m[0m id                          = (known after apply)
      [32m+[0m[0m modified_at                 = (known after apply)
      [32m+[0m[0m preserve                    = true
      [32m+[0m[0m resolve_conflicts_on_create = "OVERWRITE"
      [32m+[0m[0m resolve_conflicts_on_update = "OVERWRITE"
      [32m+[0m[0m service_account_role_arn    = (known after apply)
      [32m+[0m[0m tags                        = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "Terraform"   = "true"
        }
      [32m+[0m[0m tags_all                    = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "Terraform"   = "true"
        }

      [32m+[0m[0m timeouts {}
    }

[1m  # module.eks.aws_eks_addon.this["coredns"][0m will be created
[0m  [32m+[0m[0m resource "aws_eks_addon" "this" {
      [32m+[0m[0m addon_name                  = "coredns"
      [32m+[0m[0m addon_version               = (known after apply)
      [32m+[0m[0m arn                         = (known after apply)
      [32m+[0m[0m cluster_name                = "csye7125"
      [32m+[0m[0m configuration_values        = (known after apply)
      [32m+[0m[0m created_at                  = (known after apply)
      [32m+[0m[0m id                          = (known after apply)
      [32m+[0m[0m modified_at                 = (known after apply)
      [32m+[0m[0m preserve                    = true
      [32m+[0m[0m resolve_conflicts_on_create = "OVERWRITE"
      [32m+[0m[0m resolve_conflicts_on_update = "OVERWRITE"
      [32m+[0m[0m tags                        = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "Terraform"   = "true"
        }
      [32m+[0m[0m tags_all                    = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "Terraform"   = "true"
        }

      [32m+[0m[0m timeouts {}
    }

[1m  # module.eks.aws_eks_addon.this["eks-pod-identity-agent"][0m will be created
[0m  [32m+[0m[0m resource "aws_eks_addon" "this" {
      [32m+[0m[0m addon_name                  = "eks-pod-identity-agent"
      [32m+[0m[0m addon_version               = (known after apply)
      [32m+[0m[0m arn                         = (known after apply)
      [32m+[0m[0m cluster_name                = "csye7125"
      [32m+[0m[0m configuration_values        = (known after apply)
      [32m+[0m[0m created_at                  = (known after apply)
      [32m+[0m[0m id                          = (known after apply)
      [32m+[0m[0m modified_at                 = (known after apply)
      [32m+[0m[0m preserve                    = true
      [32m+[0m[0m resolve_conflicts_on_create = "OVERWRITE"
      [32m+[0m[0m resolve_conflicts_on_update = "OVERWRITE"
      [32m+[0m[0m tags                        = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "Terraform"   = "true"
        }
      [32m+[0m[0m tags_all                    = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "Terraform"   = "true"
        }

      [32m+[0m[0m timeouts {}
    }

[1m  # module.eks.aws_eks_addon.this["kube-proxy"][0m will be created
[0m  [32m+[0m[0m resource "aws_eks_addon" "this" {
      [32m+[0m[0m addon_name                  = "kube-proxy"
      [32m+[0m[0m addon_version               = (known after apply)
      [32m+[0m[0m arn                         = (known after apply)
      [32m+[0m[0m cluster_name                = "csye7125"
      [32m+[0m[0m configuration_values        = (known after apply)
      [32m+[0m[0m created_at                  = (known after apply)
      [32m+[0m[0m id                          = (known after apply)
      [32m+[0m[0m modified_at                 = (known after apply)
      [32m+[0m[0m preserve                    = true
      [32m+[0m[0m resolve_conflicts_on_create = "OVERWRITE"
      [32m+[0m[0m resolve_conflicts_on_update = "OVERWRITE"
      [32m+[0m[0m tags                        = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "Terraform"   = "true"
        }
      [32m+[0m[0m tags_all                    = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "Terraform"   = "true"
        }

      [32m+[0m[0m timeouts {}
    }

[1m  # module.eks.aws_eks_addon.this["vpc-cni"][0m will be created
[0m  [32m+[0m[0m resource "aws_eks_addon" "this" {
      [32m+[0m[0m addon_name                  = "vpc-cni"
      [32m+[0m[0m addon_version               = (known after apply)
      [32m+[0m[0m arn                         = (known after apply)
      [32m+[0m[0m cluster_name                = "csye7125"
      [32m+[0m[0m configuration_values        = (known after apply)
      [32m+[0m[0m created_at                  = (known after apply)
      [32m+[0m[0m id                          = (known after apply)
      [32m+[0m[0m modified_at                 = (known after apply)
      [32m+[0m[0m preserve                    = true
      [32m+[0m[0m resolve_conflicts_on_create = "OVERWRITE"
      [32m+[0m[0m resolve_conflicts_on_update = "OVERWRITE"
      [32m+[0m[0m tags                        = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "Terraform"   = "true"
        }
      [32m+[0m[0m tags_all                    = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "Terraform"   = "true"
        }

      [32m+[0m[0m timeouts {}
    }

[1m  # module.eks.aws_eks_cluster.this[0][0m will be created
[0m  [32m+[0m[0m resource "aws_eks_cluster" "this" {
      [32m+[0m[0m arn                       = (known after apply)
      [32m+[0m[0m certificate_authority     = (known after apply)
      [32m+[0m[0m cluster_id                = (known after apply)
      [32m+[0m[0m created_at                = (known after apply)
      [32m+[0m[0m enabled_cluster_log_types = [
          [32m+[0m[0m "api",
          [32m+[0m[0m "audit",
          [32m+[0m[0m "authenticator",
          [32m+[0m[0m "controllerManager",
          [32m+[0m[0m "scheduler",
        ]
      [32m+[0m[0m endpoint                  = (known after apply)
      [32m+[0m[0m id                        = (known after apply)
      [32m+[0m[0m identity                  = (known after apply)
      [32m+[0m[0m name                      = "csye7125"
      [32m+[0m[0m platform_version          = (known after apply)
      [32m+[0m[0m role_arn                  = (known after apply)
      [32m+[0m[0m status                    = (known after apply)
      [32m+[0m[0m tags                      = {
          [32m+[0m[0m "Environment"           = "dev"
          [32m+[0m[0m "Terraform"             = "true"
          [32m+[0m[0m "terraform-aws-modules" = "eks"
        }
      [32m+[0m[0m tags_all                  = {
          [32m+[0m[0m "Environment"           = "dev"
          [32m+[0m[0m "Terraform"             = "true"
          [32m+[0m[0m "terraform-aws-modules" = "eks"
        }
      [32m+[0m[0m version                   = "1.29"

      [32m+[0m[0m access_config {
          [32m+[0m[0m authentication_mode                         = "API_AND_CONFIG_MAP"
          [32m+[0m[0m bootstrap_cluster_creator_admin_permissions = false
        }

      [32m+[0m[0m encryption_config {
          [32m+[0m[0m resources = [
              [32m+[0m[0m "secrets",
            ]

          [32m+[0m[0m provider {
              [32m+[0m[0m key_arn = (known after apply)
            }
        }

      [32m+[0m[0m kubernetes_network_config {
          [32m+[0m[0m ip_family         = "ipv4"
          [32m+[0m[0m service_ipv4_cidr = (known after apply)
          [32m+[0m[0m service_ipv6_cidr = (known after apply)
        }

      [32m+[0m[0m timeouts {}

      [32m+[0m[0m vpc_config {
          [32m+[0m[0m cluster_security_group_id = (known after apply)
          [32m+[0m[0m endpoint_private_access   = true
          [32m+[0m[0m endpoint_public_access    = true
          [32m+[0m[0m public_access_cidrs       = [
              [32m+[0m[0m "0.0.0.0/0",
            ]
          [32m+[0m[0m security_group_ids        = (known after apply)
          [32m+[0m[0m subnet_ids                = (known after apply)
          [32m+[0m[0m vpc_id                    = (known after apply)
        }
    }

[1m  # module.eks.aws_iam_openid_connect_provider.oidc_provider[0][0m will be created
[0m  [32m+[0m[0m resource "aws_iam_openid_connect_provider" "oidc_provider" {
      [32m+[0m[0m arn             = (known after apply)
      [32m+[0m[0m client_id_list  = [
          [32m+[0m[0m "sts.amazonaws.com",
        ]
      [32m+[0m[0m id              = (known after apply)
      [32m+[0m[0m tags            = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "Name"        = "csye7125-eks-irsa"
          [32m+[0m[0m "Terraform"   = "true"
        }
      [32m+[0m[0m tags_all        = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "Name"        = "csye7125-eks-irsa"
          [32m+[0m[0m "Terraform"   = "true"
        }
      [32m+[0m[0m thumbprint_list = (known after apply)
      [32m+[0m[0m url             = (known after apply)
    }

[1m  # module.eks.aws_security_group.cluster[0][0m will be created
[0m  [32m+[0m[0m resource "aws_security_group" "cluster" {
      [32m+[0m[0m arn                    = (known after apply)
      [32m+[0m[0m description            = "EKS cluster security group"
      [32m+[0m[0m egress                 = (known after apply)
      [32m+[0m[0m id                     = (known after apply)
      [32m+[0m[0m ingress                = (known after apply)
      [32m+[0m[0m name                   = (known after apply)
      [32m+[0m[0m name_prefix            = "csye7125-cluster-"
      [32m+[0m[0m owner_id               = (known after apply)
      [32m+[0m[0m revoke_rules_on_delete = false
      [32m+[0m[0m tags                   = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "Name"        = "csye7125-cluster"
          [32m+[0m[0m "Terraform"   = "true"
        }
      [32m+[0m[0m tags_all               = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "Name"        = "csye7125-cluster"
          [32m+[0m[0m "Terraform"   = "true"
        }
      [32m+[0m[0m vpc_id                 = (known after apply)
    }

[1m  # module.eks.aws_security_group.node[0][0m will be created
[0m  [32m+[0m[0m resource "aws_security_group" "node" {
      [32m+[0m[0m arn                    = (known after apply)
      [32m+[0m[0m description            = "EKS node shared security group"
      [32m+[0m[0m egress                 = (known after apply)
      [32m+[0m[0m id                     = (known after apply)
      [32m+[0m[0m ingress                = (known after apply)
      [32m+[0m[0m name                   = (known after apply)
      [32m+[0m[0m name_prefix            = "csye7125-node-"
      [32m+[0m[0m owner_id               = (known after apply)
      [32m+[0m[0m revoke_rules_on_delete = false
      [32m+[0m[0m tags                   = {
          [32m+[0m[0m "Environment"                    = "dev"
          [32m+[0m[0m "Name"                           = "csye7125-node"
          [32m+[0m[0m "Terraform"                      = "true"
          [32m+[0m[0m "kubernetes.io/cluster/csye7125" = "owned"
        }
      [32m+[0m[0m tags_all               = {
          [32m+[0m[0m "Environment"                    = "dev"
          [32m+[0m[0m "Name"                           = "csye7125-node"
          [32m+[0m[0m "Terraform"                      = "true"
          [32m+[0m[0m "kubernetes.io/cluster/csye7125" = "owned"
        }
      [32m+[0m[0m vpc_id                 = (known after apply)
    }

[1m  # module.eks.aws_security_group_rule.cluster["ingress_nodes_443"][0m will be created
[0m  [32m+[0m[0m resource "aws_security_group_rule" "cluster" {
      [32m+[0m[0m description              = "Node groups to cluster API"
      [32m+[0m[0m from_port                = 443
      [32m+[0m[0m id                       = (known after apply)
      [32m+[0m[0m protocol                 = "tcp"
      [32m+[0m[0m security_group_id        = (known after apply)
      [32m+[0m[0m security_group_rule_id   = (known after apply)
      [32m+[0m[0m self                     = false
      [32m+[0m[0m source_security_group_id = (known after apply)
      [32m+[0m[0m to_port                  = 443
      [32m+[0m[0m type                     = "ingress"
    }

[1m  # module.eks.aws_security_group_rule.node["egress_all"][0m will be created
[0m  [32m+[0m[0m resource "aws_security_group_rule" "node" {
      [32m+[0m[0m cidr_blocks              = [
          [32m+[0m[0m "0.0.0.0/0",
        ]
      [32m+[0m[0m description              = "Allow all egress"
      [32m+[0m[0m from_port                = 0
      [32m+[0m[0m id                       = (known after apply)
      [32m+[0m[0m prefix_list_ids          = []
      [32m+[0m[0m protocol                 = "-1"
      [32m+[0m[0m security_group_id        = (known after apply)
      [32m+[0m[0m security_group_rule_id   = (known after apply)
      [32m+[0m[0m self                     = false
      [32m+[0m[0m source_security_group_id = (known after apply)
      [32m+[0m[0m to_port                  = 0
      [32m+[0m[0m type                     = "egress"
    }

[1m  # module.eks.aws_security_group_rule.node["ingress_cluster_443"][0m will be created
[0m  [32m+[0m[0m resource "aws_security_group_rule" "node" {
      [32m+[0m[0m description              = "Cluster API to node groups"
      [32m+[0m[0m from_port                = 443
      [32m+[0m[0m id                       = (known after apply)
      [32m+[0m[0m prefix_list_ids          = []
      [32m+[0m[0m protocol                 = "tcp"
      [32m+[0m[0m security_group_id        = (known after apply)
      [32m+[0m[0m security_group_rule_id   = (known after apply)
      [32m+[0m[0m self                     = false
      [32m+[0m[0m source_security_group_id = (known after apply)
      [32m+[0m[0m to_port                  = 443
      [32m+[0m[0m type                     = "ingress"
    }

[1m  # module.eks.aws_security_group_rule.node["ingress_cluster_4443_webhook"][0m will be created
[0m  [32m+[0m[0m resource "aws_security_group_rule" "node" {
      [32m+[0m[0m description              = "Cluster API to node 4443/tcp webhook"
      [32m+[0m[0m from_port                = 4443
      [32m+[0m[0m id                       = (known after apply)
      [32m+[0m[0m prefix_list_ids          = []
      [32m+[0m[0m protocol                 = "tcp"
      [32m+[0m[0m security_group_id        = (known after apply)
      [32m+[0m[0m security_group_rule_id   = (known after apply)
      [32m+[0m[0m self                     = false
      [32m+[0m[0m source_security_group_id = (known after apply)
      [32m+[0m[0m to_port                  = 4443
      [32m+[0m[0m type                     = "ingress"
    }

[1m  # module.eks.aws_security_group_rule.node["ingress_cluster_6443_webhook"][0m will be created
[0m  [32m+[0m[0m resource "aws_security_group_rule" "node" {
      [32m+[0m[0m description              = "Cluster API to node 6443/tcp webhook"
      [32m+[0m[0m from_port                = 6443
      [32m+[0m[0m id                       = (known after apply)
      [32m+[0m[0m prefix_list_ids          = []
      [32m+[0m[0m protocol                 = "tcp"
      [32m+[0m[0m security_group_id        = (known after apply)
      [32m+[0m[0m security_group_rule_id   = (known after apply)
      [32m+[0m[0m self                     = false
      [32m+[0m[0m source_security_group_id = (known after apply)
      [32m+[0m[0m to_port                  = 6443
      [32m+[0m[0m type                     = "ingress"
    }

[1m  # module.eks.aws_security_group_rule.node["ingress_cluster_8443_webhook"][0m will be created
[0m  [32m+[0m[0m resource "aws_security_group_rule" "node" {
      [32m+[0m[0m description              = "Cluster API to node 8443/tcp webhook"
      [32m+[0m[0m from_port                = 8443
      [32m+[0m[0m id                       = (known after apply)
      [32m+[0m[0m prefix_list_ids          = []
      [32m+[0m[0m protocol                 = "tcp"
      [32m+[0m[0m security_group_id        = (known after apply)
      [32m+[0m[0m security_group_rule_id   = (known after apply)
      [32m+[0m[0m self                     = false
      [32m+[0m[0m source_security_group_id = (known after apply)
      [32m+[0m[0m to_port                  = 8443
      [32m+[0m[0m type                     = "ingress"
    }

[1m  # module.eks.aws_security_group_rule.node["ingress_cluster_9443_webhook"][0m will be created
[0m  [32m+[0m[0m resource "aws_security_group_rule" "node" {
      [32m+[0m[0m description              = "Cluster API to node 9443/tcp webhook"
      [32m+[0m[0m from_port                = 9443
      [32m+[0m[0m id                       = (known after apply)
      [32m+[0m[0m prefix_list_ids          = []
      [32m+[0m[0m protocol                 = "tcp"
      [32m+[0m[0m security_group_id        = (known after apply)
      [32m+[0m[0m security_group_rule_id   = (known after apply)
      [32m+[0m[0m self                     = false
      [32m+[0m[0m source_security_group_id = (known after apply)
      [32m+[0m[0m to_port                  = 9443
      [32m+[0m[0m type                     = "ingress"
    }

[1m  # module.eks.aws_security_group_rule.node["ingress_cluster_kubelet"][0m will be created
[0m  [32m+[0m[0m resource "aws_security_group_rule" "node" {
      [32m+[0m[0m description              = "Cluster API to node kubelets"
      [32m+[0m[0m from_port                = 10250
      [32m+[0m[0m id                       = (known after apply)
      [32m+[0m[0m prefix_list_ids          = []
      [32m+[0m[0m protocol                 = "tcp"
      [32m+[0m[0m security_group_id        = (known after apply)
      [32m+[0m[0m security_group_rule_id   = (known after apply)
      [32m+[0m[0m self                     = false
      [32m+[0m[0m source_security_group_id = (known after apply)
      [32m+[0m[0m to_port                  = 10250
      [32m+[0m[0m type                     = "ingress"
    }

[1m  # module.eks.aws_security_group_rule.node["ingress_nodes_ephemeral"][0m will be created
[0m  [32m+[0m[0m resource "aws_security_group_rule" "node" {
      [32m+[0m[0m description              = "Node to node ingress on ephemeral ports"
      [32m+[0m[0m from_port                = 1025
      [32m+[0m[0m id                       = (known after apply)
      [32m+[0m[0m prefix_list_ids          = []
      [32m+[0m[0m protocol                 = "tcp"
      [32m+[0m[0m security_group_id        = (known after apply)
      [32m+[0m[0m security_group_rule_id   = (known after apply)
      [32m+[0m[0m self                     = true
      [32m+[0m[0m source_security_group_id = (known after apply)
      [32m+[0m[0m to_port                  = 65535
      [32m+[0m[0m type                     = "ingress"
    }

[1m  # module.eks.aws_security_group_rule.node["ingress_self_coredns_tcp"][0m will be created
[0m  [32m+[0m[0m resource "aws_security_group_rule" "node" {
      [32m+[0m[0m description              = "Node to node CoreDNS"
      [32m+[0m[0m from_port                = 53
      [32m+[0m[0m id                       = (known after apply)
      [32m+[0m[0m prefix_list_ids          = []
      [32m+[0m[0m protocol                 = "tcp"
      [32m+[0m[0m security_group_id        = (known after apply)
      [32m+[0m[0m security_group_rule_id   = (known after apply)
      [32m+[0m[0m self                     = true
      [32m+[0m[0m source_security_group_id = (known after apply)
      [32m+[0m[0m to_port                  = 53
      [32m+[0m[0m type                     = "ingress"
    }

[1m  # module.eks.aws_security_group_rule.node["ingress_self_coredns_udp"][0m will be created
[0m  [32m+[0m[0m resource "aws_security_group_rule" "node" {
      [32m+[0m[0m description              = "Node to node CoreDNS UDP"
      [32m+[0m[0m from_port                = 53
      [32m+[0m[0m id                       = (known after apply)
      [32m+[0m[0m prefix_list_ids          = []
      [32m+[0m[0m protocol                 = "udp"
      [32m+[0m[0m security_group_id        = (known after apply)
      [32m+[0m[0m security_group_rule_id   = (known after apply)
      [32m+[0m[0m self                     = true
      [32m+[0m[0m source_security_group_id = (known after apply)
      [32m+[0m[0m to_port                  = 53
      [32m+[0m[0m type                     = "ingress"
    }

[1m  # module.eks.time_sleep.this[0][0m will be created
[0m  [32m+[0m[0m resource "time_sleep" "this" {
      [32m+[0m[0m create_duration = "30s"
      [32m+[0m[0m id              = (known after apply)
      [32m+[0m[0m triggers        = {
          [32m+[0m[0m "cluster_certificate_authority_data" = (known after apply)
          [32m+[0m[0m "cluster_endpoint"                   = (known after apply)
          [32m+[0m[0m "cluster_name"                       = "csye7125"
          [32m+[0m[0m "cluster_service_cidr"               = (known after apply)
          [32m+[0m[0m "cluster_version"                    = "1.29"
        }
    }

[1m  # module.eks.module.eks_managed_node_group["vk"].data.aws_caller_identity.current[0m will be read during apply
  # (depends on a resource or a module with changes pending)
[0m [36m<=[0m[0m data "aws_caller_identity" "current" {
      [32m+[0m[0m account_id = (known after apply)
      [32m+[0m[0m arn        = (known after apply)
      [32m+[0m[0m id         = (known after apply)
      [32m+[0m[0m user_id    = (known after apply)
    }

[1m  # module.eks.module.eks_managed_node_group["vk"].data.aws_partition.current[0m will be read during apply
  # (depends on a resource or a module with changes pending)
[0m [36m<=[0m[0m data "aws_partition" "current" {
      [32m+[0m[0m dns_suffix         = (known after apply)
      [32m+[0m[0m id                 = (known after apply)
      [32m+[0m[0m partition          = (known after apply)
      [32m+[0m[0m reverse_dns_prefix = (known after apply)
    }

[1m  # module.eks.module.eks_managed_node_group["vk"].aws_eks_node_group.this[0][0m will be created
[0m  [32m+[0m[0m resource "aws_eks_node_group" "this" {
      [32m+[0m[0m ami_type               = "AL2_x86_64"
      [32m+[0m[0m arn                    = (known after apply)
      [32m+[0m[0m capacity_type          = "ON_DEMAND"
      [32m+[0m[0m cluster_name           = "csye7125"
      [32m+[0m[0m disk_size              = (known after apply)
      [32m+[0m[0m id                     = (known after apply)
      [32m+[0m[0m instance_types         = [
          [32m+[0m[0m "c3.xlarge",
        ]
      [32m+[0m[0m node_group_name        = (known after apply)
      [32m+[0m[0m node_group_name_prefix = "vk-"
      [32m+[0m[0m node_role_arn          = (known after apply)
      [32m+[0m[0m release_version        = (known after apply)
      [32m+[0m[0m resources              = (known after apply)
      [32m+[0m[0m status                 = (known after apply)
      [32m+[0m[0m subnet_ids             = (known after apply)
      [32m+[0m[0m tags                   = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "Name"        = "vk"
          [32m+[0m[0m "Terraform"   = "true"
        }
      [32m+[0m[0m tags_all               = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "Name"        = "vk"
          [32m+[0m[0m "Terraform"   = "true"
        }
      [32m+[0m[0m version                = "1.29"

      [32m+[0m[0m launch_template {
          [32m+[0m[0m id      = (known after apply)
          [32m+[0m[0m name    = (known after apply)
          [32m+[0m[0m version = (known after apply)
        }

      [32m+[0m[0m scaling_config {
          [32m+[0m[0m desired_size = 3
          [32m+[0m[0m max_size     = 6
          [32m+[0m[0m min_size     = 3
        }

      [32m+[0m[0m timeouts {}

      [32m+[0m[0m update_config {
          [32m+[0m[0m max_unavailable = 1
        }
    }

[1m  # module.eks.module.eks_managed_node_group["vk"].aws_launch_template.this[0][0m will be created
[0m  [32m+[0m[0m resource "aws_launch_template" "this" {
      [32m+[0m[0m arn                    = (known after apply)
      [32m+[0m[0m default_version        = (known after apply)
      [32m+[0m[0m description            = "Custom launch template for vk EKS managed node group"
      [32m+[0m[0m id                     = (known after apply)
      [32m+[0m[0m latest_version         = (known after apply)
      [32m+[0m[0m name                   = (known after apply)
      [32m+[0m[0m name_prefix            = "vk-"
      [32m+[0m[0m tags                   = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "Terraform"   = "true"
        }
      [32m+[0m[0m tags_all               = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "Terraform"   = "true"
        }
      [32m+[0m[0m update_default_version = true
      [32m+[0m[0m vpc_security_group_ids = (known after apply)

      [32m+[0m[0m metadata_options {
          [32m+[0m[0m http_endpoint               = "enabled"
          [32m+[0m[0m http_protocol_ipv6          = (known after apply)
          [32m+[0m[0m http_put_response_hop_limit = 2
          [32m+[0m[0m http_tokens                 = "required"
          [32m+[0m[0m instance_metadata_tags      = (known after apply)
        }

      [32m+[0m[0m monitoring {
          [32m+[0m[0m enabled = true
        }

      [32m+[0m[0m tag_specifications {
          [32m+[0m[0m resource_type = "instance"
          [32m+[0m[0m tags          = {
              [32m+[0m[0m "Environment" = "dev"
              [32m+[0m[0m "Name"        = "vk"
              [32m+[0m[0m "Terraform"   = "true"
            }
        }
      [32m+[0m[0m tag_specifications {
          [32m+[0m[0m resource_type = "network-interface"
          [32m+[0m[0m tags          = {
              [32m+[0m[0m "Environment" = "dev"
              [32m+[0m[0m "Name"        = "vk"
              [32m+[0m[0m "Terraform"   = "true"
            }
        }
      [32m+[0m[0m tag_specifications {
          [32m+[0m[0m resource_type = "volume"
          [32m+[0m[0m tags          = {
              [32m+[0m[0m "Environment" = "dev"
              [32m+[0m[0m "Name"        = "vk"
              [32m+[0m[0m "Terraform"   = "true"
            }
        }
    }

[1m  # module.eks.module.eks_managed_node_group["vk"].module.user_data.null_resource.validate_cluster_service_cidr[0m will be created
[0m  [32m+[0m[0m resource "null_resource" "validate_cluster_service_cidr" {
      [32m+[0m[0m id = (known after apply)
    }

[1mPlan:[0m 64 to add, 0 to change, 0 to destroy.
[0m
Changes to Outputs:
  [32m+[0m[0m account_id                = "654654499596"
  [32m+[0m[0m cluster_endpoint          = (known after apply)
  [32m+[0m[0m cluster_oidc_issuer_url   = (known after apply)
  [32m+[0m[0m cluster_security_group_id = (known after apply)
[0m[1m
Do you want to perform these actions?[0m
  Terraform will perform the actions described above.
  Only 'yes' will be accepted to approve.

  [1mEnter a value:[0m [0m
[0m[1maws_kms_key.eks_secrets: Creating...[0m[0m
[0m[1maws_kms_key.ebs: Creating...[0m[0m
[0m[1mmodule.ebs_csi_irsa_role.aws_iam_policy.ebs_csi[0]: Creating...[0m[0m
[0m[1maws_vpc.eks_vpc: Creating...[0m[0m
[0m[1maws_iam_role.eks_cluster: Creating...[0m[0m
[0m[1maws_iam_role.eks_node_group: Creating...[0m[0m
[0m[1mmodule.ebs_csi_irsa_role.aws_iam_policy.ebs_csi[0]: Creation complete after 1s [id=arn:aws:iam::654654499596:policy/AmazonEKS_EBS_CSI_Policy-20240627163501350400000001][0m
[0m[1maws_iam_role.eks_node_group: Creation complete after 1s [id=eks-node-group-role][0m
[0m[1maws_iam_role.eks_cluster: Creation complete after 1s [id=eks-cluster-role][0m
[0m[1maws_iam_role_policy_attachment.eks_cni_policy: Creating...[0m[0m
[0m[1mmodule.eks.data.aws_partition.current: Reading...[0m[0m
[0m[1maws_iam_role_policy_attachment.eks_cluster_policy2: Creating...[0m[0m
[0m[1maws_iam_role_policy_attachment.eks_worker_node_policy: Creating...[0m[0m
[0m[1maws_iam_role_policy_attachment.eks_cluster_policy: Creating...[0m[0m
[0m[1maws_iam_role_policy_attachment.eks_container_registry_policy: Creating...[0m[0m
[0m[1mmodule.eks.data.aws_caller_identity.current: Reading...[0m[0m
[0m[1mmodule.eks.data.aws_partition.current: Read complete after 0s [id=aws][0m
[0m[1mmodule.eks.data.aws_caller_identity.current: Read complete after 0s [id=654654499596][0m
[0m[1mmodule.eks.data.aws_iam_session_context.current: Reading...[0m[0m
[0m[1mmodule.eks.data.aws_iam_session_context.current: Read complete after 0s [id=arn:aws:iam::654654499596:user/vinay-console][0m
[0m[1maws_iam_role_policy_attachment.eks_cluster_policy: Creation complete after 0s [id=eks-cluster-role-20240627163502042100000003][0m
[0m[1maws_iam_role_policy_attachment.eks_cluster_policy2: Creation complete after 0s [id=eks-cluster-role-20240627163502083200000004][0m
[0m[1maws_iam_role_policy_attachment.eks_container_registry_policy: Creation complete after 0s [id=eks-node-group-role-20240627163501976200000002][0m
[0m[1maws_iam_role_policy_attachment.eks_worker_node_policy: Creation complete after 0s [id=eks-node-group-role-20240627163502113500000005][0m
[0m[1maws_iam_role_policy_attachment.eks_cni_policy: Creation complete after 0s [id=eks-node-group-role-20240627163502252900000006][0m
[0m[1maws_vpc.eks_vpc: Creation complete after 2s [id=vpc-0b84c8714ad854d1a][0m
[0m[1maws_internet_gateway.eks_igw: Creating...[0m[0m
[0m[1maws_subnet.eks_private_subnet1: Creating...[0m[0m
[0m[1maws_subnet.eks_public_subnet1: Creating...[0m[0m
[0m[1maws_subnet.eks_private_subnet3: Creating...[0m[0m
[0m[1mmodule.eks.aws_security_group.node[0]: Creating...[0m[0m
[0m[1maws_subnet.eks_public_subnet3: Creating...[0m[0m
[0m[1maws_subnet.eks_public_subnet2: Creating...[0m[0m
[0m[1maws_subnet.eks_private_subnet2: Creating...[0m[0m
[0m[1maws_internet_gateway.eks_igw: Creation complete after 1s [id=igw-063303297ccface04][0m
[0m[1mmodule.eks.aws_security_group.cluster[0]: Creating...[0m[0m
[0m[1maws_subnet.eks_private_subnet1: Creation complete after 1s [id=subnet-0a90f3d1e706a91a1][0m
[0m[1maws_subnet.eks_private_subnet2: Creation complete after 1s [id=subnet-0eebf3150a5a0479e][0m
[0m[1maws_route_table.eks_public_route_table: Creating...[0m[0m
[0m[1maws_subnet.eks_private_subnet3: Creation complete after 1s [id=subnet-08674549b4cdf4651][0m
[0m[1maws_route_table.eks_public_route_table: Creation complete after 1s [id=rtb-08ec1cdd637f5550b][0m
[0m[1mmodule.eks.aws_security_group.node[0]: Creation complete after 2s [id=sg-066c7f961685ab500][0m
[0m[1mmodule.eks.aws_security_group.cluster[0]: Creation complete after 2s [id=sg-0c457bb4549e8a72c][0m
[0m[1mmodule.eks.aws_security_group_rule.cluster["ingress_nodes_443"]: Creating...[0m[0m
[0m[1mmodule.eks.aws_security_group_rule.node["ingress_cluster_443"]: Creating...[0m[0m
[0m[1mmodule.eks.aws_security_group_rule.node["egress_all"]: Creating...[0m[0m
[0m[1mmodule.eks.aws_security_group_rule.node["ingress_self_coredns_tcp"]: Creating...[0m[0m
[0m[1mmodule.eks.aws_security_group_rule.node["ingress_cluster_6443_webhook"]: Creating...[0m[0m
[0m[1maws_kms_key.eks_secrets: Creation complete after 5s [id=160f5579-4a65-47d4-9a91-ac1d289cbbf3][0m
[0m[1mmodule.eks.aws_security_group_rule.node["ingress_cluster_9443_webhook"]: Creating...[0m[0m
[0m[1mmodule.eks.aws_security_group_rule.node["ingress_cluster_443"]: Creation complete after 1s [id=sgrule-3265642112][0m
[0m[1mmodule.eks.aws_security_group_rule.node["ingress_cluster_kubelet"]: Creating...[0m[0m
[0m[1mmodule.eks.aws_security_group_rule.cluster["ingress_nodes_443"]: Creation complete after 1s [id=sgrule-3918939711][0m
[0m[1mmodule.eks.aws_security_group_rule.node["ingress_cluster_8443_webhook"]: Creating...[0m[0m
[0m[1mmodule.eks.aws_security_group_rule.node["egress_all"]: Creation complete after 2s [id=sgrule-4189501262][0m
[0m[1mmodule.eks.aws_security_group_rule.node["ingress_cluster_4443_webhook"]: Creating...[0m[0m
[0m[1mmodule.eks.aws_security_group_rule.node["ingress_self_coredns_tcp"]: Creation complete after 2s [id=sgrule-398329939][0m
[0m[1mmodule.eks.aws_security_group_rule.node["ingress_nodes_ephemeral"]: Creating...[0m[0m
[0m[1mmodule.eks.aws_security_group_rule.node["ingress_cluster_6443_webhook"]: Creation complete after 3s [id=sgrule-1756068417][0m
[0m[1mmodule.eks.aws_security_group_rule.node["ingress_self_coredns_udp"]: Creating...[0m[0m
[0m[1mmodule.eks.aws_security_group_rule.node["ingress_cluster_9443_webhook"]: Creation complete after 4s [id=sgrule-525759915][0m
[0m[1maws_iam_policy.inline_policy: Creating...[0m[0m
[0m[1maws_iam_policy.inline_policy: Creation complete after 0s [id=arn:aws:iam::654654499596:policy/eks-cluster-policy-kms][0m
[0m[1maws_iam_policy_attachment.inline_kms_policy_attachment: Creating...[0m[0m
[0m[1maws_iam_policy_attachment.inline_kms_policy_attachment: Creation complete after 0s [id=eks-cluster-policy-kms-attachment][0m
[0m[1mmodule.eks.aws_security_group_rule.node["ingress_cluster_kubelet"]: Creation complete after 3s [id=sgrule-2695532756][0m
[0m[1mmodule.eks.aws_security_group_rule.node["ingress_cluster_8443_webhook"]: Creation complete after 4s [id=sgrule-2079802976][0m
[0m[1maws_kms_key.ebs: Still creating... [10s elapsed][0m[0m
[0m[1mmodule.eks.aws_security_group_rule.node["ingress_cluster_4443_webhook"]: Creation complete after 3s [id=sgrule-2716409303][0m
[0m[1mmodule.eks.aws_security_group_rule.node["ingress_nodes_ephemeral"]: Creation complete after 4s [id=sgrule-3775636403][0m
[0m[1mmodule.eks.aws_security_group_rule.node["ingress_self_coredns_udp"]: Creation complete after 4s [id=sgrule-3017911228][0m
[0m[1maws_subnet.eks_public_subnet1: Still creating... [10s elapsed][0m[0m
[0m[1maws_subnet.eks_public_subnet3: Still creating... [10s elapsed][0m[0m
[0m[1maws_subnet.eks_public_subnet2: Still creating... [10s elapsed][0m[0m
[0m[1maws_subnet.eks_public_subnet2: Creation complete after 11s [id=subnet-07649b43667bf3415][0m
[0m[1maws_route_table_association.jenkins_public_subnet2_association: Creating...[0m[0m
[0m[1maws_subnet.eks_public_subnet3: Creation complete after 11s [id=subnet-076246c8fd4cb7804][0m
[0m[1maws_subnet.eks_public_subnet1: Creation complete after 11s [id=subnet-06eea5a4d48a56a77][0m
[0m[1maws_route_table_association.jenkins_public_subnet3_association: Creating...[0m[0m
[0m[1maws_route_table_association.jenkins_public_subnet1_association: Creating...[0m[0m
[0m[1mmodule.eks.aws_eks_cluster.this[0]: Creating...[0m[0m
[0m[1maws_route_table_association.jenkins_public_subnet2_association: Creation complete after 1s [id=rtbassoc-04c9325e4f892d30e][0m
[0m[1maws_route_table_association.jenkins_public_subnet1_association: Creation complete after 0s [id=rtbassoc-06ea841700475c964][0m
[0m[1maws_route_table_association.jenkins_public_subnet3_association: Creation complete after 0s [id=rtbassoc-0e180021a00b5185f][0m
[0m[1maws_kms_key.ebs: Creation complete after 17s [id=c0d488b3-d18e-4cbb-9327-9cbae3c02bc4][0m
[0m[1mmodule.eks.module.eks_managed_node_group["vk"].data.aws_caller_identity.current: Reading...[0m[0m
[0m[1maws_iam_policy.inline_policy_ebs: Creating...[0m[0m
[0m[1mmodule.eks.module.eks_managed_node_group["vk"].data.aws_partition.current: Reading...[0m[0m
[0m[1mmodule.eks.module.eks_managed_node_group["vk"].data.aws_partition.current: Read complete after 0s [id=aws][0m
[0m[1mmodule.eks.module.eks_managed_node_group["vk"].data.aws_caller_identity.current: Read complete after 0s [id=654654499596][0m
[0m[1maws_iam_policy.inline_policy_ebs: Creation complete after 0s [id=arn:aws:iam::654654499596:policy/eks-cluster-node-policy-kms][0m
[0m[1maws_iam_policy_attachment.node_group_policy: Creating...[0m[0m
[0m[1maws_iam_policy_attachment.node_group_policy: Creation complete after 0s [id=eks-cluster-node-policy-kms-attachment][0m
[0m[1mmodule.eks.aws_eks_cluster.this[0]: Still creating... [10s elapsed][0m[0m
Stopping operation...

Interrupt received.
Please wait for Terraform to exit or data loss may occur.
Gracefully shutting down...

